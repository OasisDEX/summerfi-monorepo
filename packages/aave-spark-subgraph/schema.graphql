"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type AaveLikeBorrow {
  id: ID!
  reserve: Bytes!
  user: Bytes!
  onBehalfOf: Bytes!
  amount: BigInt!
  borrowRateMode: BigInt!
  borrowRate: BigInt!
  referral: BigInt!
  version: String
  protocol: String!
  variableDebtAfter: BigDecimal
  stableDebtAfter: BigDecimal
  debtDelta: BigDecimal
  tokenPriceUSD: BigDecimal
  token: Token
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input AaveLikeBorrow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  reserve: Bytes
  reserve_not: Bytes
  reserve_gt: Bytes
  reserve_lt: Bytes
  reserve_gte: Bytes
  reserve_lte: Bytes
  reserve_in: [Bytes!]
  reserve_not_in: [Bytes!]
  reserve_contains: Bytes
  reserve_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  onBehalfOf: Bytes
  onBehalfOf_not: Bytes
  onBehalfOf_gt: Bytes
  onBehalfOf_lt: Bytes
  onBehalfOf_gte: Bytes
  onBehalfOf_lte: Bytes
  onBehalfOf_in: [Bytes!]
  onBehalfOf_not_in: [Bytes!]
  onBehalfOf_contains: Bytes
  onBehalfOf_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  borrowRateMode: BigInt
  borrowRateMode_not: BigInt
  borrowRateMode_gt: BigInt
  borrowRateMode_lt: BigInt
  borrowRateMode_gte: BigInt
  borrowRateMode_lte: BigInt
  borrowRateMode_in: [BigInt!]
  borrowRateMode_not_in: [BigInt!]
  borrowRate: BigInt
  borrowRate_not: BigInt
  borrowRate_gt: BigInt
  borrowRate_lt: BigInt
  borrowRate_gte: BigInt
  borrowRate_lte: BigInt
  borrowRate_in: [BigInt!]
  borrowRate_not_in: [BigInt!]
  referral: BigInt
  referral_not: BigInt
  referral_gt: BigInt
  referral_lt: BigInt
  referral_gte: BigInt
  referral_lte: BigInt
  referral_in: [BigInt!]
  referral_not_in: [BigInt!]
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  variableDebtAfter: BigDecimal
  variableDebtAfter_not: BigDecimal
  variableDebtAfter_gt: BigDecimal
  variableDebtAfter_lt: BigDecimal
  variableDebtAfter_gte: BigDecimal
  variableDebtAfter_lte: BigDecimal
  variableDebtAfter_in: [BigDecimal!]
  variableDebtAfter_not_in: [BigDecimal!]
  stableDebtAfter: BigDecimal
  stableDebtAfter_not: BigDecimal
  stableDebtAfter_gt: BigDecimal
  stableDebtAfter_lt: BigDecimal
  stableDebtAfter_gte: BigDecimal
  stableDebtAfter_lte: BigDecimal
  stableDebtAfter_in: [BigDecimal!]
  stableDebtAfter_not_in: [BigDecimal!]
  debtDelta: BigDecimal
  debtDelta_not: BigDecimal
  debtDelta_gt: BigDecimal
  debtDelta_lt: BigDecimal
  debtDelta_gte: BigDecimal
  debtDelta_lte: BigDecimal
  debtDelta_in: [BigDecimal!]
  debtDelta_not_in: [BigDecimal!]
  tokenPriceUSD: BigDecimal
  tokenPriceUSD_not: BigDecimal
  tokenPriceUSD_gt: BigDecimal
  tokenPriceUSD_lt: BigDecimal
  tokenPriceUSD_gte: BigDecimal
  tokenPriceUSD_lte: BigDecimal
  tokenPriceUSD_in: [BigDecimal!]
  tokenPriceUSD_not_in: [BigDecimal!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AaveLikeBorrow_filter]
  or: [AaveLikeBorrow_filter]
}

enum AaveLikeBorrow_orderBy {
  id
  reserve
  user
  onBehalfOf
  amount
  borrowRateMode
  borrowRate
  referral
  version
  protocol
  variableDebtAfter
  stableDebtAfter
  debtDelta
  tokenPriceUSD
  token
  token__id
  token__address
  token__symbol
  token__decimals
  token__precision
  txHash
  blockNumber
  timestamp
}

type AaveLikeDeposit {
  id: ID!
  reserve: Bytes!
  user: Bytes!
  onBehalfOf: Bytes!
  amount: BigInt!
  referral: BigInt!
  version: String
  protocol: String!
  collateralAfter: BigDecimal
  collateralDelta: BigDecimal
  tokenPriceUSD: BigDecimal
  token: Token
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input AaveLikeDeposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  reserve: Bytes
  reserve_not: Bytes
  reserve_gt: Bytes
  reserve_lt: Bytes
  reserve_gte: Bytes
  reserve_lte: Bytes
  reserve_in: [Bytes!]
  reserve_not_in: [Bytes!]
  reserve_contains: Bytes
  reserve_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  onBehalfOf: Bytes
  onBehalfOf_not: Bytes
  onBehalfOf_gt: Bytes
  onBehalfOf_lt: Bytes
  onBehalfOf_gte: Bytes
  onBehalfOf_lte: Bytes
  onBehalfOf_in: [Bytes!]
  onBehalfOf_not_in: [Bytes!]
  onBehalfOf_contains: Bytes
  onBehalfOf_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  referral: BigInt
  referral_not: BigInt
  referral_gt: BigInt
  referral_lt: BigInt
  referral_gte: BigInt
  referral_lte: BigInt
  referral_in: [BigInt!]
  referral_not_in: [BigInt!]
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  collateralAfter: BigDecimal
  collateralAfter_not: BigDecimal
  collateralAfter_gt: BigDecimal
  collateralAfter_lt: BigDecimal
  collateralAfter_gte: BigDecimal
  collateralAfter_lte: BigDecimal
  collateralAfter_in: [BigDecimal!]
  collateralAfter_not_in: [BigDecimal!]
  collateralDelta: BigDecimal
  collateralDelta_not: BigDecimal
  collateralDelta_gt: BigDecimal
  collateralDelta_lt: BigDecimal
  collateralDelta_gte: BigDecimal
  collateralDelta_lte: BigDecimal
  collateralDelta_in: [BigDecimal!]
  collateralDelta_not_in: [BigDecimal!]
  tokenPriceUSD: BigDecimal
  tokenPriceUSD_not: BigDecimal
  tokenPriceUSD_gt: BigDecimal
  tokenPriceUSD_lt: BigDecimal
  tokenPriceUSD_gte: BigDecimal
  tokenPriceUSD_lte: BigDecimal
  tokenPriceUSD_in: [BigDecimal!]
  tokenPriceUSD_not_in: [BigDecimal!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AaveLikeDeposit_filter]
  or: [AaveLikeDeposit_filter]
}

enum AaveLikeDeposit_orderBy {
  id
  reserve
  user
  onBehalfOf
  amount
  referral
  version
  protocol
  collateralAfter
  collateralDelta
  tokenPriceUSD
  token
  token__id
  token__address
  token__symbol
  token__decimals
  token__precision
  txHash
  blockNumber
  timestamp
}

type AaveLikeLiquidation {
  id: ID!
  collateralAsset: Bytes!
  debtAsset: Bytes!
  user: Bytes!
  debtToCover: BigInt!
  liquidatedCollateralAmount: BigInt!
  liquidator: Bytes!
  receiveAToken: Boolean!
  version: String
  protocol: String!
  collateralAfter: BigDecimal
  stableDebtAfter: BigDecimal
  variableDebtAfter: BigDecimal
  debtTokenPriceUSD: BigDecimal
  collateralTokenPriceUSD: BigDecimal
  debtDelta: BigDecimal!
  collateralDelta: BigDecimal!
  debtToken: Token!
  collateralToken: Token!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input AaveLikeLiquidation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  collateralAsset: Bytes
  collateralAsset_not: Bytes
  collateralAsset_gt: Bytes
  collateralAsset_lt: Bytes
  collateralAsset_gte: Bytes
  collateralAsset_lte: Bytes
  collateralAsset_in: [Bytes!]
  collateralAsset_not_in: [Bytes!]
  collateralAsset_contains: Bytes
  collateralAsset_not_contains: Bytes
  debtAsset: Bytes
  debtAsset_not: Bytes
  debtAsset_gt: Bytes
  debtAsset_lt: Bytes
  debtAsset_gte: Bytes
  debtAsset_lte: Bytes
  debtAsset_in: [Bytes!]
  debtAsset_not_in: [Bytes!]
  debtAsset_contains: Bytes
  debtAsset_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  debtToCover: BigInt
  debtToCover_not: BigInt
  debtToCover_gt: BigInt
  debtToCover_lt: BigInt
  debtToCover_gte: BigInt
  debtToCover_lte: BigInt
  debtToCover_in: [BigInt!]
  debtToCover_not_in: [BigInt!]
  liquidatedCollateralAmount: BigInt
  liquidatedCollateralAmount_not: BigInt
  liquidatedCollateralAmount_gt: BigInt
  liquidatedCollateralAmount_lt: BigInt
  liquidatedCollateralAmount_gte: BigInt
  liquidatedCollateralAmount_lte: BigInt
  liquidatedCollateralAmount_in: [BigInt!]
  liquidatedCollateralAmount_not_in: [BigInt!]
  liquidator: Bytes
  liquidator_not: Bytes
  liquidator_gt: Bytes
  liquidator_lt: Bytes
  liquidator_gte: Bytes
  liquidator_lte: Bytes
  liquidator_in: [Bytes!]
  liquidator_not_in: [Bytes!]
  liquidator_contains: Bytes
  liquidator_not_contains: Bytes
  receiveAToken: Boolean
  receiveAToken_not: Boolean
  receiveAToken_in: [Boolean!]
  receiveAToken_not_in: [Boolean!]
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  collateralAfter: BigDecimal
  collateralAfter_not: BigDecimal
  collateralAfter_gt: BigDecimal
  collateralAfter_lt: BigDecimal
  collateralAfter_gte: BigDecimal
  collateralAfter_lte: BigDecimal
  collateralAfter_in: [BigDecimal!]
  collateralAfter_not_in: [BigDecimal!]
  stableDebtAfter: BigDecimal
  stableDebtAfter_not: BigDecimal
  stableDebtAfter_gt: BigDecimal
  stableDebtAfter_lt: BigDecimal
  stableDebtAfter_gte: BigDecimal
  stableDebtAfter_lte: BigDecimal
  stableDebtAfter_in: [BigDecimal!]
  stableDebtAfter_not_in: [BigDecimal!]
  variableDebtAfter: BigDecimal
  variableDebtAfter_not: BigDecimal
  variableDebtAfter_gt: BigDecimal
  variableDebtAfter_lt: BigDecimal
  variableDebtAfter_gte: BigDecimal
  variableDebtAfter_lte: BigDecimal
  variableDebtAfter_in: [BigDecimal!]
  variableDebtAfter_not_in: [BigDecimal!]
  debtTokenPriceUSD: BigDecimal
  debtTokenPriceUSD_not: BigDecimal
  debtTokenPriceUSD_gt: BigDecimal
  debtTokenPriceUSD_lt: BigDecimal
  debtTokenPriceUSD_gte: BigDecimal
  debtTokenPriceUSD_lte: BigDecimal
  debtTokenPriceUSD_in: [BigDecimal!]
  debtTokenPriceUSD_not_in: [BigDecimal!]
  collateralTokenPriceUSD: BigDecimal
  collateralTokenPriceUSD_not: BigDecimal
  collateralTokenPriceUSD_gt: BigDecimal
  collateralTokenPriceUSD_lt: BigDecimal
  collateralTokenPriceUSD_gte: BigDecimal
  collateralTokenPriceUSD_lte: BigDecimal
  collateralTokenPriceUSD_in: [BigDecimal!]
  collateralTokenPriceUSD_not_in: [BigDecimal!]
  debtDelta: BigDecimal
  debtDelta_not: BigDecimal
  debtDelta_gt: BigDecimal
  debtDelta_lt: BigDecimal
  debtDelta_gte: BigDecimal
  debtDelta_lte: BigDecimal
  debtDelta_in: [BigDecimal!]
  debtDelta_not_in: [BigDecimal!]
  collateralDelta: BigDecimal
  collateralDelta_not: BigDecimal
  collateralDelta_gt: BigDecimal
  collateralDelta_lt: BigDecimal
  collateralDelta_gte: BigDecimal
  collateralDelta_lte: BigDecimal
  collateralDelta_in: [BigDecimal!]
  collateralDelta_not_in: [BigDecimal!]
  debtToken: String
  debtToken_not: String
  debtToken_gt: String
  debtToken_lt: String
  debtToken_gte: String
  debtToken_lte: String
  debtToken_in: [String!]
  debtToken_not_in: [String!]
  debtToken_contains: String
  debtToken_contains_nocase: String
  debtToken_not_contains: String
  debtToken_not_contains_nocase: String
  debtToken_starts_with: String
  debtToken_starts_with_nocase: String
  debtToken_not_starts_with: String
  debtToken_not_starts_with_nocase: String
  debtToken_ends_with: String
  debtToken_ends_with_nocase: String
  debtToken_not_ends_with: String
  debtToken_not_ends_with_nocase: String
  debtToken_: Token_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Token_filter
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AaveLikeLiquidation_filter]
  or: [AaveLikeLiquidation_filter]
}

enum AaveLikeLiquidation_orderBy {
  id
  collateralAsset
  debtAsset
  user
  debtToCover
  liquidatedCollateralAmount
  liquidator
  receiveAToken
  version
  protocol
  collateralAfter
  stableDebtAfter
  variableDebtAfter
  debtTokenPriceUSD
  collateralTokenPriceUSD
  debtDelta
  collateralDelta
  debtToken
  debtToken__id
  debtToken__address
  debtToken__symbol
  debtToken__decimals
  debtToken__precision
  collateralToken
  collateralToken__id
  collateralToken__address
  collateralToken__symbol
  collateralToken__decimals
  collateralToken__precision
  txHash
  blockNumber
  timestamp
}

type AaveLikeRepay {
  id: ID!
  reserve: Bytes!
  user: Bytes!
  repayer: Bytes!
  amount: BigInt!
  version: String
  protocol: String!
  variableDebtAfter: BigDecimal
  stableDebtAfter: BigDecimal
  debtDelta: BigDecimal
  tokenPriceUSD: BigDecimal
  token: Token
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input AaveLikeRepay_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  reserve: Bytes
  reserve_not: Bytes
  reserve_gt: Bytes
  reserve_lt: Bytes
  reserve_gte: Bytes
  reserve_lte: Bytes
  reserve_in: [Bytes!]
  reserve_not_in: [Bytes!]
  reserve_contains: Bytes
  reserve_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  repayer: Bytes
  repayer_not: Bytes
  repayer_gt: Bytes
  repayer_lt: Bytes
  repayer_gte: Bytes
  repayer_lte: Bytes
  repayer_in: [Bytes!]
  repayer_not_in: [Bytes!]
  repayer_contains: Bytes
  repayer_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  variableDebtAfter: BigDecimal
  variableDebtAfter_not: BigDecimal
  variableDebtAfter_gt: BigDecimal
  variableDebtAfter_lt: BigDecimal
  variableDebtAfter_gte: BigDecimal
  variableDebtAfter_lte: BigDecimal
  variableDebtAfter_in: [BigDecimal!]
  variableDebtAfter_not_in: [BigDecimal!]
  stableDebtAfter: BigDecimal
  stableDebtAfter_not: BigDecimal
  stableDebtAfter_gt: BigDecimal
  stableDebtAfter_lt: BigDecimal
  stableDebtAfter_gte: BigDecimal
  stableDebtAfter_lte: BigDecimal
  stableDebtAfter_in: [BigDecimal!]
  stableDebtAfter_not_in: [BigDecimal!]
  debtDelta: BigDecimal
  debtDelta_not: BigDecimal
  debtDelta_gt: BigDecimal
  debtDelta_lt: BigDecimal
  debtDelta_gte: BigDecimal
  debtDelta_lte: BigDecimal
  debtDelta_in: [BigDecimal!]
  debtDelta_not_in: [BigDecimal!]
  tokenPriceUSD: BigDecimal
  tokenPriceUSD_not: BigDecimal
  tokenPriceUSD_gt: BigDecimal
  tokenPriceUSD_lt: BigDecimal
  tokenPriceUSD_gte: BigDecimal
  tokenPriceUSD_lte: BigDecimal
  tokenPriceUSD_in: [BigDecimal!]
  tokenPriceUSD_not_in: [BigDecimal!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AaveLikeRepay_filter]
  or: [AaveLikeRepay_filter]
}

enum AaveLikeRepay_orderBy {
  id
  reserve
  user
  repayer
  amount
  version
  protocol
  variableDebtAfter
  stableDebtAfter
  debtDelta
  tokenPriceUSD
  token
  token__id
  token__address
  token__symbol
  token__decimals
  token__precision
  txHash
  blockNumber
  timestamp
}

type AaveLikeWithdraw {
  id: ID!
  reserve: Bytes!
  user: Bytes!
  to: Bytes!
  amount: BigInt!
  version: String
  protocol: String!
  collateralAfter: BigDecimal
  collateralDelta: BigDecimal
  tokenPriceUSD: BigDecimal
  token: Token
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input AaveLikeWithdraw_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  reserve: Bytes
  reserve_not: Bytes
  reserve_gt: Bytes
  reserve_lt: Bytes
  reserve_gte: Bytes
  reserve_lte: Bytes
  reserve_in: [Bytes!]
  reserve_not_in: [Bytes!]
  reserve_contains: Bytes
  reserve_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  collateralAfter: BigDecimal
  collateralAfter_not: BigDecimal
  collateralAfter_gt: BigDecimal
  collateralAfter_lt: BigDecimal
  collateralAfter_gte: BigDecimal
  collateralAfter_lte: BigDecimal
  collateralAfter_in: [BigDecimal!]
  collateralAfter_not_in: [BigDecimal!]
  collateralDelta: BigDecimal
  collateralDelta_not: BigDecimal
  collateralDelta_gt: BigDecimal
  collateralDelta_lt: BigDecimal
  collateralDelta_gte: BigDecimal
  collateralDelta_lte: BigDecimal
  collateralDelta_in: [BigDecimal!]
  collateralDelta_not_in: [BigDecimal!]
  tokenPriceUSD: BigDecimal
  tokenPriceUSD_not: BigDecimal
  tokenPriceUSD_gt: BigDecimal
  tokenPriceUSD_lt: BigDecimal
  tokenPriceUSD_gte: BigDecimal
  tokenPriceUSD_lte: BigDecimal
  tokenPriceUSD_in: [BigDecimal!]
  tokenPriceUSD_not_in: [BigDecimal!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AaveLikeWithdraw_filter]
  or: [AaveLikeWithdraw_filter]
}

enum AaveLikeWithdraw_orderBy {
  id
  reserve
  user
  to
  amount
  version
  protocol
  collateralAfter
  collateralDelta
  tokenPriceUSD
  token
  token__id
  token__address
  token__symbol
  token__decimals
  token__precision
  txHash
  blockNumber
  timestamp
}

type AssetSwap {
  """
  id is a tx_hash-actionLogIndex
  it uses action log index to easily combine all swap events into one
  
  """
  id: ID!
  assetIn: Bytes!
  assetOut: Bytes!
  amountIn: BigInt!
  amountOut: BigInt!
  proxy: Bytes
}

input AssetSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  assetIn: Bytes
  assetIn_not: Bytes
  assetIn_gt: Bytes
  assetIn_lt: Bytes
  assetIn_gte: Bytes
  assetIn_lte: Bytes
  assetIn_in: [Bytes!]
  assetIn_not_in: [Bytes!]
  assetIn_contains: Bytes
  assetIn_not_contains: Bytes
  assetOut: Bytes
  assetOut_not: Bytes
  assetOut_gt: Bytes
  assetOut_lt: Bytes
  assetOut_gte: Bytes
  assetOut_lte: Bytes
  assetOut_in: [Bytes!]
  assetOut_not_in: [Bytes!]
  assetOut_contains: Bytes
  assetOut_not_contains: Bytes
  amountIn: BigInt
  amountIn_not: BigInt
  amountIn_gt: BigInt
  amountIn_lt: BigInt
  amountIn_gte: BigInt
  amountIn_lte: BigInt
  amountIn_in: [BigInt!]
  amountIn_not_in: [BigInt!]
  amountOut: BigInt
  amountOut_not: BigInt
  amountOut_gt: BigInt
  amountOut_lt: BigInt
  amountOut_gte: BigInt
  amountOut_lte: BigInt
  amountOut_in: [BigInt!]
  amountOut_not_in: [BigInt!]
  proxy: Bytes
  proxy_not: Bytes
  proxy_gt: Bytes
  proxy_lt: Bytes
  proxy_gte: Bytes
  proxy_lte: Bytes
  proxy_in: [Bytes!]
  proxy_not_in: [Bytes!]
  proxy_contains: Bytes
  proxy_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AssetSwap_filter]
  or: [AssetSwap_filter]
}

enum AssetSwap_orderBy {
  id
  assetIn
  assetOut
  amountIn
  amountOut
  proxy
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

scalar Bytes

type FeePaid {
  """
  id is a tx_hash-actionLogIndex
  it uses action log index to easily combine all swap events into one
  
  """
  id: ID!
  beneficiary: Bytes!
  amount: BigInt!
  token: Bytes!
}

input FeePaid_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  beneficiary: Bytes
  beneficiary_not: Bytes
  beneficiary_gt: Bytes
  beneficiary_lt: Bytes
  beneficiary_gte: Bytes
  beneficiary_lte: Bytes
  beneficiary_in: [Bytes!]
  beneficiary_not_in: [Bytes!]
  beneficiary_contains: Bytes
  beneficiary_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeePaid_filter]
  or: [FeePaid_filter]
}

enum FeePaid_orderBy {
  id
  beneficiary
  amount
  token
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Position {
  id: ID!
  account: Bytes!
  collateralAddress: Bytes!
  debtAddress: Bytes!
  protocol: String!
  type: String!
  fromEvent: Boolean!
  cumulativeDeposit: BigDecimal
  cumulativeWithdraw: BigDecimal
  cumulativeFees: BigDecimal
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositInQuoteToken: BigDecimal
  cumulativeDepositInCollateralToken: BigDecimal
  cumulativeWithdrawUSD: BigDecimal
  cumulativeWithdrawInQuoteToken: BigDecimal
  cumulativeWithdrawInCollateralToken: BigDecimal
  cumulativeFeesUSD: BigDecimal
  cumulativeFeesInQuoteToken: BigDecimal
  cumulativeFeesInCollateralToken: BigDecimal
  debt: BigDecimal!
  collateral: BigDecimal!
  lastEvent: PositionEvent
  events(skip: Int = 0, first: Int = 100, orderBy: PositionEvent_orderBy, orderDirection: OrderDirection, where: PositionEvent_filter): [PositionEvent!]!
  proxy: Proxy!
}

input Position_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  collateralAddress: Bytes
  collateralAddress_not: Bytes
  collateralAddress_gt: Bytes
  collateralAddress_lt: Bytes
  collateralAddress_gte: Bytes
  collateralAddress_lte: Bytes
  collateralAddress_in: [Bytes!]
  collateralAddress_not_in: [Bytes!]
  collateralAddress_contains: Bytes
  collateralAddress_not_contains: Bytes
  debtAddress: Bytes
  debtAddress_not: Bytes
  debtAddress_gt: Bytes
  debtAddress_lt: Bytes
  debtAddress_gte: Bytes
  debtAddress_lte: Bytes
  debtAddress_in: [Bytes!]
  debtAddress_not_in: [Bytes!]
  debtAddress_contains: Bytes
  debtAddress_not_contains: Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  fromEvent: Boolean
  fromEvent_not: Boolean
  fromEvent_in: [Boolean!]
  fromEvent_not_in: [Boolean!]
  cumulativeDeposit: BigDecimal
  cumulativeDeposit_not: BigDecimal
  cumulativeDeposit_gt: BigDecimal
  cumulativeDeposit_lt: BigDecimal
  cumulativeDeposit_gte: BigDecimal
  cumulativeDeposit_lte: BigDecimal
  cumulativeDeposit_in: [BigDecimal!]
  cumulativeDeposit_not_in: [BigDecimal!]
  cumulativeWithdraw: BigDecimal
  cumulativeWithdraw_not: BigDecimal
  cumulativeWithdraw_gt: BigDecimal
  cumulativeWithdraw_lt: BigDecimal
  cumulativeWithdraw_gte: BigDecimal
  cumulativeWithdraw_lte: BigDecimal
  cumulativeWithdraw_in: [BigDecimal!]
  cumulativeWithdraw_not_in: [BigDecimal!]
  cumulativeFees: BigDecimal
  cumulativeFees_not: BigDecimal
  cumulativeFees_gt: BigDecimal
  cumulativeFees_lt: BigDecimal
  cumulativeFees_gte: BigDecimal
  cumulativeFees_lte: BigDecimal
  cumulativeFees_in: [BigDecimal!]
  cumulativeFees_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  cumulativeDepositInQuoteToken: BigDecimal
  cumulativeDepositInQuoteToken_not: BigDecimal
  cumulativeDepositInQuoteToken_gt: BigDecimal
  cumulativeDepositInQuoteToken_lt: BigDecimal
  cumulativeDepositInQuoteToken_gte: BigDecimal
  cumulativeDepositInQuoteToken_lte: BigDecimal
  cumulativeDepositInQuoteToken_in: [BigDecimal!]
  cumulativeDepositInQuoteToken_not_in: [BigDecimal!]
  cumulativeDepositInCollateralToken: BigDecimal
  cumulativeDepositInCollateralToken_not: BigDecimal
  cumulativeDepositInCollateralToken_gt: BigDecimal
  cumulativeDepositInCollateralToken_lt: BigDecimal
  cumulativeDepositInCollateralToken_gte: BigDecimal
  cumulativeDepositInCollateralToken_lte: BigDecimal
  cumulativeDepositInCollateralToken_in: [BigDecimal!]
  cumulativeDepositInCollateralToken_not_in: [BigDecimal!]
  cumulativeWithdrawUSD: BigDecimal
  cumulativeWithdrawUSD_not: BigDecimal
  cumulativeWithdrawUSD_gt: BigDecimal
  cumulativeWithdrawUSD_lt: BigDecimal
  cumulativeWithdrawUSD_gte: BigDecimal
  cumulativeWithdrawUSD_lte: BigDecimal
  cumulativeWithdrawUSD_in: [BigDecimal!]
  cumulativeWithdrawUSD_not_in: [BigDecimal!]
  cumulativeWithdrawInQuoteToken: BigDecimal
  cumulativeWithdrawInQuoteToken_not: BigDecimal
  cumulativeWithdrawInQuoteToken_gt: BigDecimal
  cumulativeWithdrawInQuoteToken_lt: BigDecimal
  cumulativeWithdrawInQuoteToken_gte: BigDecimal
  cumulativeWithdrawInQuoteToken_lte: BigDecimal
  cumulativeWithdrawInQuoteToken_in: [BigDecimal!]
  cumulativeWithdrawInQuoteToken_not_in: [BigDecimal!]
  cumulativeWithdrawInCollateralToken: BigDecimal
  cumulativeWithdrawInCollateralToken_not: BigDecimal
  cumulativeWithdrawInCollateralToken_gt: BigDecimal
  cumulativeWithdrawInCollateralToken_lt: BigDecimal
  cumulativeWithdrawInCollateralToken_gte: BigDecimal
  cumulativeWithdrawInCollateralToken_lte: BigDecimal
  cumulativeWithdrawInCollateralToken_in: [BigDecimal!]
  cumulativeWithdrawInCollateralToken_not_in: [BigDecimal!]
  cumulativeFeesUSD: BigDecimal
  cumulativeFeesUSD_not: BigDecimal
  cumulativeFeesUSD_gt: BigDecimal
  cumulativeFeesUSD_lt: BigDecimal
  cumulativeFeesUSD_gte: BigDecimal
  cumulativeFeesUSD_lte: BigDecimal
  cumulativeFeesUSD_in: [BigDecimal!]
  cumulativeFeesUSD_not_in: [BigDecimal!]
  cumulativeFeesInQuoteToken: BigDecimal
  cumulativeFeesInQuoteToken_not: BigDecimal
  cumulativeFeesInQuoteToken_gt: BigDecimal
  cumulativeFeesInQuoteToken_lt: BigDecimal
  cumulativeFeesInQuoteToken_gte: BigDecimal
  cumulativeFeesInQuoteToken_lte: BigDecimal
  cumulativeFeesInQuoteToken_in: [BigDecimal!]
  cumulativeFeesInQuoteToken_not_in: [BigDecimal!]
  cumulativeFeesInCollateralToken: BigDecimal
  cumulativeFeesInCollateralToken_not: BigDecimal
  cumulativeFeesInCollateralToken_gt: BigDecimal
  cumulativeFeesInCollateralToken_lt: BigDecimal
  cumulativeFeesInCollateralToken_gte: BigDecimal
  cumulativeFeesInCollateralToken_lte: BigDecimal
  cumulativeFeesInCollateralToken_in: [BigDecimal!]
  cumulativeFeesInCollateralToken_not_in: [BigDecimal!]
  debt: BigDecimal
  debt_not: BigDecimal
  debt_gt: BigDecimal
  debt_lt: BigDecimal
  debt_gte: BigDecimal
  debt_lte: BigDecimal
  debt_in: [BigDecimal!]
  debt_not_in: [BigDecimal!]
  collateral: BigDecimal
  collateral_not: BigDecimal
  collateral_gt: BigDecimal
  collateral_lt: BigDecimal
  collateral_gte: BigDecimal
  collateral_lte: BigDecimal
  collateral_in: [BigDecimal!]
  collateral_not_in: [BigDecimal!]
  lastEvent: String
  lastEvent_not: String
  lastEvent_gt: String
  lastEvent_lt: String
  lastEvent_gte: String
  lastEvent_lte: String
  lastEvent_in: [String!]
  lastEvent_not_in: [String!]
  lastEvent_contains: String
  lastEvent_contains_nocase: String
  lastEvent_not_contains: String
  lastEvent_not_contains_nocase: String
  lastEvent_starts_with: String
  lastEvent_starts_with_nocase: String
  lastEvent_not_starts_with: String
  lastEvent_not_starts_with_nocase: String
  lastEvent_ends_with: String
  lastEvent_ends_with_nocase: String
  lastEvent_not_ends_with: String
  lastEvent_not_ends_with_nocase: String
  lastEvent_: PositionEvent_filter
  events_: PositionEvent_filter
  proxy_: Proxy_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Position_filter]
  or: [Position_filter]
}

enum Position_orderBy {
  id
  account
  collateralAddress
  debtAddress
  protocol
  type
  fromEvent
  cumulativeDeposit
  cumulativeWithdraw
  cumulativeFees
  cumulativeDepositUSD
  cumulativeDepositInQuoteToken
  cumulativeDepositInCollateralToken
  cumulativeWithdrawUSD
  cumulativeWithdrawInQuoteToken
  cumulativeWithdrawInCollateralToken
  cumulativeFeesUSD
  cumulativeFeesInQuoteToken
  cumulativeFeesInCollateralToken
  debt
  collateral
  lastEvent
  lastEvent__id
  lastEvent__kind
  lastEvent__account
  lastEvent__isAutomation
  lastEvent__debtAddress
  lastEvent__debtBefore
  lastEvent__debtAfter
  lastEvent__debtDelta
  lastEvent__debtTokenPriceUSD
  lastEvent__collateralAddress
  lastEvent__collateralBefore
  lastEvent__collateralAfter
  lastEvent__collateralDelta
  lastEvent__collateralTokenPriceUSD
  lastEvent__debtOraclePrice
  lastEvent__collateralOraclePrice
  lastEvent__swapFromToken
  lastEvent__swapToToken
  lastEvent__swapFromAmount
  lastEvent__swapToAmount
  lastEvent__marketPrice
  lastEvent__depositedUSD
  lastEvent__withdrawnUSD
  lastEvent__oasisFeeToken
  lastEvent__oasisFee
  lastEvent__oasisFeeUSD
  lastEvent__summerFeeToken
  lastEvent__summerFee
  lastEvent__summerFeeUSD
  lastEvent__gasUsed
  lastEvent__gasPrice
  lastEvent__gasFeeUSD
  lastEvent__totalFee
  lastEvent__multipleBefore
  lastEvent__multipleAfter
  lastEvent__netValueBefore
  lastEvent__netValueAfter
  lastEvent__healthFactorAfter
  lastEvent__liquidationThreshold
  lastEvent__ltvBefore
  lastEvent__ltvAfter
  lastEvent__liquidationPriceBefore
  lastEvent__liquidationPriceAfter
  lastEvent__ethPrice
  lastEvent__timestamp
  lastEvent__blockNumber
  lastEvent__txHash
  events
  proxy
  proxy__id
  proxy__vaultId
  proxy__isDPM
  proxy__owner
}

type PositionEvent {
  id: ID!
  kind: String!
  account: Bytes!
  position: Position
  isAutomation: Boolean
  trigger: Trigger
  debtToken: Token
  debtAddress: Bytes!
  debtBefore: BigDecimal!
  debtAfter: BigDecimal!
  debtDelta: BigDecimal!
  debtTokenPriceUSD: BigDecimal!
  collateralToken: Token
  collateralAddress: Bytes!
  collateralBefore: BigDecimal!
  collateralAfter: BigDecimal!
  collateralDelta: BigDecimal!
  collateralTokenPriceUSD: BigDecimal!
  debtOraclePrice: BigDecimal!
  collateralOraclePrice: BigDecimal!

  """
  First iteration assumes just one
  swap in an operation
  
  """
  swapFromToken: Bytes
  swapToToken: Bytes
  swapFromAmount: BigDecimal
  swapToAmount: BigDecimal
  marketPrice: BigDecimal
  depositTransfers(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]!
  depositedUSD: BigDecimal
  withdrawTransfers(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]!
  withdrawnUSD: BigDecimal

  """
  Depricated fields prefixed with oasis
  
  """
  oasisFeeToken: Bytes
  oasisFee: BigDecimal!
  oasisFeeUSD: BigDecimal!
  summerFeeToken: Bytes
  summerFee: BigDecimal!
  summerFeeUSD: BigDecimal!
  gasUsed: BigInt!
  gasPrice: BigInt!
  gasFeeUSD: BigDecimal!
  totalFee: BigDecimal!
  multipleBefore: BigDecimal
  multipleAfter: BigDecimal
  netValueBefore: BigDecimal
  netValueAfter: BigDecimal
  healthFactorAfter: BigDecimal!
  liquidationThreshold: BigDecimal!
  ltvBefore: BigDecimal
  ltvAfter: BigDecimal!
  liquidationPriceBefore: BigDecimal
  liquidationPriceAfter: BigDecimal
  ethPrice: BigDecimal!
  timestamp: BigInt!
  blockNumber: BigInt!
  txHash: Bytes!
  proxy: Proxy!
}

input PositionEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  kind: String
  kind_not: String
  kind_gt: String
  kind_lt: String
  kind_gte: String
  kind_lte: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_contains: String
  kind_contains_nocase: String
  kind_not_contains: String
  kind_not_contains_nocase: String
  kind_starts_with: String
  kind_starts_with_nocase: String
  kind_not_starts_with: String
  kind_not_starts_with_nocase: String
  kind_ends_with: String
  kind_ends_with_nocase: String
  kind_not_ends_with: String
  kind_not_ends_with_nocase: String
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  isAutomation: Boolean
  isAutomation_not: Boolean
  isAutomation_in: [Boolean!]
  isAutomation_not_in: [Boolean!]
  trigger: String
  trigger_not: String
  trigger_gt: String
  trigger_lt: String
  trigger_gte: String
  trigger_lte: String
  trigger_in: [String!]
  trigger_not_in: [String!]
  trigger_contains: String
  trigger_contains_nocase: String
  trigger_not_contains: String
  trigger_not_contains_nocase: String
  trigger_starts_with: String
  trigger_starts_with_nocase: String
  trigger_not_starts_with: String
  trigger_not_starts_with_nocase: String
  trigger_ends_with: String
  trigger_ends_with_nocase: String
  trigger_not_ends_with: String
  trigger_not_ends_with_nocase: String
  trigger_: Trigger_filter
  debtToken: String
  debtToken_not: String
  debtToken_gt: String
  debtToken_lt: String
  debtToken_gte: String
  debtToken_lte: String
  debtToken_in: [String!]
  debtToken_not_in: [String!]
  debtToken_contains: String
  debtToken_contains_nocase: String
  debtToken_not_contains: String
  debtToken_not_contains_nocase: String
  debtToken_starts_with: String
  debtToken_starts_with_nocase: String
  debtToken_not_starts_with: String
  debtToken_not_starts_with_nocase: String
  debtToken_ends_with: String
  debtToken_ends_with_nocase: String
  debtToken_not_ends_with: String
  debtToken_not_ends_with_nocase: String
  debtToken_: Token_filter
  debtAddress: Bytes
  debtAddress_not: Bytes
  debtAddress_gt: Bytes
  debtAddress_lt: Bytes
  debtAddress_gte: Bytes
  debtAddress_lte: Bytes
  debtAddress_in: [Bytes!]
  debtAddress_not_in: [Bytes!]
  debtAddress_contains: Bytes
  debtAddress_not_contains: Bytes
  debtBefore: BigDecimal
  debtBefore_not: BigDecimal
  debtBefore_gt: BigDecimal
  debtBefore_lt: BigDecimal
  debtBefore_gte: BigDecimal
  debtBefore_lte: BigDecimal
  debtBefore_in: [BigDecimal!]
  debtBefore_not_in: [BigDecimal!]
  debtAfter: BigDecimal
  debtAfter_not: BigDecimal
  debtAfter_gt: BigDecimal
  debtAfter_lt: BigDecimal
  debtAfter_gte: BigDecimal
  debtAfter_lte: BigDecimal
  debtAfter_in: [BigDecimal!]
  debtAfter_not_in: [BigDecimal!]
  debtDelta: BigDecimal
  debtDelta_not: BigDecimal
  debtDelta_gt: BigDecimal
  debtDelta_lt: BigDecimal
  debtDelta_gte: BigDecimal
  debtDelta_lte: BigDecimal
  debtDelta_in: [BigDecimal!]
  debtDelta_not_in: [BigDecimal!]
  debtTokenPriceUSD: BigDecimal
  debtTokenPriceUSD_not: BigDecimal
  debtTokenPriceUSD_gt: BigDecimal
  debtTokenPriceUSD_lt: BigDecimal
  debtTokenPriceUSD_gte: BigDecimal
  debtTokenPriceUSD_lte: BigDecimal
  debtTokenPriceUSD_in: [BigDecimal!]
  debtTokenPriceUSD_not_in: [BigDecimal!]
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Token_filter
  collateralAddress: Bytes
  collateralAddress_not: Bytes
  collateralAddress_gt: Bytes
  collateralAddress_lt: Bytes
  collateralAddress_gte: Bytes
  collateralAddress_lte: Bytes
  collateralAddress_in: [Bytes!]
  collateralAddress_not_in: [Bytes!]
  collateralAddress_contains: Bytes
  collateralAddress_not_contains: Bytes
  collateralBefore: BigDecimal
  collateralBefore_not: BigDecimal
  collateralBefore_gt: BigDecimal
  collateralBefore_lt: BigDecimal
  collateralBefore_gte: BigDecimal
  collateralBefore_lte: BigDecimal
  collateralBefore_in: [BigDecimal!]
  collateralBefore_not_in: [BigDecimal!]
  collateralAfter: BigDecimal
  collateralAfter_not: BigDecimal
  collateralAfter_gt: BigDecimal
  collateralAfter_lt: BigDecimal
  collateralAfter_gte: BigDecimal
  collateralAfter_lte: BigDecimal
  collateralAfter_in: [BigDecimal!]
  collateralAfter_not_in: [BigDecimal!]
  collateralDelta: BigDecimal
  collateralDelta_not: BigDecimal
  collateralDelta_gt: BigDecimal
  collateralDelta_lt: BigDecimal
  collateralDelta_gte: BigDecimal
  collateralDelta_lte: BigDecimal
  collateralDelta_in: [BigDecimal!]
  collateralDelta_not_in: [BigDecimal!]
  collateralTokenPriceUSD: BigDecimal
  collateralTokenPriceUSD_not: BigDecimal
  collateralTokenPriceUSD_gt: BigDecimal
  collateralTokenPriceUSD_lt: BigDecimal
  collateralTokenPriceUSD_gte: BigDecimal
  collateralTokenPriceUSD_lte: BigDecimal
  collateralTokenPriceUSD_in: [BigDecimal!]
  collateralTokenPriceUSD_not_in: [BigDecimal!]
  debtOraclePrice: BigDecimal
  debtOraclePrice_not: BigDecimal
  debtOraclePrice_gt: BigDecimal
  debtOraclePrice_lt: BigDecimal
  debtOraclePrice_gte: BigDecimal
  debtOraclePrice_lte: BigDecimal
  debtOraclePrice_in: [BigDecimal!]
  debtOraclePrice_not_in: [BigDecimal!]
  collateralOraclePrice: BigDecimal
  collateralOraclePrice_not: BigDecimal
  collateralOraclePrice_gt: BigDecimal
  collateralOraclePrice_lt: BigDecimal
  collateralOraclePrice_gte: BigDecimal
  collateralOraclePrice_lte: BigDecimal
  collateralOraclePrice_in: [BigDecimal!]
  collateralOraclePrice_not_in: [BigDecimal!]
  swapFromToken: Bytes
  swapFromToken_not: Bytes
  swapFromToken_gt: Bytes
  swapFromToken_lt: Bytes
  swapFromToken_gte: Bytes
  swapFromToken_lte: Bytes
  swapFromToken_in: [Bytes!]
  swapFromToken_not_in: [Bytes!]
  swapFromToken_contains: Bytes
  swapFromToken_not_contains: Bytes
  swapToToken: Bytes
  swapToToken_not: Bytes
  swapToToken_gt: Bytes
  swapToToken_lt: Bytes
  swapToToken_gte: Bytes
  swapToToken_lte: Bytes
  swapToToken_in: [Bytes!]
  swapToToken_not_in: [Bytes!]
  swapToToken_contains: Bytes
  swapToToken_not_contains: Bytes
  swapFromAmount: BigDecimal
  swapFromAmount_not: BigDecimal
  swapFromAmount_gt: BigDecimal
  swapFromAmount_lt: BigDecimal
  swapFromAmount_gte: BigDecimal
  swapFromAmount_lte: BigDecimal
  swapFromAmount_in: [BigDecimal!]
  swapFromAmount_not_in: [BigDecimal!]
  swapToAmount: BigDecimal
  swapToAmount_not: BigDecimal
  swapToAmount_gt: BigDecimal
  swapToAmount_lt: BigDecimal
  swapToAmount_gte: BigDecimal
  swapToAmount_lte: BigDecimal
  swapToAmount_in: [BigDecimal!]
  swapToAmount_not_in: [BigDecimal!]
  marketPrice: BigDecimal
  marketPrice_not: BigDecimal
  marketPrice_gt: BigDecimal
  marketPrice_lt: BigDecimal
  marketPrice_gte: BigDecimal
  marketPrice_lte: BigDecimal
  marketPrice_in: [BigDecimal!]
  marketPrice_not_in: [BigDecimal!]
  depositTransfers: [String!]
  depositTransfers_not: [String!]
  depositTransfers_contains: [String!]
  depositTransfers_contains_nocase: [String!]
  depositTransfers_not_contains: [String!]
  depositTransfers_not_contains_nocase: [String!]
  depositTransfers_: Transfer_filter
  depositedUSD: BigDecimal
  depositedUSD_not: BigDecimal
  depositedUSD_gt: BigDecimal
  depositedUSD_lt: BigDecimal
  depositedUSD_gte: BigDecimal
  depositedUSD_lte: BigDecimal
  depositedUSD_in: [BigDecimal!]
  depositedUSD_not_in: [BigDecimal!]
  withdrawTransfers: [String!]
  withdrawTransfers_not: [String!]
  withdrawTransfers_contains: [String!]
  withdrawTransfers_contains_nocase: [String!]
  withdrawTransfers_not_contains: [String!]
  withdrawTransfers_not_contains_nocase: [String!]
  withdrawTransfers_: Transfer_filter
  withdrawnUSD: BigDecimal
  withdrawnUSD_not: BigDecimal
  withdrawnUSD_gt: BigDecimal
  withdrawnUSD_lt: BigDecimal
  withdrawnUSD_gte: BigDecimal
  withdrawnUSD_lte: BigDecimal
  withdrawnUSD_in: [BigDecimal!]
  withdrawnUSD_not_in: [BigDecimal!]
  oasisFeeToken: Bytes
  oasisFeeToken_not: Bytes
  oasisFeeToken_gt: Bytes
  oasisFeeToken_lt: Bytes
  oasisFeeToken_gte: Bytes
  oasisFeeToken_lte: Bytes
  oasisFeeToken_in: [Bytes!]
  oasisFeeToken_not_in: [Bytes!]
  oasisFeeToken_contains: Bytes
  oasisFeeToken_not_contains: Bytes
  oasisFee: BigDecimal
  oasisFee_not: BigDecimal
  oasisFee_gt: BigDecimal
  oasisFee_lt: BigDecimal
  oasisFee_gte: BigDecimal
  oasisFee_lte: BigDecimal
  oasisFee_in: [BigDecimal!]
  oasisFee_not_in: [BigDecimal!]
  oasisFeeUSD: BigDecimal
  oasisFeeUSD_not: BigDecimal
  oasisFeeUSD_gt: BigDecimal
  oasisFeeUSD_lt: BigDecimal
  oasisFeeUSD_gte: BigDecimal
  oasisFeeUSD_lte: BigDecimal
  oasisFeeUSD_in: [BigDecimal!]
  oasisFeeUSD_not_in: [BigDecimal!]
  summerFeeToken: Bytes
  summerFeeToken_not: Bytes
  summerFeeToken_gt: Bytes
  summerFeeToken_lt: Bytes
  summerFeeToken_gte: Bytes
  summerFeeToken_lte: Bytes
  summerFeeToken_in: [Bytes!]
  summerFeeToken_not_in: [Bytes!]
  summerFeeToken_contains: Bytes
  summerFeeToken_not_contains: Bytes
  summerFee: BigDecimal
  summerFee_not: BigDecimal
  summerFee_gt: BigDecimal
  summerFee_lt: BigDecimal
  summerFee_gte: BigDecimal
  summerFee_lte: BigDecimal
  summerFee_in: [BigDecimal!]
  summerFee_not_in: [BigDecimal!]
  summerFeeUSD: BigDecimal
  summerFeeUSD_not: BigDecimal
  summerFeeUSD_gt: BigDecimal
  summerFeeUSD_lt: BigDecimal
  summerFeeUSD_gte: BigDecimal
  summerFeeUSD_lte: BigDecimal
  summerFeeUSD_in: [BigDecimal!]
  summerFeeUSD_not_in: [BigDecimal!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasFeeUSD: BigDecimal
  gasFeeUSD_not: BigDecimal
  gasFeeUSD_gt: BigDecimal
  gasFeeUSD_lt: BigDecimal
  gasFeeUSD_gte: BigDecimal
  gasFeeUSD_lte: BigDecimal
  gasFeeUSD_in: [BigDecimal!]
  gasFeeUSD_not_in: [BigDecimal!]
  totalFee: BigDecimal
  totalFee_not: BigDecimal
  totalFee_gt: BigDecimal
  totalFee_lt: BigDecimal
  totalFee_gte: BigDecimal
  totalFee_lte: BigDecimal
  totalFee_in: [BigDecimal!]
  totalFee_not_in: [BigDecimal!]
  multipleBefore: BigDecimal
  multipleBefore_not: BigDecimal
  multipleBefore_gt: BigDecimal
  multipleBefore_lt: BigDecimal
  multipleBefore_gte: BigDecimal
  multipleBefore_lte: BigDecimal
  multipleBefore_in: [BigDecimal!]
  multipleBefore_not_in: [BigDecimal!]
  multipleAfter: BigDecimal
  multipleAfter_not: BigDecimal
  multipleAfter_gt: BigDecimal
  multipleAfter_lt: BigDecimal
  multipleAfter_gte: BigDecimal
  multipleAfter_lte: BigDecimal
  multipleAfter_in: [BigDecimal!]
  multipleAfter_not_in: [BigDecimal!]
  netValueBefore: BigDecimal
  netValueBefore_not: BigDecimal
  netValueBefore_gt: BigDecimal
  netValueBefore_lt: BigDecimal
  netValueBefore_gte: BigDecimal
  netValueBefore_lte: BigDecimal
  netValueBefore_in: [BigDecimal!]
  netValueBefore_not_in: [BigDecimal!]
  netValueAfter: BigDecimal
  netValueAfter_not: BigDecimal
  netValueAfter_gt: BigDecimal
  netValueAfter_lt: BigDecimal
  netValueAfter_gte: BigDecimal
  netValueAfter_lte: BigDecimal
  netValueAfter_in: [BigDecimal!]
  netValueAfter_not_in: [BigDecimal!]
  healthFactorAfter: BigDecimal
  healthFactorAfter_not: BigDecimal
  healthFactorAfter_gt: BigDecimal
  healthFactorAfter_lt: BigDecimal
  healthFactorAfter_gte: BigDecimal
  healthFactorAfter_lte: BigDecimal
  healthFactorAfter_in: [BigDecimal!]
  healthFactorAfter_not_in: [BigDecimal!]
  liquidationThreshold: BigDecimal
  liquidationThreshold_not: BigDecimal
  liquidationThreshold_gt: BigDecimal
  liquidationThreshold_lt: BigDecimal
  liquidationThreshold_gte: BigDecimal
  liquidationThreshold_lte: BigDecimal
  liquidationThreshold_in: [BigDecimal!]
  liquidationThreshold_not_in: [BigDecimal!]
  ltvBefore: BigDecimal
  ltvBefore_not: BigDecimal
  ltvBefore_gt: BigDecimal
  ltvBefore_lt: BigDecimal
  ltvBefore_gte: BigDecimal
  ltvBefore_lte: BigDecimal
  ltvBefore_in: [BigDecimal!]
  ltvBefore_not_in: [BigDecimal!]
  ltvAfter: BigDecimal
  ltvAfter_not: BigDecimal
  ltvAfter_gt: BigDecimal
  ltvAfter_lt: BigDecimal
  ltvAfter_gte: BigDecimal
  ltvAfter_lte: BigDecimal
  ltvAfter_in: [BigDecimal!]
  ltvAfter_not_in: [BigDecimal!]
  liquidationPriceBefore: BigDecimal
  liquidationPriceBefore_not: BigDecimal
  liquidationPriceBefore_gt: BigDecimal
  liquidationPriceBefore_lt: BigDecimal
  liquidationPriceBefore_gte: BigDecimal
  liquidationPriceBefore_lte: BigDecimal
  liquidationPriceBefore_in: [BigDecimal!]
  liquidationPriceBefore_not_in: [BigDecimal!]
  liquidationPriceAfter: BigDecimal
  liquidationPriceAfter_not: BigDecimal
  liquidationPriceAfter_gt: BigDecimal
  liquidationPriceAfter_lt: BigDecimal
  liquidationPriceAfter_gte: BigDecimal
  liquidationPriceAfter_lte: BigDecimal
  liquidationPriceAfter_in: [BigDecimal!]
  liquidationPriceAfter_not_in: [BigDecimal!]
  ethPrice: BigDecimal
  ethPrice_not: BigDecimal
  ethPrice_gt: BigDecimal
  ethPrice_lt: BigDecimal
  ethPrice_gte: BigDecimal
  ethPrice_lte: BigDecimal
  ethPrice_in: [BigDecimal!]
  ethPrice_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  proxy: String
  proxy_not: String
  proxy_gt: String
  proxy_lt: String
  proxy_gte: String
  proxy_lte: String
  proxy_in: [String!]
  proxy_not_in: [String!]
  proxy_contains: String
  proxy_contains_nocase: String
  proxy_not_contains: String
  proxy_not_contains_nocase: String
  proxy_starts_with: String
  proxy_starts_with_nocase: String
  proxy_not_starts_with: String
  proxy_not_starts_with_nocase: String
  proxy_ends_with: String
  proxy_ends_with_nocase: String
  proxy_not_ends_with: String
  proxy_not_ends_with_nocase: String
  proxy_: Proxy_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionEvent_filter]
  or: [PositionEvent_filter]
}

enum PositionEvent_orderBy {
  id
  kind
  account
  position
  position__id
  position__account
  position__collateralAddress
  position__debtAddress
  position__protocol
  position__type
  position__fromEvent
  position__cumulativeDeposit
  position__cumulativeWithdraw
  position__cumulativeFees
  position__cumulativeDepositUSD
  position__cumulativeDepositInQuoteToken
  position__cumulativeDepositInCollateralToken
  position__cumulativeWithdrawUSD
  position__cumulativeWithdrawInQuoteToken
  position__cumulativeWithdrawInCollateralToken
  position__cumulativeFeesUSD
  position__cumulativeFeesInQuoteToken
  position__cumulativeFeesInCollateralToken
  position__debt
  position__collateral
  isAutomation
  trigger
  trigger__id
  trigger__commandAddress
  trigger__triggerType
  trigger__kind
  trigger__triggerData
  trigger__addedBlock
  trigger__addedTransaction
  trigger__addedLogIndex
  trigger__addedTimestamp
  trigger__removedBlock
  trigger__removedTransaction
  trigger__removedLogIndex
  trigger__removedTimestamp
  trigger__executedBlock
  trigger__executedTransaction
  trigger__executedLogIndex
  trigger__executedTimestamp
  debtToken
  debtToken__id
  debtToken__address
  debtToken__symbol
  debtToken__decimals
  debtToken__precision
  debtAddress
  debtBefore
  debtAfter
  debtDelta
  debtTokenPriceUSD
  collateralToken
  collateralToken__id
  collateralToken__address
  collateralToken__symbol
  collateralToken__decimals
  collateralToken__precision
  collateralAddress
  collateralBefore
  collateralAfter
  collateralDelta
  collateralTokenPriceUSD
  debtOraclePrice
  collateralOraclePrice
  swapFromToken
  swapToToken
  swapFromAmount
  swapToAmount
  marketPrice
  depositTransfers
  depositedUSD
  withdrawTransfers
  withdrawnUSD
  oasisFeeToken
  oasisFee
  oasisFeeUSD
  summerFeeToken
  summerFee
  summerFeeUSD
  gasUsed
  gasPrice
  gasFeeUSD
  totalFee
  multipleBefore
  multipleAfter
  netValueBefore
  netValueAfter
  healthFactorAfter
  liquidationThreshold
  ltvBefore
  ltvAfter
  liquidationPriceBefore
  liquidationPriceAfter
  ethPrice
  timestamp
  blockNumber
  txHash
  proxy
  proxy__id
  proxy__vaultId
  proxy__isDPM
  proxy__owner
}

type Proxy {
  """
  Address of DPM or DS proxy
  
  """
  id: ID!
  vaultId: BigInt
  isDPM: Boolean!
  owner: Bytes!
  position: Position
  triggers(skip: Int = 0, first: Int = 100, orderBy: Trigger_orderBy, orderDirection: OrderDirection, where: Trigger_filter): [Trigger!]!
}

input Proxy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vaultId: BigInt
  vaultId_not: BigInt
  vaultId_gt: BigInt
  vaultId_lt: BigInt
  vaultId_gte: BigInt
  vaultId_lte: BigInt
  vaultId_in: [BigInt!]
  vaultId_not_in: [BigInt!]
  isDPM: Boolean
  isDPM_not: Boolean
  isDPM_in: [Boolean!]
  isDPM_not_in: [Boolean!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  triggers_: Trigger_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Proxy_filter]
  or: [Proxy_filter]
}

enum Proxy_orderBy {
  id
  vaultId
  isDPM
  owner
  position
  position__id
  position__account
  position__collateralAddress
  position__debtAddress
  position__protocol
  position__type
  position__fromEvent
  position__cumulativeDeposit
  position__cumulativeWithdraw
  position__cumulativeFees
  position__cumulativeDepositUSD
  position__cumulativeDepositInQuoteToken
  position__cumulativeDepositInCollateralToken
  position__cumulativeWithdrawUSD
  position__cumulativeWithdrawInQuoteToken
  position__cumulativeWithdrawInCollateralToken
  position__cumulativeFeesUSD
  position__cumulativeFeesInQuoteToken
  position__cumulativeFeesInCollateralToken
  position__debt
  position__collateral
  triggers
}

type Query {
  assetSwap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AssetSwap
  assetSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: AssetSwap_orderBy
    orderDirection: OrderDirection
    where: AssetSwap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AssetSwap!]!
  slippageSaved(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SlippageSaved
  slippageSaveds(
    skip: Int = 0
    first: Int = 100
    orderBy: SlippageSaved_orderBy
    orderDirection: OrderDirection
    where: SlippageSaved_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SlippageSaved!]!
  feePaid(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeePaid
  feePaids(
    skip: Int = 0
    first: Int = 100
    orderBy: FeePaid_orderBy
    orderDirection: OrderDirection
    where: FeePaid_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeePaid!]!
  proxy(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proxy
  proxies(
    skip: Int = 0
    first: Int = 100
    orderBy: Proxy_orderBy
    orderDirection: OrderDirection
    where: Proxy_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proxy!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  position(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  positionEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionEvent
  positionEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionEvent_orderBy
    orderDirection: OrderDirection
    where: PositionEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionEvent!]!
  transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  registeredOperation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegisteredOperation
  registeredOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: RegisteredOperation_orderBy
    orderDirection: OrderDirection
    where: RegisteredOperation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegisteredOperation!]!
  aaveLikeDeposit(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeDeposit
  aaveLikeDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeDeposit_orderBy
    orderDirection: OrderDirection
    where: AaveLikeDeposit_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeDeposit!]!
  aaveLikeWithdraw(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeWithdraw
  aaveLikeWithdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeWithdraw_orderBy
    orderDirection: OrderDirection
    where: AaveLikeWithdraw_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeWithdraw!]!
  aaveLikeBorrow(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeBorrow
  aaveLikeBorrows(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeBorrow_orderBy
    orderDirection: OrderDirection
    where: AaveLikeBorrow_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeBorrow!]!
  aaveLikeRepay(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeRepay
  aaveLikeRepays(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeRepay_orderBy
    orderDirection: OrderDirection
    where: AaveLikeRepay_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeRepay!]!
  aaveLikeLiquidation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeLiquidation
  aaveLikeLiquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeLiquidation_orderBy
    orderDirection: OrderDirection
    where: AaveLikeLiquidation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeLiquidation!]!
  trigger(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trigger
  triggers(
    skip: Int = 0
    first: Int = 100
    orderBy: Trigger_orderBy
    orderDirection: OrderDirection
    where: Trigger_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trigger!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RegisteredOperation {
  id: ID!
  name: String!
  actions: [Bytes!]!
  skipped: [Boolean!]!
}

input RegisteredOperation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  actions: [Bytes!]
  actions_not: [Bytes!]
  actions_contains: [Bytes!]
  actions_contains_nocase: [Bytes!]
  actions_not_contains: [Bytes!]
  actions_not_contains_nocase: [Bytes!]
  skipped: [Boolean!]
  skipped_not: [Boolean!]
  skipped_contains: [Boolean!]
  skipped_contains_nocase: [Boolean!]
  skipped_not_contains: [Boolean!]
  skipped_not_contains_nocase: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RegisteredOperation_filter]
  or: [RegisteredOperation_filter]
}

enum RegisteredOperation_orderBy {
  id
  name
  actions
  skipped
}

type SlippageSaved {
  """
  id is a tx_hash-actionLogIndex
  it uses action log index to easily combine all swap events into one
  
  """
  id: ID!
  minimumPossible: BigInt!
  actualAmount: BigInt!
}

input SlippageSaved_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  minimumPossible: BigInt
  minimumPossible_not: BigInt
  minimumPossible_gt: BigInt
  minimumPossible_lt: BigInt
  minimumPossible_gte: BigInt
  minimumPossible_lte: BigInt
  minimumPossible_in: [BigInt!]
  minimumPossible_not_in: [BigInt!]
  actualAmount: BigInt
  actualAmount_not: BigInt
  actualAmount_gt: BigInt
  actualAmount_lt: BigInt
  actualAmount_gte: BigInt
  actualAmount_lte: BigInt
  actualAmount_in: [BigInt!]
  actualAmount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SlippageSaved_filter]
  or: [SlippageSaved_filter]
}

enum SlippageSaved_orderBy {
  id
  minimumPossible
  actualAmount
}

type Subscription {
  assetSwap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AssetSwap
  assetSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: AssetSwap_orderBy
    orderDirection: OrderDirection
    where: AssetSwap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AssetSwap!]!
  slippageSaved(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SlippageSaved
  slippageSaveds(
    skip: Int = 0
    first: Int = 100
    orderBy: SlippageSaved_orderBy
    orderDirection: OrderDirection
    where: SlippageSaved_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SlippageSaved!]!
  feePaid(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeePaid
  feePaids(
    skip: Int = 0
    first: Int = 100
    orderBy: FeePaid_orderBy
    orderDirection: OrderDirection
    where: FeePaid_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeePaid!]!
  proxy(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proxy
  proxies(
    skip: Int = 0
    first: Int = 100
    orderBy: Proxy_orderBy
    orderDirection: OrderDirection
    where: Proxy_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proxy!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  position(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  positionEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionEvent
  positionEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionEvent_orderBy
    orderDirection: OrderDirection
    where: PositionEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionEvent!]!
  transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  registeredOperation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegisteredOperation
  registeredOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: RegisteredOperation_orderBy
    orderDirection: OrderDirection
    where: RegisteredOperation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegisteredOperation!]!
  aaveLikeDeposit(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeDeposit
  aaveLikeDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeDeposit_orderBy
    orderDirection: OrderDirection
    where: AaveLikeDeposit_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeDeposit!]!
  aaveLikeWithdraw(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeWithdraw
  aaveLikeWithdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeWithdraw_orderBy
    orderDirection: OrderDirection
    where: AaveLikeWithdraw_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeWithdraw!]!
  aaveLikeBorrow(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeBorrow
  aaveLikeBorrows(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeBorrow_orderBy
    orderDirection: OrderDirection
    where: AaveLikeBorrow_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeBorrow!]!
  aaveLikeRepay(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeRepay
  aaveLikeRepays(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeRepay_orderBy
    orderDirection: OrderDirection
    where: AaveLikeRepay_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeRepay!]!
  aaveLikeLiquidation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AaveLikeLiquidation
  aaveLikeLiquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: AaveLikeLiquidation_orderBy
    orderDirection: OrderDirection
    where: AaveLikeLiquidation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AaveLikeLiquidation!]!
  trigger(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trigger
  triggers(
    skip: Int = 0
    first: Int = 100
    orderBy: Trigger_orderBy
    orderDirection: OrderDirection
    where: Trigger_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trigger!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Token {
  id: ID!
  address: Bytes!
  symbol: String!
  decimals: BigInt!
  precision: String!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  precision: String
  precision_not: String
  precision_gt: String
  precision_lt: String
  precision_gte: String
  precision_lte: String
  precision_in: [String!]
  precision_not_in: [String!]
  precision_contains: String
  precision_contains_nocase: String
  precision_not_contains: String
  precision_not_contains_nocase: String
  precision_starts_with: String
  precision_starts_with_nocase: String
  precision_not_starts_with: String
  precision_not_starts_with_nocase: String
  precision_ends_with: String
  precision_ends_with_nocase: String
  precision_not_ends_with: String
  precision_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  address
  symbol
  decimals
  precision
}

type Transfer {
  id: ID!
  event: PositionEvent!
  from: Bytes!
  to: Bytes!
  token: Bytes!
  amount: BigDecimal!
  priceInUSD: BigDecimal!
  amountUSD: BigDecimal!
  txHash: String!
}

input Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  event: String
  event_not: String
  event_gt: String
  event_lt: String
  event_gte: String
  event_lte: String
  event_in: [String!]
  event_not_in: [String!]
  event_contains: String
  event_contains_nocase: String
  event_not_contains: String
  event_not_contains_nocase: String
  event_starts_with: String
  event_starts_with_nocase: String
  event_not_starts_with: String
  event_not_starts_with_nocase: String
  event_ends_with: String
  event_ends_with_nocase: String
  event_not_ends_with: String
  event_not_ends_with_nocase: String
  event_: PositionEvent_filter
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  priceInUSD: BigDecimal
  priceInUSD_not: BigDecimal
  priceInUSD_gt: BigDecimal
  priceInUSD_lt: BigDecimal
  priceInUSD_gte: BigDecimal
  priceInUSD_lte: BigDecimal
  priceInUSD_in: [BigDecimal!]
  priceInUSD_not_in: [BigDecimal!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  or: [Transfer_filter]
}

enum Transfer_orderBy {
  id
  event
  event__id
  event__kind
  event__account
  event__isAutomation
  event__debtAddress
  event__debtBefore
  event__debtAfter
  event__debtDelta
  event__debtTokenPriceUSD
  event__collateralAddress
  event__collateralBefore
  event__collateralAfter
  event__collateralDelta
  event__collateralTokenPriceUSD
  event__debtOraclePrice
  event__collateralOraclePrice
  event__swapFromToken
  event__swapToToken
  event__swapFromAmount
  event__swapToAmount
  event__marketPrice
  event__depositedUSD
  event__withdrawnUSD
  event__oasisFeeToken
  event__oasisFee
  event__oasisFeeUSD
  event__summerFeeToken
  event__summerFee
  event__summerFeeUSD
  event__gasUsed
  event__gasPrice
  event__gasFeeUSD
  event__totalFee
  event__multipleBefore
  event__multipleAfter
  event__netValueBefore
  event__netValueAfter
  event__healthFactorAfter
  event__liquidationThreshold
  event__ltvBefore
  event__ltvAfter
  event__liquidationPriceBefore
  event__liquidationPriceAfter
  event__ethPrice
  event__timestamp
  event__blockNumber
  event__txHash
  from
  to
  token
  amount
  priceInUSD
  amountUSD
  txHash
}

type Trigger {
  id: ID!
  account: Proxy!
  commandAddress: Bytes!
  triggerType: BigInt!
  kind: String!
  triggerData: Bytes!
  decodedData: [String!]
  decodedDataNames: [String!]
  addedBlock: BigInt!
  addedTransaction: Bytes!
  addedLogIndex: BigInt!
  addedTimestamp: BigInt!
  removedBlock: BigInt
  removedTransaction: Bytes
  removedLogIndex: BigInt
  removedTimestamp: BigInt
  executedBlock: BigInt
  executedTransaction: Bytes
  executedLogIndex: BigInt
  executedTimestamp: BigInt
}

input Trigger_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Proxy_filter
  commandAddress: Bytes
  commandAddress_not: Bytes
  commandAddress_gt: Bytes
  commandAddress_lt: Bytes
  commandAddress_gte: Bytes
  commandAddress_lte: Bytes
  commandAddress_in: [Bytes!]
  commandAddress_not_in: [Bytes!]
  commandAddress_contains: Bytes
  commandAddress_not_contains: Bytes
  triggerType: BigInt
  triggerType_not: BigInt
  triggerType_gt: BigInt
  triggerType_lt: BigInt
  triggerType_gte: BigInt
  triggerType_lte: BigInt
  triggerType_in: [BigInt!]
  triggerType_not_in: [BigInt!]
  kind: String
  kind_not: String
  kind_gt: String
  kind_lt: String
  kind_gte: String
  kind_lte: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_contains: String
  kind_contains_nocase: String
  kind_not_contains: String
  kind_not_contains_nocase: String
  kind_starts_with: String
  kind_starts_with_nocase: String
  kind_not_starts_with: String
  kind_not_starts_with_nocase: String
  kind_ends_with: String
  kind_ends_with_nocase: String
  kind_not_ends_with: String
  kind_not_ends_with_nocase: String
  triggerData: Bytes
  triggerData_not: Bytes
  triggerData_gt: Bytes
  triggerData_lt: Bytes
  triggerData_gte: Bytes
  triggerData_lte: Bytes
  triggerData_in: [Bytes!]
  triggerData_not_in: [Bytes!]
  triggerData_contains: Bytes
  triggerData_not_contains: Bytes
  decodedData: [String!]
  decodedData_not: [String!]
  decodedData_contains: [String!]
  decodedData_contains_nocase: [String!]
  decodedData_not_contains: [String!]
  decodedData_not_contains_nocase: [String!]
  decodedDataNames: [String!]
  decodedDataNames_not: [String!]
  decodedDataNames_contains: [String!]
  decodedDataNames_contains_nocase: [String!]
  decodedDataNames_not_contains: [String!]
  decodedDataNames_not_contains_nocase: [String!]
  addedBlock: BigInt
  addedBlock_not: BigInt
  addedBlock_gt: BigInt
  addedBlock_lt: BigInt
  addedBlock_gte: BigInt
  addedBlock_lte: BigInt
  addedBlock_in: [BigInt!]
  addedBlock_not_in: [BigInt!]
  addedTransaction: Bytes
  addedTransaction_not: Bytes
  addedTransaction_gt: Bytes
  addedTransaction_lt: Bytes
  addedTransaction_gte: Bytes
  addedTransaction_lte: Bytes
  addedTransaction_in: [Bytes!]
  addedTransaction_not_in: [Bytes!]
  addedTransaction_contains: Bytes
  addedTransaction_not_contains: Bytes
  addedLogIndex: BigInt
  addedLogIndex_not: BigInt
  addedLogIndex_gt: BigInt
  addedLogIndex_lt: BigInt
  addedLogIndex_gte: BigInt
  addedLogIndex_lte: BigInt
  addedLogIndex_in: [BigInt!]
  addedLogIndex_not_in: [BigInt!]
  addedTimestamp: BigInt
  addedTimestamp_not: BigInt
  addedTimestamp_gt: BigInt
  addedTimestamp_lt: BigInt
  addedTimestamp_gte: BigInt
  addedTimestamp_lte: BigInt
  addedTimestamp_in: [BigInt!]
  addedTimestamp_not_in: [BigInt!]
  removedBlock: BigInt
  removedBlock_not: BigInt
  removedBlock_gt: BigInt
  removedBlock_lt: BigInt
  removedBlock_gte: BigInt
  removedBlock_lte: BigInt
  removedBlock_in: [BigInt!]
  removedBlock_not_in: [BigInt!]
  removedTransaction: Bytes
  removedTransaction_not: Bytes
  removedTransaction_gt: Bytes
  removedTransaction_lt: Bytes
  removedTransaction_gte: Bytes
  removedTransaction_lte: Bytes
  removedTransaction_in: [Bytes!]
  removedTransaction_not_in: [Bytes!]
  removedTransaction_contains: Bytes
  removedTransaction_not_contains: Bytes
  removedLogIndex: BigInt
  removedLogIndex_not: BigInt
  removedLogIndex_gt: BigInt
  removedLogIndex_lt: BigInt
  removedLogIndex_gte: BigInt
  removedLogIndex_lte: BigInt
  removedLogIndex_in: [BigInt!]
  removedLogIndex_not_in: [BigInt!]
  removedTimestamp: BigInt
  removedTimestamp_not: BigInt
  removedTimestamp_gt: BigInt
  removedTimestamp_lt: BigInt
  removedTimestamp_gte: BigInt
  removedTimestamp_lte: BigInt
  removedTimestamp_in: [BigInt!]
  removedTimestamp_not_in: [BigInt!]
  executedBlock: BigInt
  executedBlock_not: BigInt
  executedBlock_gt: BigInt
  executedBlock_lt: BigInt
  executedBlock_gte: BigInt
  executedBlock_lte: BigInt
  executedBlock_in: [BigInt!]
  executedBlock_not_in: [BigInt!]
  executedTransaction: Bytes
  executedTransaction_not: Bytes
  executedTransaction_gt: Bytes
  executedTransaction_lt: Bytes
  executedTransaction_gte: Bytes
  executedTransaction_lte: Bytes
  executedTransaction_in: [Bytes!]
  executedTransaction_not_in: [Bytes!]
  executedTransaction_contains: Bytes
  executedTransaction_not_contains: Bytes
  executedLogIndex: BigInt
  executedLogIndex_not: BigInt
  executedLogIndex_gt: BigInt
  executedLogIndex_lt: BigInt
  executedLogIndex_gte: BigInt
  executedLogIndex_lte: BigInt
  executedLogIndex_in: [BigInt!]
  executedLogIndex_not_in: [BigInt!]
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Trigger_filter]
  or: [Trigger_filter]
}

enum Trigger_orderBy {
  id
  account
  account__id
  account__vaultId
  account__isDPM
  account__owner
  commandAddress
  triggerType
  kind
  triggerData
  decodedData
  decodedDataNames
  addedBlock
  addedTransaction
  addedLogIndex
  addedTimestamp
  removedBlock
  removedTransaction
  removedLogIndex
  removedTimestamp
  executedBlock
  executedTransaction
  executedLogIndex
  executedTimestamp
}

