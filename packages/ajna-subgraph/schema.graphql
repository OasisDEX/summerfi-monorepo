"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type Account {
  id: Bytes!
  address: Bytes!
  user: User!
  vaultId: BigInt!
  isDPM: Boolean!
  protocol: String
  positionType: String
  collateralToken: Bytes
  debtToken: Bytes
  createEvents(skip: Int = 0, first: Int = 100, orderBy: CreatePositionEvent_orderBy, orderDirection: OrderDirection, where: CreatePositionEvent_filter): [CreatePositionEvent!]
  earnPositions(skip: Int = 0, first: Int = 100, orderBy: EarnPosition_orderBy, orderDirection: OrderDirection, where: EarnPosition_filter): [EarnPosition!]
  borrowPositions(skip: Int = 0, first: Int = 100, orderBy: BorrowPosition_orderBy, orderDirection: OrderDirection, where: BorrowPosition_filter): [BorrowPosition!]
  nfts(skip: Int = 0, first: Int = 100, orderBy: NFT_orderBy, orderDirection: OrderDirection, where: NFT_filter): [NFT!]
}

input Account_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  vaultId: BigInt
  vaultId_not: BigInt
  vaultId_gt: BigInt
  vaultId_lt: BigInt
  vaultId_gte: BigInt
  vaultId_lte: BigInt
  vaultId_in: [BigInt!]
  vaultId_not_in: [BigInt!]
  isDPM: Boolean
  isDPM_not: Boolean
  isDPM_in: [Boolean!]
  isDPM_not_in: [Boolean!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  positionType: String
  positionType_not: String
  positionType_gt: String
  positionType_lt: String
  positionType_gte: String
  positionType_lte: String
  positionType_in: [String!]
  positionType_not_in: [String!]
  positionType_contains: String
  positionType_contains_nocase: String
  positionType_not_contains: String
  positionType_not_contains_nocase: String
  positionType_starts_with: String
  positionType_starts_with_nocase: String
  positionType_not_starts_with: String
  positionType_not_starts_with_nocase: String
  positionType_ends_with: String
  positionType_ends_with_nocase: String
  positionType_not_ends_with: String
  positionType_not_ends_with_nocase: String
  collateralToken: Bytes
  collateralToken_not: Bytes
  collateralToken_gt: Bytes
  collateralToken_lt: Bytes
  collateralToken_gte: Bytes
  collateralToken_lte: Bytes
  collateralToken_in: [Bytes!]
  collateralToken_not_in: [Bytes!]
  collateralToken_contains: Bytes
  collateralToken_not_contains: Bytes
  debtToken: Bytes
  debtToken_not: Bytes
  debtToken_gt: Bytes
  debtToken_lt: Bytes
  debtToken_gte: Bytes
  debtToken_lte: Bytes
  debtToken_in: [Bytes!]
  debtToken_not_in: [Bytes!]
  debtToken_contains: Bytes
  debtToken_not_contains: Bytes
  createEvents_: CreatePositionEvent_filter
  earnPositions_: EarnPosition_filter
  borrowPositions_: BorrowPosition_filter
  nfts_: NFT_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  address
  user
  user__id
  user__address
  user__vaultCount
  vaultId
  isDPM
  protocol
  positionType
  collateralToken
  debtToken
  createEvents
  earnPositions
  borrowPositions
  nfts
}

type AssetSwap {
  """
  id is a tx_hash-actionLogIndex
  it uses action log index to easily combine all swap events into one
  
  """
  id: Bytes!
  assetIn: Bytes!
  assetOut: Bytes!
  amountIn: BigInt!
  amountOut: BigInt!
  proxy: Bytes
}

input AssetSwap_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  assetIn: Bytes
  assetIn_not: Bytes
  assetIn_gt: Bytes
  assetIn_lt: Bytes
  assetIn_gte: Bytes
  assetIn_lte: Bytes
  assetIn_in: [Bytes!]
  assetIn_not_in: [Bytes!]
  assetIn_contains: Bytes
  assetIn_not_contains: Bytes
  assetOut: Bytes
  assetOut_not: Bytes
  assetOut_gt: Bytes
  assetOut_lt: Bytes
  assetOut_gte: Bytes
  assetOut_lte: Bytes
  assetOut_in: [Bytes!]
  assetOut_not_in: [Bytes!]
  assetOut_contains: Bytes
  assetOut_not_contains: Bytes
  amountIn: BigInt
  amountIn_not: BigInt
  amountIn_gt: BigInt
  amountIn_lt: BigInt
  amountIn_gte: BigInt
  amountIn_lte: BigInt
  amountIn_in: [BigInt!]
  amountIn_not_in: [BigInt!]
  amountOut: BigInt
  amountOut_not: BigInt
  amountOut_gt: BigInt
  amountOut_lt: BigInt
  amountOut_gte: BigInt
  amountOut_lte: BigInt
  amountOut_in: [BigInt!]
  amountOut_not_in: [BigInt!]
  proxy: Bytes
  proxy_not: Bytes
  proxy_gt: Bytes
  proxy_lt: Bytes
  proxy_gte: Bytes
  proxy_lte: Bytes
  proxy_in: [Bytes!]
  proxy_not_in: [Bytes!]
  proxy_contains: Bytes
  proxy_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AssetSwap_filter]
  or: [AssetSwap_filter]
}

enum AssetSwap_orderBy {
  id
  assetIn
  assetOut
  amountIn
  amountOut
  proxy
}

type Auction {
  id: ID!
  pool: Pool!
  account: Account
  user: User
  position: BorrowPosition!
  endOfGracePeriod: BigInt!
  inLiquidation: Boolean!
  kickTime: BigInt!
  collateral: BigInt!
  debtToCover: BigInt!
  isCollateralized: Boolean!
  price: BigInt!
  neutralPrice: BigInt!
  kicker: String
  bondSize: BigInt!
  referencePrice: BigInt!
  hpbOnKick: BigInt
}

input Auction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: BorrowPosition_filter
  endOfGracePeriod: BigInt
  endOfGracePeriod_not: BigInt
  endOfGracePeriod_gt: BigInt
  endOfGracePeriod_lt: BigInt
  endOfGracePeriod_gte: BigInt
  endOfGracePeriod_lte: BigInt
  endOfGracePeriod_in: [BigInt!]
  endOfGracePeriod_not_in: [BigInt!]
  inLiquidation: Boolean
  inLiquidation_not: Boolean
  inLiquidation_in: [Boolean!]
  inLiquidation_not_in: [Boolean!]
  kickTime: BigInt
  kickTime_not: BigInt
  kickTime_gt: BigInt
  kickTime_lt: BigInt
  kickTime_gte: BigInt
  kickTime_lte: BigInt
  kickTime_in: [BigInt!]
  kickTime_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  debtToCover: BigInt
  debtToCover_not: BigInt
  debtToCover_gt: BigInt
  debtToCover_lt: BigInt
  debtToCover_gte: BigInt
  debtToCover_lte: BigInt
  debtToCover_in: [BigInt!]
  debtToCover_not_in: [BigInt!]
  isCollateralized: Boolean
  isCollateralized_not: Boolean
  isCollateralized_in: [Boolean!]
  isCollateralized_not_in: [Boolean!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  neutralPrice: BigInt
  neutralPrice_not: BigInt
  neutralPrice_gt: BigInt
  neutralPrice_lt: BigInt
  neutralPrice_gte: BigInt
  neutralPrice_lte: BigInt
  neutralPrice_in: [BigInt!]
  neutralPrice_not_in: [BigInt!]
  kicker: String
  kicker_not: String
  kicker_gt: String
  kicker_lt: String
  kicker_gte: String
  kicker_lte: String
  kicker_in: [String!]
  kicker_not_in: [String!]
  kicker_contains: String
  kicker_contains_nocase: String
  kicker_not_contains: String
  kicker_not_contains_nocase: String
  kicker_starts_with: String
  kicker_starts_with_nocase: String
  kicker_not_starts_with: String
  kicker_not_starts_with_nocase: String
  kicker_ends_with: String
  kicker_ends_with_nocase: String
  kicker_not_ends_with: String
  kicker_not_ends_with_nocase: String
  bondSize: BigInt
  bondSize_not: BigInt
  bondSize_gt: BigInt
  bondSize_lt: BigInt
  bondSize_gte: BigInt
  bondSize_lte: BigInt
  bondSize_in: [BigInt!]
  bondSize_not_in: [BigInt!]
  referencePrice: BigInt
  referencePrice_not: BigInt
  referencePrice_gt: BigInt
  referencePrice_lt: BigInt
  referencePrice_gte: BigInt
  referencePrice_lte: BigInt
  referencePrice_in: [BigInt!]
  referencePrice_not_in: [BigInt!]
  hpbOnKick: BigInt
  hpbOnKick_not: BigInt
  hpbOnKick_gt: BigInt
  hpbOnKick_lt: BigInt
  hpbOnKick_gte: BigInt
  hpbOnKick_lte: BigInt
  hpbOnKick_in: [BigInt!]
  hpbOnKick_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Auction_filter]
  or: [Auction_filter]
}

enum Auction_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  user
  user__id
  user__address
  user__vaultCount
  position
  position__id
  position__debt
  position__collateral
  position__t0Np_
  position__t0Debt
  position__liquidationPrice
  position__borrowDailyTokenBlocks
  position__borrowLastUpdateBlock
  position__borrowCumulativeDepositUSD
  position__borrowCumulativeDepositInQuoteToken
  position__borrowCumulativeDepositInCollateralToken
  position__borrowCumulativeWithdrawUSD
  position__borrowCumulativeWithdrawInQuoteToken
  position__borrowCumulativeWithdrawInCollateralToken
  position__borrowCumulativeCollateralDeposit
  position__borrowCumulativeCollateralWithdraw
  position__borrowCumulativeDebtDeposit
  position__borrowCumulativeDebtWithdraw
  position__borrowCumulativeFeesUSD
  position__borrowCumulativeFeesInQuoteToken
  position__borrowCumulativeFeesInCollateralToken
  endOfGracePeriod
  inLiquidation
  kickTime
  collateral
  debtToCover
  isCollateralized
  price
  neutralPrice
  kicker
  bondSize
  referencePrice
  hpbOnKick
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

type BorrowDailyReward {
  id: ID!
  day: Day!
  week: Week!
  pool: Pool!
  account: Account
  user: User
  reward: BigDecimal!
}

input BorrowDailyReward_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  day: String
  day_not: String
  day_gt: String
  day_lt: String
  day_gte: String
  day_lte: String
  day_in: [String!]
  day_not_in: [String!]
  day_contains: String
  day_contains_nocase: String
  day_not_contains: String
  day_not_contains_nocase: String
  day_starts_with: String
  day_starts_with_nocase: String
  day_not_starts_with: String
  day_not_starts_with_nocase: String
  day_ends_with: String
  day_ends_with_nocase: String
  day_not_ends_with: String
  day_not_ends_with_nocase: String
  day_: Day_filter
  week: String
  week_not: String
  week_gt: String
  week_lt: String
  week_gte: String
  week_lte: String
  week_in: [String!]
  week_not_in: [String!]
  week_contains: String
  week_contains_nocase: String
  week_not_contains: String
  week_not_contains_nocase: String
  week_starts_with: String
  week_starts_with_nocase: String
  week_not_starts_with: String
  week_not_starts_with_nocase: String
  week_ends_with: String
  week_ends_with_nocase: String
  week_not_ends_with: String
  week_not_ends_with_nocase: String
  week_: Week_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  reward: BigDecimal
  reward_not: BigDecimal
  reward_gt: BigDecimal
  reward_lt: BigDecimal
  reward_gte: BigDecimal
  reward_lte: BigDecimal
  reward_in: [BigDecimal!]
  reward_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BorrowDailyReward_filter]
  or: [BorrowDailyReward_filter]
}

enum BorrowDailyReward_orderBy {
  id
  day
  day__id
  day__day
  day__dayStartTimestamp
  day__dayDate
  week
  week__id
  week__week
  week__weekStartTimestamp
  week__weekEndTimestamp
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  user
  user__id
  user__address
  user__vaultCount
  reward
}

type BorrowerEvent {
  id: ID!
  position: BorrowPosition!
  account: Account
  kind: String!
  pool: Pool!
  debtToken: Token!
  collateralToken: Token!
  debtTokenPriceUSD: BigDecimal!
  collateralTokenPriceUSD: BigDecimal!
  originationFee: BigDecimal
  debtBefore: BigDecimal!
  debtAfter: BigDecimal!
  debtDelta: BigDecimal!
  collateralBefore: BigDecimal!
  collateralAfter: BigDecimal!
  collateralDelta: BigDecimal!
  quoteRepaid: BigInt
  collateralPulled: BigInt
  amountBorrowed: BigInt
  collateralPledged: BigInt
  auction: Auction
  debtToCover: BigInt
  collateralForLiquidation: BigInt
  collateralPurachased: BigInt
  quoteUsedToPurchase: BigInt
  settledDebt: BigInt
  remainingCollateral: BigInt
  bondChange: BigInt
  isReward: Boolean
  takeIndex: BigInt
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input BorrowerEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: BorrowPosition_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  kind: String
  kind_not: String
  kind_gt: String
  kind_lt: String
  kind_gte: String
  kind_lte: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_contains: String
  kind_contains_nocase: String
  kind_not_contains: String
  kind_not_contains_nocase: String
  kind_starts_with: String
  kind_starts_with_nocase: String
  kind_not_starts_with: String
  kind_not_starts_with_nocase: String
  kind_ends_with: String
  kind_ends_with_nocase: String
  kind_not_ends_with: String
  kind_not_ends_with_nocase: String
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  debtToken: String
  debtToken_not: String
  debtToken_gt: String
  debtToken_lt: String
  debtToken_gte: String
  debtToken_lte: String
  debtToken_in: [String!]
  debtToken_not_in: [String!]
  debtToken_contains: String
  debtToken_contains_nocase: String
  debtToken_not_contains: String
  debtToken_not_contains_nocase: String
  debtToken_starts_with: String
  debtToken_starts_with_nocase: String
  debtToken_not_starts_with: String
  debtToken_not_starts_with_nocase: String
  debtToken_ends_with: String
  debtToken_ends_with_nocase: String
  debtToken_not_ends_with: String
  debtToken_not_ends_with_nocase: String
  debtToken_: Token_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Token_filter
  debtTokenPriceUSD: BigDecimal
  debtTokenPriceUSD_not: BigDecimal
  debtTokenPriceUSD_gt: BigDecimal
  debtTokenPriceUSD_lt: BigDecimal
  debtTokenPriceUSD_gte: BigDecimal
  debtTokenPriceUSD_lte: BigDecimal
  debtTokenPriceUSD_in: [BigDecimal!]
  debtTokenPriceUSD_not_in: [BigDecimal!]
  collateralTokenPriceUSD: BigDecimal
  collateralTokenPriceUSD_not: BigDecimal
  collateralTokenPriceUSD_gt: BigDecimal
  collateralTokenPriceUSD_lt: BigDecimal
  collateralTokenPriceUSD_gte: BigDecimal
  collateralTokenPriceUSD_lte: BigDecimal
  collateralTokenPriceUSD_in: [BigDecimal!]
  collateralTokenPriceUSD_not_in: [BigDecimal!]
  originationFee: BigDecimal
  originationFee_not: BigDecimal
  originationFee_gt: BigDecimal
  originationFee_lt: BigDecimal
  originationFee_gte: BigDecimal
  originationFee_lte: BigDecimal
  originationFee_in: [BigDecimal!]
  originationFee_not_in: [BigDecimal!]
  debtBefore: BigDecimal
  debtBefore_not: BigDecimal
  debtBefore_gt: BigDecimal
  debtBefore_lt: BigDecimal
  debtBefore_gte: BigDecimal
  debtBefore_lte: BigDecimal
  debtBefore_in: [BigDecimal!]
  debtBefore_not_in: [BigDecimal!]
  debtAfter: BigDecimal
  debtAfter_not: BigDecimal
  debtAfter_gt: BigDecimal
  debtAfter_lt: BigDecimal
  debtAfter_gte: BigDecimal
  debtAfter_lte: BigDecimal
  debtAfter_in: [BigDecimal!]
  debtAfter_not_in: [BigDecimal!]
  debtDelta: BigDecimal
  debtDelta_not: BigDecimal
  debtDelta_gt: BigDecimal
  debtDelta_lt: BigDecimal
  debtDelta_gte: BigDecimal
  debtDelta_lte: BigDecimal
  debtDelta_in: [BigDecimal!]
  debtDelta_not_in: [BigDecimal!]
  collateralBefore: BigDecimal
  collateralBefore_not: BigDecimal
  collateralBefore_gt: BigDecimal
  collateralBefore_lt: BigDecimal
  collateralBefore_gte: BigDecimal
  collateralBefore_lte: BigDecimal
  collateralBefore_in: [BigDecimal!]
  collateralBefore_not_in: [BigDecimal!]
  collateralAfter: BigDecimal
  collateralAfter_not: BigDecimal
  collateralAfter_gt: BigDecimal
  collateralAfter_lt: BigDecimal
  collateralAfter_gte: BigDecimal
  collateralAfter_lte: BigDecimal
  collateralAfter_in: [BigDecimal!]
  collateralAfter_not_in: [BigDecimal!]
  collateralDelta: BigDecimal
  collateralDelta_not: BigDecimal
  collateralDelta_gt: BigDecimal
  collateralDelta_lt: BigDecimal
  collateralDelta_gte: BigDecimal
  collateralDelta_lte: BigDecimal
  collateralDelta_in: [BigDecimal!]
  collateralDelta_not_in: [BigDecimal!]
  quoteRepaid: BigInt
  quoteRepaid_not: BigInt
  quoteRepaid_gt: BigInt
  quoteRepaid_lt: BigInt
  quoteRepaid_gte: BigInt
  quoteRepaid_lte: BigInt
  quoteRepaid_in: [BigInt!]
  quoteRepaid_not_in: [BigInt!]
  collateralPulled: BigInt
  collateralPulled_not: BigInt
  collateralPulled_gt: BigInt
  collateralPulled_lt: BigInt
  collateralPulled_gte: BigInt
  collateralPulled_lte: BigInt
  collateralPulled_in: [BigInt!]
  collateralPulled_not_in: [BigInt!]
  amountBorrowed: BigInt
  amountBorrowed_not: BigInt
  amountBorrowed_gt: BigInt
  amountBorrowed_lt: BigInt
  amountBorrowed_gte: BigInt
  amountBorrowed_lte: BigInt
  amountBorrowed_in: [BigInt!]
  amountBorrowed_not_in: [BigInt!]
  collateralPledged: BigInt
  collateralPledged_not: BigInt
  collateralPledged_gt: BigInt
  collateralPledged_lt: BigInt
  collateralPledged_gte: BigInt
  collateralPledged_lte: BigInt
  collateralPledged_in: [BigInt!]
  collateralPledged_not_in: [BigInt!]
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: Auction_filter
  debtToCover: BigInt
  debtToCover_not: BigInt
  debtToCover_gt: BigInt
  debtToCover_lt: BigInt
  debtToCover_gte: BigInt
  debtToCover_lte: BigInt
  debtToCover_in: [BigInt!]
  debtToCover_not_in: [BigInt!]
  collateralForLiquidation: BigInt
  collateralForLiquidation_not: BigInt
  collateralForLiquidation_gt: BigInt
  collateralForLiquidation_lt: BigInt
  collateralForLiquidation_gte: BigInt
  collateralForLiquidation_lte: BigInt
  collateralForLiquidation_in: [BigInt!]
  collateralForLiquidation_not_in: [BigInt!]
  collateralPurachased: BigInt
  collateralPurachased_not: BigInt
  collateralPurachased_gt: BigInt
  collateralPurachased_lt: BigInt
  collateralPurachased_gte: BigInt
  collateralPurachased_lte: BigInt
  collateralPurachased_in: [BigInt!]
  collateralPurachased_not_in: [BigInt!]
  quoteUsedToPurchase: BigInt
  quoteUsedToPurchase_not: BigInt
  quoteUsedToPurchase_gt: BigInt
  quoteUsedToPurchase_lt: BigInt
  quoteUsedToPurchase_gte: BigInt
  quoteUsedToPurchase_lte: BigInt
  quoteUsedToPurchase_in: [BigInt!]
  quoteUsedToPurchase_not_in: [BigInt!]
  settledDebt: BigInt
  settledDebt_not: BigInt
  settledDebt_gt: BigInt
  settledDebt_lt: BigInt
  settledDebt_gte: BigInt
  settledDebt_lte: BigInt
  settledDebt_in: [BigInt!]
  settledDebt_not_in: [BigInt!]
  remainingCollateral: BigInt
  remainingCollateral_not: BigInt
  remainingCollateral_gt: BigInt
  remainingCollateral_lt: BigInt
  remainingCollateral_gte: BigInt
  remainingCollateral_lte: BigInt
  remainingCollateral_in: [BigInt!]
  remainingCollateral_not_in: [BigInt!]
  bondChange: BigInt
  bondChange_not: BigInt
  bondChange_gt: BigInt
  bondChange_lt: BigInt
  bondChange_gte: BigInt
  bondChange_lte: BigInt
  bondChange_in: [BigInt!]
  bondChange_not_in: [BigInt!]
  isReward: Boolean
  isReward_not: Boolean
  isReward_in: [Boolean!]
  isReward_not_in: [Boolean!]
  takeIndex: BigInt
  takeIndex_not: BigInt
  takeIndex_gt: BigInt
  takeIndex_lt: BigInt
  takeIndex_gte: BigInt
  takeIndex_lte: BigInt
  takeIndex_in: [BigInt!]
  takeIndex_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BorrowerEvent_filter]
  or: [BorrowerEvent_filter]
}

enum BorrowerEvent_orderBy {
  id
  position
  position__id
  position__debt
  position__collateral
  position__t0Np_
  position__t0Debt
  position__liquidationPrice
  position__borrowDailyTokenBlocks
  position__borrowLastUpdateBlock
  position__borrowCumulativeDepositUSD
  position__borrowCumulativeDepositInQuoteToken
  position__borrowCumulativeDepositInCollateralToken
  position__borrowCumulativeWithdrawUSD
  position__borrowCumulativeWithdrawInQuoteToken
  position__borrowCumulativeWithdrawInCollateralToken
  position__borrowCumulativeCollateralDeposit
  position__borrowCumulativeCollateralWithdraw
  position__borrowCumulativeDebtDeposit
  position__borrowCumulativeDebtWithdraw
  position__borrowCumulativeFeesUSD
  position__borrowCumulativeFeesInQuoteToken
  position__borrowCumulativeFeesInCollateralToken
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  kind
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  debtToken
  debtToken__id
  debtToken__address
  debtToken__decimals
  debtToken__precision
  debtToken__symbol
  collateralToken
  collateralToken__id
  collateralToken__address
  collateralToken__decimals
  collateralToken__precision
  collateralToken__symbol
  debtTokenPriceUSD
  collateralTokenPriceUSD
  originationFee
  debtBefore
  debtAfter
  debtDelta
  collateralBefore
  collateralAfter
  collateralDelta
  quoteRepaid
  collateralPulled
  amountBorrowed
  collateralPledged
  auction
  auction__id
  auction__endOfGracePeriod
  auction__inLiquidation
  auction__kickTime
  auction__collateral
  auction__debtToCover
  auction__isCollateralized
  auction__price
  auction__neutralPrice
  auction__kicker
  auction__bondSize
  auction__referencePrice
  auction__hpbOnKick
  debtToCover
  collateralForLiquidation
  collateralPurachased
  quoteUsedToPurchase
  settledDebt
  remainingCollateral
  bondChange
  isReward
  takeIndex
  txHash
  blockNumber
  timestamp
}

type BorrowPosition {
  id: ID!
  pool: Pool!
  account: Account
  user: User
  debt: BigInt!
  collateral: BigInt!
  t0Np_: BigInt!
  t0Debt: BigInt!
  liquidationPrice: BigDecimal!
  borrowDailyTokenBlocks: BigInt!
  borrowLastUpdateBlock: BigInt!
  borrowCumulativeDepositUSD: BigDecimal!
  borrowCumulativeDepositInQuoteToken: BigDecimal!
  borrowCumulativeDepositInCollateralToken: BigDecimal!
  borrowCumulativeWithdrawUSD: BigDecimal!
  borrowCumulativeWithdrawInQuoteToken: BigDecimal!
  borrowCumulativeWithdrawInCollateralToken: BigDecimal!
  borrowCumulativeCollateralDeposit: BigDecimal!
  borrowCumulativeCollateralWithdraw: BigDecimal!
  borrowCumulativeDebtDeposit: BigDecimal!
  borrowCumulativeDebtWithdraw: BigDecimal!
  borrowCumulativeFeesUSD: BigDecimal!
  borrowCumulativeFeesInQuoteToken: BigDecimal!
  borrowCumulativeFeesInCollateralToken: BigDecimal!
  protocolEvents(skip: Int = 0, first: Int = 100, orderBy: BorrowerEvent_orderBy, orderDirection: OrderDirection, where: BorrowerEvent_filter): [BorrowerEvent!]
  oasisEvents(skip: Int = 0, first: Int = 100, orderBy: OasisEvent_orderBy, orderDirection: OrderDirection, where: OasisEvent_filter): [OasisEvent!]
  liquidations(skip: Int = 0, first: Int = 100, orderBy: Auction_orderBy, orderDirection: OrderDirection, where: Auction_filter): [Auction!]!
}

input BorrowPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  debt: BigInt
  debt_not: BigInt
  debt_gt: BigInt
  debt_lt: BigInt
  debt_gte: BigInt
  debt_lte: BigInt
  debt_in: [BigInt!]
  debt_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  t0Np_: BigInt
  t0Np__not: BigInt
  t0Np__gt: BigInt
  t0Np__lt: BigInt
  t0Np__gte: BigInt
  t0Np__lte: BigInt
  t0Np__in: [BigInt!]
  t0Np__not_in: [BigInt!]
  t0Debt: BigInt
  t0Debt_not: BigInt
  t0Debt_gt: BigInt
  t0Debt_lt: BigInt
  t0Debt_gte: BigInt
  t0Debt_lte: BigInt
  t0Debt_in: [BigInt!]
  t0Debt_not_in: [BigInt!]
  liquidationPrice: BigDecimal
  liquidationPrice_not: BigDecimal
  liquidationPrice_gt: BigDecimal
  liquidationPrice_lt: BigDecimal
  liquidationPrice_gte: BigDecimal
  liquidationPrice_lte: BigDecimal
  liquidationPrice_in: [BigDecimal!]
  liquidationPrice_not_in: [BigDecimal!]
  borrowDailyTokenBlocks: BigInt
  borrowDailyTokenBlocks_not: BigInt
  borrowDailyTokenBlocks_gt: BigInt
  borrowDailyTokenBlocks_lt: BigInt
  borrowDailyTokenBlocks_gte: BigInt
  borrowDailyTokenBlocks_lte: BigInt
  borrowDailyTokenBlocks_in: [BigInt!]
  borrowDailyTokenBlocks_not_in: [BigInt!]
  borrowLastUpdateBlock: BigInt
  borrowLastUpdateBlock_not: BigInt
  borrowLastUpdateBlock_gt: BigInt
  borrowLastUpdateBlock_lt: BigInt
  borrowLastUpdateBlock_gte: BigInt
  borrowLastUpdateBlock_lte: BigInt
  borrowLastUpdateBlock_in: [BigInt!]
  borrowLastUpdateBlock_not_in: [BigInt!]
  borrowCumulativeDepositUSD: BigDecimal
  borrowCumulativeDepositUSD_not: BigDecimal
  borrowCumulativeDepositUSD_gt: BigDecimal
  borrowCumulativeDepositUSD_lt: BigDecimal
  borrowCumulativeDepositUSD_gte: BigDecimal
  borrowCumulativeDepositUSD_lte: BigDecimal
  borrowCumulativeDepositUSD_in: [BigDecimal!]
  borrowCumulativeDepositUSD_not_in: [BigDecimal!]
  borrowCumulativeDepositInQuoteToken: BigDecimal
  borrowCumulativeDepositInQuoteToken_not: BigDecimal
  borrowCumulativeDepositInQuoteToken_gt: BigDecimal
  borrowCumulativeDepositInQuoteToken_lt: BigDecimal
  borrowCumulativeDepositInQuoteToken_gte: BigDecimal
  borrowCumulativeDepositInQuoteToken_lte: BigDecimal
  borrowCumulativeDepositInQuoteToken_in: [BigDecimal!]
  borrowCumulativeDepositInQuoteToken_not_in: [BigDecimal!]
  borrowCumulativeDepositInCollateralToken: BigDecimal
  borrowCumulativeDepositInCollateralToken_not: BigDecimal
  borrowCumulativeDepositInCollateralToken_gt: BigDecimal
  borrowCumulativeDepositInCollateralToken_lt: BigDecimal
  borrowCumulativeDepositInCollateralToken_gte: BigDecimal
  borrowCumulativeDepositInCollateralToken_lte: BigDecimal
  borrowCumulativeDepositInCollateralToken_in: [BigDecimal!]
  borrowCumulativeDepositInCollateralToken_not_in: [BigDecimal!]
  borrowCumulativeWithdrawUSD: BigDecimal
  borrowCumulativeWithdrawUSD_not: BigDecimal
  borrowCumulativeWithdrawUSD_gt: BigDecimal
  borrowCumulativeWithdrawUSD_lt: BigDecimal
  borrowCumulativeWithdrawUSD_gte: BigDecimal
  borrowCumulativeWithdrawUSD_lte: BigDecimal
  borrowCumulativeWithdrawUSD_in: [BigDecimal!]
  borrowCumulativeWithdrawUSD_not_in: [BigDecimal!]
  borrowCumulativeWithdrawInQuoteToken: BigDecimal
  borrowCumulativeWithdrawInQuoteToken_not: BigDecimal
  borrowCumulativeWithdrawInQuoteToken_gt: BigDecimal
  borrowCumulativeWithdrawInQuoteToken_lt: BigDecimal
  borrowCumulativeWithdrawInQuoteToken_gte: BigDecimal
  borrowCumulativeWithdrawInQuoteToken_lte: BigDecimal
  borrowCumulativeWithdrawInQuoteToken_in: [BigDecimal!]
  borrowCumulativeWithdrawInQuoteToken_not_in: [BigDecimal!]
  borrowCumulativeWithdrawInCollateralToken: BigDecimal
  borrowCumulativeWithdrawInCollateralToken_not: BigDecimal
  borrowCumulativeWithdrawInCollateralToken_gt: BigDecimal
  borrowCumulativeWithdrawInCollateralToken_lt: BigDecimal
  borrowCumulativeWithdrawInCollateralToken_gte: BigDecimal
  borrowCumulativeWithdrawInCollateralToken_lte: BigDecimal
  borrowCumulativeWithdrawInCollateralToken_in: [BigDecimal!]
  borrowCumulativeWithdrawInCollateralToken_not_in: [BigDecimal!]
  borrowCumulativeCollateralDeposit: BigDecimal
  borrowCumulativeCollateralDeposit_not: BigDecimal
  borrowCumulativeCollateralDeposit_gt: BigDecimal
  borrowCumulativeCollateralDeposit_lt: BigDecimal
  borrowCumulativeCollateralDeposit_gte: BigDecimal
  borrowCumulativeCollateralDeposit_lte: BigDecimal
  borrowCumulativeCollateralDeposit_in: [BigDecimal!]
  borrowCumulativeCollateralDeposit_not_in: [BigDecimal!]
  borrowCumulativeCollateralWithdraw: BigDecimal
  borrowCumulativeCollateralWithdraw_not: BigDecimal
  borrowCumulativeCollateralWithdraw_gt: BigDecimal
  borrowCumulativeCollateralWithdraw_lt: BigDecimal
  borrowCumulativeCollateralWithdraw_gte: BigDecimal
  borrowCumulativeCollateralWithdraw_lte: BigDecimal
  borrowCumulativeCollateralWithdraw_in: [BigDecimal!]
  borrowCumulativeCollateralWithdraw_not_in: [BigDecimal!]
  borrowCumulativeDebtDeposit: BigDecimal
  borrowCumulativeDebtDeposit_not: BigDecimal
  borrowCumulativeDebtDeposit_gt: BigDecimal
  borrowCumulativeDebtDeposit_lt: BigDecimal
  borrowCumulativeDebtDeposit_gte: BigDecimal
  borrowCumulativeDebtDeposit_lte: BigDecimal
  borrowCumulativeDebtDeposit_in: [BigDecimal!]
  borrowCumulativeDebtDeposit_not_in: [BigDecimal!]
  borrowCumulativeDebtWithdraw: BigDecimal
  borrowCumulativeDebtWithdraw_not: BigDecimal
  borrowCumulativeDebtWithdraw_gt: BigDecimal
  borrowCumulativeDebtWithdraw_lt: BigDecimal
  borrowCumulativeDebtWithdraw_gte: BigDecimal
  borrowCumulativeDebtWithdraw_lte: BigDecimal
  borrowCumulativeDebtWithdraw_in: [BigDecimal!]
  borrowCumulativeDebtWithdraw_not_in: [BigDecimal!]
  borrowCumulativeFeesUSD: BigDecimal
  borrowCumulativeFeesUSD_not: BigDecimal
  borrowCumulativeFeesUSD_gt: BigDecimal
  borrowCumulativeFeesUSD_lt: BigDecimal
  borrowCumulativeFeesUSD_gte: BigDecimal
  borrowCumulativeFeesUSD_lte: BigDecimal
  borrowCumulativeFeesUSD_in: [BigDecimal!]
  borrowCumulativeFeesUSD_not_in: [BigDecimal!]
  borrowCumulativeFeesInQuoteToken: BigDecimal
  borrowCumulativeFeesInQuoteToken_not: BigDecimal
  borrowCumulativeFeesInQuoteToken_gt: BigDecimal
  borrowCumulativeFeesInQuoteToken_lt: BigDecimal
  borrowCumulativeFeesInQuoteToken_gte: BigDecimal
  borrowCumulativeFeesInQuoteToken_lte: BigDecimal
  borrowCumulativeFeesInQuoteToken_in: [BigDecimal!]
  borrowCumulativeFeesInQuoteToken_not_in: [BigDecimal!]
  borrowCumulativeFeesInCollateralToken: BigDecimal
  borrowCumulativeFeesInCollateralToken_not: BigDecimal
  borrowCumulativeFeesInCollateralToken_gt: BigDecimal
  borrowCumulativeFeesInCollateralToken_lt: BigDecimal
  borrowCumulativeFeesInCollateralToken_gte: BigDecimal
  borrowCumulativeFeesInCollateralToken_lte: BigDecimal
  borrowCumulativeFeesInCollateralToken_in: [BigDecimal!]
  borrowCumulativeFeesInCollateralToken_not_in: [BigDecimal!]
  protocolEvents_: BorrowerEvent_filter
  oasisEvents_: OasisEvent_filter
  liquidations: [String!]
  liquidations_not: [String!]
  liquidations_contains: [String!]
  liquidations_contains_nocase: [String!]
  liquidations_not_contains: [String!]
  liquidations_not_contains_nocase: [String!]
  liquidations_: Auction_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BorrowPosition_filter]
  or: [BorrowPosition_filter]
}

enum BorrowPosition_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  user
  user__id
  user__address
  user__vaultCount
  debt
  collateral
  t0Np_
  t0Debt
  liquidationPrice
  borrowDailyTokenBlocks
  borrowLastUpdateBlock
  borrowCumulativeDepositUSD
  borrowCumulativeDepositInQuoteToken
  borrowCumulativeDepositInCollateralToken
  borrowCumulativeWithdrawUSD
  borrowCumulativeWithdrawInQuoteToken
  borrowCumulativeWithdrawInCollateralToken
  borrowCumulativeCollateralDeposit
  borrowCumulativeCollateralWithdraw
  borrowCumulativeDebtDeposit
  borrowCumulativeDebtWithdraw
  borrowCumulativeFeesUSD
  borrowCumulativeFeesInQuoteToken
  borrowCumulativeFeesInCollateralToken
  protocolEvents
  oasisEvents
  liquidations
}

type Bucket {
  id: ID!
  pool: Pool!
  price: BigInt
  index: BigInt
  quoteTokens: BigInt!
  collateral: BigInt!
  bucketLPs: BigInt!
  scale: BigInt!
  exchangeRate: BigInt
}

input Bucket_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  quoteTokens: BigInt
  quoteTokens_not: BigInt
  quoteTokens_gt: BigInt
  quoteTokens_lt: BigInt
  quoteTokens_gte: BigInt
  quoteTokens_lte: BigInt
  quoteTokens_in: [BigInt!]
  quoteTokens_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  bucketLPs: BigInt
  bucketLPs_not: BigInt
  bucketLPs_gt: BigInt
  bucketLPs_lt: BigInt
  bucketLPs_gte: BigInt
  bucketLPs_lte: BigInt
  bucketLPs_in: [BigInt!]
  bucketLPs_not_in: [BigInt!]
  scale: BigInt
  scale_not: BigInt
  scale_gt: BigInt
  scale_lt: BigInt
  scale_gte: BigInt
  scale_lte: BigInt
  scale_in: [BigInt!]
  scale_not_in: [BigInt!]
  exchangeRate: BigInt
  exchangeRate_not: BigInt
  exchangeRate_gt: BigInt
  exchangeRate_lt: BigInt
  exchangeRate_gte: BigInt
  exchangeRate_lte: BigInt
  exchangeRate_in: [BigInt!]
  exchangeRate_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bucket_filter]
  or: [Bucket_filter]
}

enum Bucket_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  price
  index
  quoteTokens
  collateral
  bucketLPs
  scale
  exchangeRate
}

scalar Bytes

type Claimed {
  id: Bytes!
  user: User!
  week: Week!
  amount: BigInt
  type: String!
}

input Claimed_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  week: String
  week_not: String
  week_gt: String
  week_lt: String
  week_gte: String
  week_lte: String
  week_in: [String!]
  week_not_in: [String!]
  week_contains: String
  week_contains_nocase: String
  week_not_contains: String
  week_not_contains_nocase: String
  week_starts_with: String
  week_starts_with_nocase: String
  week_not_starts_with: String
  week_not_starts_with_nocase: String
  week_ends_with: String
  week_ends_with_nocase: String
  week_not_ends_with: String
  week_not_ends_with_nocase: String
  week_: Week_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Claimed_filter]
  or: [Claimed_filter]
}

enum Claimed_orderBy {
  id
  user
  user__id
  user__address
  user__vaultCount
  week
  week__id
  week__week
  week__weekStartTimestamp
  week__weekEndTimestamp
  amount
  type
}

type CreatePositionEvent {
  id: Bytes!
  account: Account
  debtToken: Token!
  collateralToken: Token!
  positionType: String!
  protocol: String!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input CreatePositionEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  debtToken: String
  debtToken_not: String
  debtToken_gt: String
  debtToken_lt: String
  debtToken_gte: String
  debtToken_lte: String
  debtToken_in: [String!]
  debtToken_not_in: [String!]
  debtToken_contains: String
  debtToken_contains_nocase: String
  debtToken_not_contains: String
  debtToken_not_contains_nocase: String
  debtToken_starts_with: String
  debtToken_starts_with_nocase: String
  debtToken_not_starts_with: String
  debtToken_not_starts_with_nocase: String
  debtToken_ends_with: String
  debtToken_ends_with_nocase: String
  debtToken_not_ends_with: String
  debtToken_not_ends_with_nocase: String
  debtToken_: Token_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Token_filter
  positionType: String
  positionType_not: String
  positionType_gt: String
  positionType_lt: String
  positionType_gte: String
  positionType_lte: String
  positionType_in: [String!]
  positionType_not_in: [String!]
  positionType_contains: String
  positionType_contains_nocase: String
  positionType_not_contains: String
  positionType_not_contains_nocase: String
  positionType_starts_with: String
  positionType_starts_with_nocase: String
  positionType_not_starts_with: String
  positionType_not_starts_with_nocase: String
  positionType_ends_with: String
  positionType_ends_with_nocase: String
  positionType_not_ends_with: String
  positionType_not_ends_with_nocase: String
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CreatePositionEvent_filter]
  or: [CreatePositionEvent_filter]
}

enum CreatePositionEvent_orderBy {
  id
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  debtToken
  debtToken__id
  debtToken__address
  debtToken__decimals
  debtToken__precision
  debtToken__symbol
  collateralToken
  collateralToken__id
  collateralToken__address
  collateralToken__decimals
  collateralToken__precision
  collateralToken__symbol
  positionType
  protocol
  txHash
  blockNumber
  timestamp
}

type Day {
  id: ID!
  day: BigInt!
  dayStartTimestamp: BigInt!
  dayDate: String
  borrowDailyRewards(skip: Int = 0, first: Int = 100, orderBy: BorrowDailyReward_orderBy, orderDirection: OrderDirection, where: BorrowDailyReward_filter): [BorrowDailyReward!]
  earnDailyRewards(skip: Int = 0, first: Int = 100, orderBy: EarnDailyReward_orderBy, orderDirection: OrderDirection, where: EarnDailyReward_filter): [EarnDailyReward!]
  week: Week!
}

input Day_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  day: BigInt
  day_not: BigInt
  day_gt: BigInt
  day_lt: BigInt
  day_gte: BigInt
  day_lte: BigInt
  day_in: [BigInt!]
  day_not_in: [BigInt!]
  dayStartTimestamp: BigInt
  dayStartTimestamp_not: BigInt
  dayStartTimestamp_gt: BigInt
  dayStartTimestamp_lt: BigInt
  dayStartTimestamp_gte: BigInt
  dayStartTimestamp_lte: BigInt
  dayStartTimestamp_in: [BigInt!]
  dayStartTimestamp_not_in: [BigInt!]
  dayDate: String
  dayDate_not: String
  dayDate_gt: String
  dayDate_lt: String
  dayDate_gte: String
  dayDate_lte: String
  dayDate_in: [String!]
  dayDate_not_in: [String!]
  dayDate_contains: String
  dayDate_contains_nocase: String
  dayDate_not_contains: String
  dayDate_not_contains_nocase: String
  dayDate_starts_with: String
  dayDate_starts_with_nocase: String
  dayDate_not_starts_with: String
  dayDate_not_starts_with_nocase: String
  dayDate_ends_with: String
  dayDate_ends_with_nocase: String
  dayDate_not_ends_with: String
  dayDate_not_ends_with_nocase: String
  borrowDailyRewards_: BorrowDailyReward_filter
  earnDailyRewards_: EarnDailyReward_filter
  week: String
  week_not: String
  week_gt: String
  week_lt: String
  week_gte: String
  week_lte: String
  week_in: [String!]
  week_not_in: [String!]
  week_contains: String
  week_contains_nocase: String
  week_not_contains: String
  week_not_contains_nocase: String
  week_starts_with: String
  week_starts_with_nocase: String
  week_not_starts_with: String
  week_not_starts_with_nocase: String
  week_ends_with: String
  week_ends_with_nocase: String
  week_not_ends_with: String
  week_not_ends_with_nocase: String
  week_: Week_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Day_filter]
  or: [Day_filter]
}

enum Day_orderBy {
  id
  day
  dayStartTimestamp
  dayDate
  borrowDailyRewards
  earnDailyRewards
  week
  week__id
  week__week
  week__weekStartTimestamp
  week__weekEndTimestamp
}

type EarnDailyReward {
  id: ID!
  day: Day!
  week: Week!
  pool: Pool!
  account: Account
  user: User
  reward: BigDecimal!
}

input EarnDailyReward_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  day: String
  day_not: String
  day_gt: String
  day_lt: String
  day_gte: String
  day_lte: String
  day_in: [String!]
  day_not_in: [String!]
  day_contains: String
  day_contains_nocase: String
  day_not_contains: String
  day_not_contains_nocase: String
  day_starts_with: String
  day_starts_with_nocase: String
  day_not_starts_with: String
  day_not_starts_with_nocase: String
  day_ends_with: String
  day_ends_with_nocase: String
  day_not_ends_with: String
  day_not_ends_with_nocase: String
  day_: Day_filter
  week: String
  week_not: String
  week_gt: String
  week_lt: String
  week_gte: String
  week_lte: String
  week_in: [String!]
  week_not_in: [String!]
  week_contains: String
  week_contains_nocase: String
  week_not_contains: String
  week_not_contains_nocase: String
  week_starts_with: String
  week_starts_with_nocase: String
  week_not_starts_with: String
  week_not_starts_with_nocase: String
  week_ends_with: String
  week_ends_with_nocase: String
  week_not_ends_with: String
  week_not_ends_with_nocase: String
  week_: Week_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  reward: BigDecimal
  reward_not: BigDecimal
  reward_gt: BigDecimal
  reward_lt: BigDecimal
  reward_gte: BigDecimal
  reward_lte: BigDecimal
  reward_in: [BigDecimal!]
  reward_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EarnDailyReward_filter]
  or: [EarnDailyReward_filter]
}

enum EarnDailyReward_orderBy {
  id
  day
  day__id
  day__day
  day__dayStartTimestamp
  day__dayDate
  week
  week__id
  week__week
  week__weekStartTimestamp
  week__weekEndTimestamp
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  user
  user__id
  user__address
  user__vaultCount
  reward
}

type EarnPosition {
  id: ID!
  pool: Pool!
  account: Account
  user: User!
  nft: NFT
  earnPosition: EarnPositionBucket
  earnDailyTokenBlocks: BigInt!
  earnLastUpdateBlock: BigInt!
  earnIsEarning: Boolean!
  bucketPositions(skip: Int = 0, first: Int = 100, orderBy: EarnPositionBucket_orderBy, orderDirection: OrderDirection, where: EarnPositionBucket_filter): [EarnPositionBucket!]
  earnCumulativeDepositUSD: BigDecimal!
  earnCumulativeDepositInQuoteToken: BigDecimal!
  earnCumulativeDepositInCollateralToken: BigDecimal!
  earnCumulativeWithdrawUSD: BigDecimal!
  earnCumulativeWithdrawInQuoteToken: BigDecimal!
  earnCumulativeWithdrawInCollateralToken: BigDecimal!
  earnCumulativeFeesUSD: BigDecimal!
  earnCumulativeFeesInQuoteToken: BigDecimal!
  earnCumulativeFeesInCollateralToken: BigDecimal!
  earnCumulativeQuoteTokenDeposit: BigDecimal!
  earnCumulativeQuoteTokenWithdraw: BigDecimal!
  oasisEvents(skip: Int = 0, first: Int = 100, orderBy: OasisEvent_orderBy, orderDirection: OrderDirection, where: OasisEvent_filter): [OasisEvent!]
  protocolEvents(skip: Int = 0, first: Int = 100, orderBy: LenderEvent_orderBy, orderDirection: OrderDirection, where: LenderEvent_filter): [LenderEvent!]
}

input EarnPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  earnPosition: String
  earnPosition_not: String
  earnPosition_gt: String
  earnPosition_lt: String
  earnPosition_gte: String
  earnPosition_lte: String
  earnPosition_in: [String!]
  earnPosition_not_in: [String!]
  earnPosition_contains: String
  earnPosition_contains_nocase: String
  earnPosition_not_contains: String
  earnPosition_not_contains_nocase: String
  earnPosition_starts_with: String
  earnPosition_starts_with_nocase: String
  earnPosition_not_starts_with: String
  earnPosition_not_starts_with_nocase: String
  earnPosition_ends_with: String
  earnPosition_ends_with_nocase: String
  earnPosition_not_ends_with: String
  earnPosition_not_ends_with_nocase: String
  earnPosition_: EarnPositionBucket_filter
  earnDailyTokenBlocks: BigInt
  earnDailyTokenBlocks_not: BigInt
  earnDailyTokenBlocks_gt: BigInt
  earnDailyTokenBlocks_lt: BigInt
  earnDailyTokenBlocks_gte: BigInt
  earnDailyTokenBlocks_lte: BigInt
  earnDailyTokenBlocks_in: [BigInt!]
  earnDailyTokenBlocks_not_in: [BigInt!]
  earnLastUpdateBlock: BigInt
  earnLastUpdateBlock_not: BigInt
  earnLastUpdateBlock_gt: BigInt
  earnLastUpdateBlock_lt: BigInt
  earnLastUpdateBlock_gte: BigInt
  earnLastUpdateBlock_lte: BigInt
  earnLastUpdateBlock_in: [BigInt!]
  earnLastUpdateBlock_not_in: [BigInt!]
  earnIsEarning: Boolean
  earnIsEarning_not: Boolean
  earnIsEarning_in: [Boolean!]
  earnIsEarning_not_in: [Boolean!]
  bucketPositions_: EarnPositionBucket_filter
  earnCumulativeDepositUSD: BigDecimal
  earnCumulativeDepositUSD_not: BigDecimal
  earnCumulativeDepositUSD_gt: BigDecimal
  earnCumulativeDepositUSD_lt: BigDecimal
  earnCumulativeDepositUSD_gte: BigDecimal
  earnCumulativeDepositUSD_lte: BigDecimal
  earnCumulativeDepositUSD_in: [BigDecimal!]
  earnCumulativeDepositUSD_not_in: [BigDecimal!]
  earnCumulativeDepositInQuoteToken: BigDecimal
  earnCumulativeDepositInQuoteToken_not: BigDecimal
  earnCumulativeDepositInQuoteToken_gt: BigDecimal
  earnCumulativeDepositInQuoteToken_lt: BigDecimal
  earnCumulativeDepositInQuoteToken_gte: BigDecimal
  earnCumulativeDepositInQuoteToken_lte: BigDecimal
  earnCumulativeDepositInQuoteToken_in: [BigDecimal!]
  earnCumulativeDepositInQuoteToken_not_in: [BigDecimal!]
  earnCumulativeDepositInCollateralToken: BigDecimal
  earnCumulativeDepositInCollateralToken_not: BigDecimal
  earnCumulativeDepositInCollateralToken_gt: BigDecimal
  earnCumulativeDepositInCollateralToken_lt: BigDecimal
  earnCumulativeDepositInCollateralToken_gte: BigDecimal
  earnCumulativeDepositInCollateralToken_lte: BigDecimal
  earnCumulativeDepositInCollateralToken_in: [BigDecimal!]
  earnCumulativeDepositInCollateralToken_not_in: [BigDecimal!]
  earnCumulativeWithdrawUSD: BigDecimal
  earnCumulativeWithdrawUSD_not: BigDecimal
  earnCumulativeWithdrawUSD_gt: BigDecimal
  earnCumulativeWithdrawUSD_lt: BigDecimal
  earnCumulativeWithdrawUSD_gte: BigDecimal
  earnCumulativeWithdrawUSD_lte: BigDecimal
  earnCumulativeWithdrawUSD_in: [BigDecimal!]
  earnCumulativeWithdrawUSD_not_in: [BigDecimal!]
  earnCumulativeWithdrawInQuoteToken: BigDecimal
  earnCumulativeWithdrawInQuoteToken_not: BigDecimal
  earnCumulativeWithdrawInQuoteToken_gt: BigDecimal
  earnCumulativeWithdrawInQuoteToken_lt: BigDecimal
  earnCumulativeWithdrawInQuoteToken_gte: BigDecimal
  earnCumulativeWithdrawInQuoteToken_lte: BigDecimal
  earnCumulativeWithdrawInQuoteToken_in: [BigDecimal!]
  earnCumulativeWithdrawInQuoteToken_not_in: [BigDecimal!]
  earnCumulativeWithdrawInCollateralToken: BigDecimal
  earnCumulativeWithdrawInCollateralToken_not: BigDecimal
  earnCumulativeWithdrawInCollateralToken_gt: BigDecimal
  earnCumulativeWithdrawInCollateralToken_lt: BigDecimal
  earnCumulativeWithdrawInCollateralToken_gte: BigDecimal
  earnCumulativeWithdrawInCollateralToken_lte: BigDecimal
  earnCumulativeWithdrawInCollateralToken_in: [BigDecimal!]
  earnCumulativeWithdrawInCollateralToken_not_in: [BigDecimal!]
  earnCumulativeFeesUSD: BigDecimal
  earnCumulativeFeesUSD_not: BigDecimal
  earnCumulativeFeesUSD_gt: BigDecimal
  earnCumulativeFeesUSD_lt: BigDecimal
  earnCumulativeFeesUSD_gte: BigDecimal
  earnCumulativeFeesUSD_lte: BigDecimal
  earnCumulativeFeesUSD_in: [BigDecimal!]
  earnCumulativeFeesUSD_not_in: [BigDecimal!]
  earnCumulativeFeesInQuoteToken: BigDecimal
  earnCumulativeFeesInQuoteToken_not: BigDecimal
  earnCumulativeFeesInQuoteToken_gt: BigDecimal
  earnCumulativeFeesInQuoteToken_lt: BigDecimal
  earnCumulativeFeesInQuoteToken_gte: BigDecimal
  earnCumulativeFeesInQuoteToken_lte: BigDecimal
  earnCumulativeFeesInQuoteToken_in: [BigDecimal!]
  earnCumulativeFeesInQuoteToken_not_in: [BigDecimal!]
  earnCumulativeFeesInCollateralToken: BigDecimal
  earnCumulativeFeesInCollateralToken_not: BigDecimal
  earnCumulativeFeesInCollateralToken_gt: BigDecimal
  earnCumulativeFeesInCollateralToken_lt: BigDecimal
  earnCumulativeFeesInCollateralToken_gte: BigDecimal
  earnCumulativeFeesInCollateralToken_lte: BigDecimal
  earnCumulativeFeesInCollateralToken_in: [BigDecimal!]
  earnCumulativeFeesInCollateralToken_not_in: [BigDecimal!]
  earnCumulativeQuoteTokenDeposit: BigDecimal
  earnCumulativeQuoteTokenDeposit_not: BigDecimal
  earnCumulativeQuoteTokenDeposit_gt: BigDecimal
  earnCumulativeQuoteTokenDeposit_lt: BigDecimal
  earnCumulativeQuoteTokenDeposit_gte: BigDecimal
  earnCumulativeQuoteTokenDeposit_lte: BigDecimal
  earnCumulativeQuoteTokenDeposit_in: [BigDecimal!]
  earnCumulativeQuoteTokenDeposit_not_in: [BigDecimal!]
  earnCumulativeQuoteTokenWithdraw: BigDecimal
  earnCumulativeQuoteTokenWithdraw_not: BigDecimal
  earnCumulativeQuoteTokenWithdraw_gt: BigDecimal
  earnCumulativeQuoteTokenWithdraw_lt: BigDecimal
  earnCumulativeQuoteTokenWithdraw_gte: BigDecimal
  earnCumulativeQuoteTokenWithdraw_lte: BigDecimal
  earnCumulativeQuoteTokenWithdraw_in: [BigDecimal!]
  earnCumulativeQuoteTokenWithdraw_not_in: [BigDecimal!]
  oasisEvents_: OasisEvent_filter
  protocolEvents_: LenderEvent_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EarnPosition_filter]
  or: [EarnPosition_filter]
}

enum EarnPosition_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  user
  user__id
  user__address
  user__vaultCount
  nft
  nft__id
  nft__tokenId
  nft__staked
  nft__currentReward
  earnPosition
  earnPosition__id
  earnPosition__index
  earnPosition__lps
  earnPosition__depositTime
  earnDailyTokenBlocks
  earnLastUpdateBlock
  earnIsEarning
  bucketPositions
  earnCumulativeDepositUSD
  earnCumulativeDepositInQuoteToken
  earnCumulativeDepositInCollateralToken
  earnCumulativeWithdrawUSD
  earnCumulativeWithdrawInQuoteToken
  earnCumulativeWithdrawInCollateralToken
  earnCumulativeFeesUSD
  earnCumulativeFeesInQuoteToken
  earnCumulativeFeesInCollateralToken
  earnCumulativeQuoteTokenDeposit
  earnCumulativeQuoteTokenWithdraw
  oasisEvents
  protocolEvents
}

type EarnPositionBucket {
  id: ID!
  pool: Pool!
  index: BigInt!
  account: Account
  user: User!
  lps: BigInt!
  depositTime: BigInt!
  nft: NFT
  position: EarnPosition!
  protocolEvents(skip: Int = 0, first: Int = 100, orderBy: LenderEvent_orderBy, orderDirection: OrderDirection, where: LenderEvent_filter): [LenderEvent!]
}

input EarnPositionBucket_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  lps: BigInt
  lps_not: BigInt
  lps_gt: BigInt
  lps_lt: BigInt
  lps_gte: BigInt
  lps_lte: BigInt
  lps_in: [BigInt!]
  lps_not_in: [BigInt!]
  depositTime: BigInt
  depositTime_not: BigInt
  depositTime_gt: BigInt
  depositTime_lt: BigInt
  depositTime_gte: BigInt
  depositTime_lte: BigInt
  depositTime_in: [BigInt!]
  depositTime_not_in: [BigInt!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFT_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: EarnPosition_filter
  protocolEvents_: LenderEvent_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EarnPositionBucket_filter]
  or: [EarnPositionBucket_filter]
}

enum EarnPositionBucket_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  index
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  user
  user__id
  user__address
  user__vaultCount
  lps
  depositTime
  nft
  nft__id
  nft__tokenId
  nft__staked
  nft__currentReward
  position
  position__id
  position__earnDailyTokenBlocks
  position__earnLastUpdateBlock
  position__earnIsEarning
  position__earnCumulativeDepositUSD
  position__earnCumulativeDepositInQuoteToken
  position__earnCumulativeDepositInCollateralToken
  position__earnCumulativeWithdrawUSD
  position__earnCumulativeWithdrawInQuoteToken
  position__earnCumulativeWithdrawInCollateralToken
  position__earnCumulativeFeesUSD
  position__earnCumulativeFeesInQuoteToken
  position__earnCumulativeFeesInCollateralToken
  position__earnCumulativeQuoteTokenDeposit
  position__earnCumulativeQuoteTokenWithdraw
  protocolEvents
}

type FeePaid {
  """
  id is a tx_hash-actionLogIndex
  it uses action log index to easily combine all swap events into one
  
  """
  id: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  token: Bytes!
}

input FeePaid_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  beneficiary: Bytes
  beneficiary_not: Bytes
  beneficiary_gt: Bytes
  beneficiary_lt: Bytes
  beneficiary_gte: Bytes
  beneficiary_lte: Bytes
  beneficiary_in: [Bytes!]
  beneficiary_not_in: [Bytes!]
  beneficiary_contains: Bytes
  beneficiary_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeePaid_filter]
  or: [FeePaid_filter]
}

enum FeePaid_orderBy {
  id
  beneficiary
  amount
  token
}

"""
8 bytes signed integer

"""
scalar Int8

type LenderEvent {
  id: ID!
  position: EarnPositionBucket!
  earnPosition: EarnPosition!
  account: Account
  kind: String!
  pool: Pool!
  quoteToken: Token!
  collateralToken: Token!
  quoteTokenPriceUSD: BigDecimal!
  collateralTokenPriceUSD: BigDecimal!
  quoteBefore: BigDecimal!
  quoteAfter: BigDecimal!
  quoteDelta: BigDecimal!
  lender: String
  index: BigInt
  amount: BigInt
  lup: BigInt
  lpAwarded: BigInt
  from: BigInt
  to: BigInt
  lpRedeemedFrom: BigInt
  lpAwardedTo: BigInt
  lpRedeemed: BigInt
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input LenderEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: EarnPositionBucket_filter
  earnPosition: String
  earnPosition_not: String
  earnPosition_gt: String
  earnPosition_lt: String
  earnPosition_gte: String
  earnPosition_lte: String
  earnPosition_in: [String!]
  earnPosition_not_in: [String!]
  earnPosition_contains: String
  earnPosition_contains_nocase: String
  earnPosition_not_contains: String
  earnPosition_not_contains_nocase: String
  earnPosition_starts_with: String
  earnPosition_starts_with_nocase: String
  earnPosition_not_starts_with: String
  earnPosition_not_starts_with_nocase: String
  earnPosition_ends_with: String
  earnPosition_ends_with_nocase: String
  earnPosition_not_ends_with: String
  earnPosition_not_ends_with_nocase: String
  earnPosition_: EarnPosition_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  kind: String
  kind_not: String
  kind_gt: String
  kind_lt: String
  kind_gte: String
  kind_lte: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_contains: String
  kind_contains_nocase: String
  kind_not_contains: String
  kind_not_contains_nocase: String
  kind_starts_with: String
  kind_starts_with_nocase: String
  kind_not_starts_with: String
  kind_not_starts_with_nocase: String
  kind_ends_with: String
  kind_ends_with_nocase: String
  kind_not_ends_with: String
  kind_not_ends_with_nocase: String
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  quoteToken: String
  quoteToken_not: String
  quoteToken_gt: String
  quoteToken_lt: String
  quoteToken_gte: String
  quoteToken_lte: String
  quoteToken_in: [String!]
  quoteToken_not_in: [String!]
  quoteToken_contains: String
  quoteToken_contains_nocase: String
  quoteToken_not_contains: String
  quoteToken_not_contains_nocase: String
  quoteToken_starts_with: String
  quoteToken_starts_with_nocase: String
  quoteToken_not_starts_with: String
  quoteToken_not_starts_with_nocase: String
  quoteToken_ends_with: String
  quoteToken_ends_with_nocase: String
  quoteToken_not_ends_with: String
  quoteToken_not_ends_with_nocase: String
  quoteToken_: Token_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Token_filter
  quoteTokenPriceUSD: BigDecimal
  quoteTokenPriceUSD_not: BigDecimal
  quoteTokenPriceUSD_gt: BigDecimal
  quoteTokenPriceUSD_lt: BigDecimal
  quoteTokenPriceUSD_gte: BigDecimal
  quoteTokenPriceUSD_lte: BigDecimal
  quoteTokenPriceUSD_in: [BigDecimal!]
  quoteTokenPriceUSD_not_in: [BigDecimal!]
  collateralTokenPriceUSD: BigDecimal
  collateralTokenPriceUSD_not: BigDecimal
  collateralTokenPriceUSD_gt: BigDecimal
  collateralTokenPriceUSD_lt: BigDecimal
  collateralTokenPriceUSD_gte: BigDecimal
  collateralTokenPriceUSD_lte: BigDecimal
  collateralTokenPriceUSD_in: [BigDecimal!]
  collateralTokenPriceUSD_not_in: [BigDecimal!]
  quoteBefore: BigDecimal
  quoteBefore_not: BigDecimal
  quoteBefore_gt: BigDecimal
  quoteBefore_lt: BigDecimal
  quoteBefore_gte: BigDecimal
  quoteBefore_lte: BigDecimal
  quoteBefore_in: [BigDecimal!]
  quoteBefore_not_in: [BigDecimal!]
  quoteAfter: BigDecimal
  quoteAfter_not: BigDecimal
  quoteAfter_gt: BigDecimal
  quoteAfter_lt: BigDecimal
  quoteAfter_gte: BigDecimal
  quoteAfter_lte: BigDecimal
  quoteAfter_in: [BigDecimal!]
  quoteAfter_not_in: [BigDecimal!]
  quoteDelta: BigDecimal
  quoteDelta_not: BigDecimal
  quoteDelta_gt: BigDecimal
  quoteDelta_lt: BigDecimal
  quoteDelta_gte: BigDecimal
  quoteDelta_lte: BigDecimal
  quoteDelta_in: [BigDecimal!]
  quoteDelta_not_in: [BigDecimal!]
  lender: String
  lender_not: String
  lender_gt: String
  lender_lt: String
  lender_gte: String
  lender_lte: String
  lender_in: [String!]
  lender_not_in: [String!]
  lender_contains: String
  lender_contains_nocase: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  lup: BigInt
  lup_not: BigInt
  lup_gt: BigInt
  lup_lt: BigInt
  lup_gte: BigInt
  lup_lte: BigInt
  lup_in: [BigInt!]
  lup_not_in: [BigInt!]
  lpAwarded: BigInt
  lpAwarded_not: BigInt
  lpAwarded_gt: BigInt
  lpAwarded_lt: BigInt
  lpAwarded_gte: BigInt
  lpAwarded_lte: BigInt
  lpAwarded_in: [BigInt!]
  lpAwarded_not_in: [BigInt!]
  from: BigInt
  from_not: BigInt
  from_gt: BigInt
  from_lt: BigInt
  from_gte: BigInt
  from_lte: BigInt
  from_in: [BigInt!]
  from_not_in: [BigInt!]
  to: BigInt
  to_not: BigInt
  to_gt: BigInt
  to_lt: BigInt
  to_gte: BigInt
  to_lte: BigInt
  to_in: [BigInt!]
  to_not_in: [BigInt!]
  lpRedeemedFrom: BigInt
  lpRedeemedFrom_not: BigInt
  lpRedeemedFrom_gt: BigInt
  lpRedeemedFrom_lt: BigInt
  lpRedeemedFrom_gte: BigInt
  lpRedeemedFrom_lte: BigInt
  lpRedeemedFrom_in: [BigInt!]
  lpRedeemedFrom_not_in: [BigInt!]
  lpAwardedTo: BigInt
  lpAwardedTo_not: BigInt
  lpAwardedTo_gt: BigInt
  lpAwardedTo_lt: BigInt
  lpAwardedTo_gte: BigInt
  lpAwardedTo_lte: BigInt
  lpAwardedTo_in: [BigInt!]
  lpAwardedTo_not_in: [BigInt!]
  lpRedeemed: BigInt
  lpRedeemed_not: BigInt
  lpRedeemed_gt: BigInt
  lpRedeemed_lt: BigInt
  lpRedeemed_gte: BigInt
  lpRedeemed_lte: BigInt
  lpRedeemed_in: [BigInt!]
  lpRedeemed_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LenderEvent_filter]
  or: [LenderEvent_filter]
}

enum LenderEvent_orderBy {
  id
  position
  position__id
  position__index
  position__lps
  position__depositTime
  earnPosition
  earnPosition__id
  earnPosition__earnDailyTokenBlocks
  earnPosition__earnLastUpdateBlock
  earnPosition__earnIsEarning
  earnPosition__earnCumulativeDepositUSD
  earnPosition__earnCumulativeDepositInQuoteToken
  earnPosition__earnCumulativeDepositInCollateralToken
  earnPosition__earnCumulativeWithdrawUSD
  earnPosition__earnCumulativeWithdrawInQuoteToken
  earnPosition__earnCumulativeWithdrawInCollateralToken
  earnPosition__earnCumulativeFeesUSD
  earnPosition__earnCumulativeFeesInQuoteToken
  earnPosition__earnCumulativeFeesInCollateralToken
  earnPosition__earnCumulativeQuoteTokenDeposit
  earnPosition__earnCumulativeQuoteTokenWithdraw
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  kind
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  quoteToken
  quoteToken__id
  quoteToken__address
  quoteToken__decimals
  quoteToken__precision
  quoteToken__symbol
  collateralToken
  collateralToken__id
  collateralToken__address
  collateralToken__decimals
  collateralToken__precision
  collateralToken__symbol
  quoteTokenPriceUSD
  collateralTokenPriceUSD
  quoteBefore
  quoteAfter
  quoteDelta
  lender
  index
  amount
  lup
  lpAwarded
  from
  to
  lpRedeemedFrom
  lpAwardedTo
  lpRedeemed
  txHash
  blockNumber
  timestamp
}

type ListOfPool {
  id: ID!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
}

input ListOfPool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pools: [String!]
  pools_not: [String!]
  pools_contains: [String!]
  pools_contains_nocase: [String!]
  pools_not_contains: [String!]
  pools_not_contains_nocase: [String!]
  pools_: Pool_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ListOfPool_filter]
  or: [ListOfPool_filter]
}

enum ListOfPool_orderBy {
  id
  pools
}

type NFT {
  id: ID!
  tokenId: BigInt!
  user: User
  account: Account
  pool: Pool!
  buckets(skip: Int = 0, first: Int = 100, orderBy: EarnPositionBucket_orderBy, orderDirection: OrderDirection, where: EarnPositionBucket_filter): [EarnPositionBucket!]
  staked: Boolean!
  currentReward: BigInt!
}

input NFT_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  buckets_: EarnPositionBucket_filter
  staked: Boolean
  staked_not: Boolean
  staked_in: [Boolean!]
  staked_not_in: [Boolean!]
  currentReward: BigInt
  currentReward_not: BigInt
  currentReward_gt: BigInt
  currentReward_lt: BigInt
  currentReward_gte: BigInt
  currentReward_lte: BigInt
  currentReward_in: [BigInt!]
  currentReward_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NFT_filter]
  or: [NFT_filter]
}

enum NFT_orderBy {
  id
  tokenId
  user
  user__id
  user__address
  user__vaultCount
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  buckets
  staked
  currentReward
}

type OasisEvent {
  id: Bytes!
  kind: String!
  isOpen: Boolean
  account: Account!
  earnPosition: EarnPosition
  borrowPosition: BorrowPosition
  pool: Pool
  debtToken: Token
  debtAddress: Bytes!
  debtBefore: BigDecimal!
  debtAfter: BigDecimal!
  debtDelta: BigDecimal!
  debtTokenPriceUSD: BigDecimal!
  collateralToken: Token
  collateralAddress: Bytes!
  collateralBefore: BigDecimal!
  collateralAfter: BigDecimal!
  collateralDelta: BigDecimal!
  collateralTokenPriceUSD: BigDecimal!
  debtOraclePrice: BigDecimal!
  collateralOraclePrice: BigDecimal!
  swapFromToken: Bytes
  swapToToken: Bytes
  swapFromAmount: BigDecimal
  swapToAmount: BigDecimal
  marketPrice: BigDecimal
  depositTransfers(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]!
  depositedUSD: BigDecimal
  depositedInQuoteToken: BigDecimal!
  withdrawTransfers(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]!
  withdrawnUSD: BigDecimal
  withdrawnInQuoteToken: BigDecimal!
  oasisFeeToken: Bytes
  oasisFee: BigDecimal!
  oasisFeeUSD: BigDecimal!
  oasisFeeInQuoteToken: BigDecimal!
  oasisFeeInCollateralToken: BigDecimal!
  gasUsed: BigInt!
  gasPrice: BigInt!
  gasFeeUSD: BigDecimal!
  gasFeeInQuoteToken: BigDecimal!
  gasFeeInCollateralToken: BigDecimal!
  totalFee: BigDecimal!
  totalFeeInQuoteToken: BigDecimal!
  totalFeeInCollateralToken: BigDecimal!
  totalFeeUSD: BigDecimal!
  multipleBefore: BigDecimal
  multipleAfter: BigDecimal
  netValueBefore: BigDecimal
  netValueAfter: BigDecimal
  ltvBefore: BigDecimal
  ltvAfter: BigDecimal
  liquidationPriceBefore: BigDecimal!
  liquidationPriceAfter: BigDecimal!
  originationFee: BigDecimal!
  originationFeeUSD: BigDecimal!
  originationFeeInQuoteToken: BigDecimal!
  originationFeeInCollateralToken: BigDecimal!
  interestRate: BigInt
  quoteTokensDelta: BigDecimal
  quoteTokensBefore: BigDecimal
  quoteTokensAfter: BigDecimal
  quoteTokensMoved: BigDecimal
  collateralLpsRemoved: BigDecimal
  moveQuoteFromIndex: BigInt
  moveQuoteToIndex: BigInt
  addOrRemoveIndex: BigInt
  ethPrice: BigDecimal!
  timestamp: BigInt!
  blockNumber: BigInt!
  txHash: Bytes!
}

input OasisEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  kind: String
  kind_not: String
  kind_gt: String
  kind_lt: String
  kind_gte: String
  kind_lte: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_contains: String
  kind_contains_nocase: String
  kind_not_contains: String
  kind_not_contains_nocase: String
  kind_starts_with: String
  kind_starts_with_nocase: String
  kind_not_starts_with: String
  kind_not_starts_with_nocase: String
  kind_ends_with: String
  kind_ends_with_nocase: String
  kind_not_ends_with: String
  kind_not_ends_with_nocase: String
  isOpen: Boolean
  isOpen_not: Boolean
  isOpen_in: [Boolean!]
  isOpen_not_in: [Boolean!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  earnPosition: String
  earnPosition_not: String
  earnPosition_gt: String
  earnPosition_lt: String
  earnPosition_gte: String
  earnPosition_lte: String
  earnPosition_in: [String!]
  earnPosition_not_in: [String!]
  earnPosition_contains: String
  earnPosition_contains_nocase: String
  earnPosition_not_contains: String
  earnPosition_not_contains_nocase: String
  earnPosition_starts_with: String
  earnPosition_starts_with_nocase: String
  earnPosition_not_starts_with: String
  earnPosition_not_starts_with_nocase: String
  earnPosition_ends_with: String
  earnPosition_ends_with_nocase: String
  earnPosition_not_ends_with: String
  earnPosition_not_ends_with_nocase: String
  earnPosition_: EarnPosition_filter
  borrowPosition: String
  borrowPosition_not: String
  borrowPosition_gt: String
  borrowPosition_lt: String
  borrowPosition_gte: String
  borrowPosition_lte: String
  borrowPosition_in: [String!]
  borrowPosition_not_in: [String!]
  borrowPosition_contains: String
  borrowPosition_contains_nocase: String
  borrowPosition_not_contains: String
  borrowPosition_not_contains_nocase: String
  borrowPosition_starts_with: String
  borrowPosition_starts_with_nocase: String
  borrowPosition_not_starts_with: String
  borrowPosition_not_starts_with_nocase: String
  borrowPosition_ends_with: String
  borrowPosition_ends_with_nocase: String
  borrowPosition_not_ends_with: String
  borrowPosition_not_ends_with_nocase: String
  borrowPosition_: BorrowPosition_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  debtToken: String
  debtToken_not: String
  debtToken_gt: String
  debtToken_lt: String
  debtToken_gte: String
  debtToken_lte: String
  debtToken_in: [String!]
  debtToken_not_in: [String!]
  debtToken_contains: String
  debtToken_contains_nocase: String
  debtToken_not_contains: String
  debtToken_not_contains_nocase: String
  debtToken_starts_with: String
  debtToken_starts_with_nocase: String
  debtToken_not_starts_with: String
  debtToken_not_starts_with_nocase: String
  debtToken_ends_with: String
  debtToken_ends_with_nocase: String
  debtToken_not_ends_with: String
  debtToken_not_ends_with_nocase: String
  debtToken_: Token_filter
  debtAddress: Bytes
  debtAddress_not: Bytes
  debtAddress_gt: Bytes
  debtAddress_lt: Bytes
  debtAddress_gte: Bytes
  debtAddress_lte: Bytes
  debtAddress_in: [Bytes!]
  debtAddress_not_in: [Bytes!]
  debtAddress_contains: Bytes
  debtAddress_not_contains: Bytes
  debtBefore: BigDecimal
  debtBefore_not: BigDecimal
  debtBefore_gt: BigDecimal
  debtBefore_lt: BigDecimal
  debtBefore_gte: BigDecimal
  debtBefore_lte: BigDecimal
  debtBefore_in: [BigDecimal!]
  debtBefore_not_in: [BigDecimal!]
  debtAfter: BigDecimal
  debtAfter_not: BigDecimal
  debtAfter_gt: BigDecimal
  debtAfter_lt: BigDecimal
  debtAfter_gte: BigDecimal
  debtAfter_lte: BigDecimal
  debtAfter_in: [BigDecimal!]
  debtAfter_not_in: [BigDecimal!]
  debtDelta: BigDecimal
  debtDelta_not: BigDecimal
  debtDelta_gt: BigDecimal
  debtDelta_lt: BigDecimal
  debtDelta_gte: BigDecimal
  debtDelta_lte: BigDecimal
  debtDelta_in: [BigDecimal!]
  debtDelta_not_in: [BigDecimal!]
  debtTokenPriceUSD: BigDecimal
  debtTokenPriceUSD_not: BigDecimal
  debtTokenPriceUSD_gt: BigDecimal
  debtTokenPriceUSD_lt: BigDecimal
  debtTokenPriceUSD_gte: BigDecimal
  debtTokenPriceUSD_lte: BigDecimal
  debtTokenPriceUSD_in: [BigDecimal!]
  debtTokenPriceUSD_not_in: [BigDecimal!]
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Token_filter
  collateralAddress: Bytes
  collateralAddress_not: Bytes
  collateralAddress_gt: Bytes
  collateralAddress_lt: Bytes
  collateralAddress_gte: Bytes
  collateralAddress_lte: Bytes
  collateralAddress_in: [Bytes!]
  collateralAddress_not_in: [Bytes!]
  collateralAddress_contains: Bytes
  collateralAddress_not_contains: Bytes
  collateralBefore: BigDecimal
  collateralBefore_not: BigDecimal
  collateralBefore_gt: BigDecimal
  collateralBefore_lt: BigDecimal
  collateralBefore_gte: BigDecimal
  collateralBefore_lte: BigDecimal
  collateralBefore_in: [BigDecimal!]
  collateralBefore_not_in: [BigDecimal!]
  collateralAfter: BigDecimal
  collateralAfter_not: BigDecimal
  collateralAfter_gt: BigDecimal
  collateralAfter_lt: BigDecimal
  collateralAfter_gte: BigDecimal
  collateralAfter_lte: BigDecimal
  collateralAfter_in: [BigDecimal!]
  collateralAfter_not_in: [BigDecimal!]
  collateralDelta: BigDecimal
  collateralDelta_not: BigDecimal
  collateralDelta_gt: BigDecimal
  collateralDelta_lt: BigDecimal
  collateralDelta_gte: BigDecimal
  collateralDelta_lte: BigDecimal
  collateralDelta_in: [BigDecimal!]
  collateralDelta_not_in: [BigDecimal!]
  collateralTokenPriceUSD: BigDecimal
  collateralTokenPriceUSD_not: BigDecimal
  collateralTokenPriceUSD_gt: BigDecimal
  collateralTokenPriceUSD_lt: BigDecimal
  collateralTokenPriceUSD_gte: BigDecimal
  collateralTokenPriceUSD_lte: BigDecimal
  collateralTokenPriceUSD_in: [BigDecimal!]
  collateralTokenPriceUSD_not_in: [BigDecimal!]
  debtOraclePrice: BigDecimal
  debtOraclePrice_not: BigDecimal
  debtOraclePrice_gt: BigDecimal
  debtOraclePrice_lt: BigDecimal
  debtOraclePrice_gte: BigDecimal
  debtOraclePrice_lte: BigDecimal
  debtOraclePrice_in: [BigDecimal!]
  debtOraclePrice_not_in: [BigDecimal!]
  collateralOraclePrice: BigDecimal
  collateralOraclePrice_not: BigDecimal
  collateralOraclePrice_gt: BigDecimal
  collateralOraclePrice_lt: BigDecimal
  collateralOraclePrice_gte: BigDecimal
  collateralOraclePrice_lte: BigDecimal
  collateralOraclePrice_in: [BigDecimal!]
  collateralOraclePrice_not_in: [BigDecimal!]
  swapFromToken: Bytes
  swapFromToken_not: Bytes
  swapFromToken_gt: Bytes
  swapFromToken_lt: Bytes
  swapFromToken_gte: Bytes
  swapFromToken_lte: Bytes
  swapFromToken_in: [Bytes!]
  swapFromToken_not_in: [Bytes!]
  swapFromToken_contains: Bytes
  swapFromToken_not_contains: Bytes
  swapToToken: Bytes
  swapToToken_not: Bytes
  swapToToken_gt: Bytes
  swapToToken_lt: Bytes
  swapToToken_gte: Bytes
  swapToToken_lte: Bytes
  swapToToken_in: [Bytes!]
  swapToToken_not_in: [Bytes!]
  swapToToken_contains: Bytes
  swapToToken_not_contains: Bytes
  swapFromAmount: BigDecimal
  swapFromAmount_not: BigDecimal
  swapFromAmount_gt: BigDecimal
  swapFromAmount_lt: BigDecimal
  swapFromAmount_gte: BigDecimal
  swapFromAmount_lte: BigDecimal
  swapFromAmount_in: [BigDecimal!]
  swapFromAmount_not_in: [BigDecimal!]
  swapToAmount: BigDecimal
  swapToAmount_not: BigDecimal
  swapToAmount_gt: BigDecimal
  swapToAmount_lt: BigDecimal
  swapToAmount_gte: BigDecimal
  swapToAmount_lte: BigDecimal
  swapToAmount_in: [BigDecimal!]
  swapToAmount_not_in: [BigDecimal!]
  marketPrice: BigDecimal
  marketPrice_not: BigDecimal
  marketPrice_gt: BigDecimal
  marketPrice_lt: BigDecimal
  marketPrice_gte: BigDecimal
  marketPrice_lte: BigDecimal
  marketPrice_in: [BigDecimal!]
  marketPrice_not_in: [BigDecimal!]
  depositTransfers: [String!]
  depositTransfers_not: [String!]
  depositTransfers_contains: [String!]
  depositTransfers_contains_nocase: [String!]
  depositTransfers_not_contains: [String!]
  depositTransfers_not_contains_nocase: [String!]
  depositTransfers_: Transfer_filter
  depositedUSD: BigDecimal
  depositedUSD_not: BigDecimal
  depositedUSD_gt: BigDecimal
  depositedUSD_lt: BigDecimal
  depositedUSD_gte: BigDecimal
  depositedUSD_lte: BigDecimal
  depositedUSD_in: [BigDecimal!]
  depositedUSD_not_in: [BigDecimal!]
  depositedInQuoteToken: BigDecimal
  depositedInQuoteToken_not: BigDecimal
  depositedInQuoteToken_gt: BigDecimal
  depositedInQuoteToken_lt: BigDecimal
  depositedInQuoteToken_gte: BigDecimal
  depositedInQuoteToken_lte: BigDecimal
  depositedInQuoteToken_in: [BigDecimal!]
  depositedInQuoteToken_not_in: [BigDecimal!]
  withdrawTransfers: [String!]
  withdrawTransfers_not: [String!]
  withdrawTransfers_contains: [String!]
  withdrawTransfers_contains_nocase: [String!]
  withdrawTransfers_not_contains: [String!]
  withdrawTransfers_not_contains_nocase: [String!]
  withdrawTransfers_: Transfer_filter
  withdrawnUSD: BigDecimal
  withdrawnUSD_not: BigDecimal
  withdrawnUSD_gt: BigDecimal
  withdrawnUSD_lt: BigDecimal
  withdrawnUSD_gte: BigDecimal
  withdrawnUSD_lte: BigDecimal
  withdrawnUSD_in: [BigDecimal!]
  withdrawnUSD_not_in: [BigDecimal!]
  withdrawnInQuoteToken: BigDecimal
  withdrawnInQuoteToken_not: BigDecimal
  withdrawnInQuoteToken_gt: BigDecimal
  withdrawnInQuoteToken_lt: BigDecimal
  withdrawnInQuoteToken_gte: BigDecimal
  withdrawnInQuoteToken_lte: BigDecimal
  withdrawnInQuoteToken_in: [BigDecimal!]
  withdrawnInQuoteToken_not_in: [BigDecimal!]
  oasisFeeToken: Bytes
  oasisFeeToken_not: Bytes
  oasisFeeToken_gt: Bytes
  oasisFeeToken_lt: Bytes
  oasisFeeToken_gte: Bytes
  oasisFeeToken_lte: Bytes
  oasisFeeToken_in: [Bytes!]
  oasisFeeToken_not_in: [Bytes!]
  oasisFeeToken_contains: Bytes
  oasisFeeToken_not_contains: Bytes
  oasisFee: BigDecimal
  oasisFee_not: BigDecimal
  oasisFee_gt: BigDecimal
  oasisFee_lt: BigDecimal
  oasisFee_gte: BigDecimal
  oasisFee_lte: BigDecimal
  oasisFee_in: [BigDecimal!]
  oasisFee_not_in: [BigDecimal!]
  oasisFeeUSD: BigDecimal
  oasisFeeUSD_not: BigDecimal
  oasisFeeUSD_gt: BigDecimal
  oasisFeeUSD_lt: BigDecimal
  oasisFeeUSD_gte: BigDecimal
  oasisFeeUSD_lte: BigDecimal
  oasisFeeUSD_in: [BigDecimal!]
  oasisFeeUSD_not_in: [BigDecimal!]
  oasisFeeInQuoteToken: BigDecimal
  oasisFeeInQuoteToken_not: BigDecimal
  oasisFeeInQuoteToken_gt: BigDecimal
  oasisFeeInQuoteToken_lt: BigDecimal
  oasisFeeInQuoteToken_gte: BigDecimal
  oasisFeeInQuoteToken_lte: BigDecimal
  oasisFeeInQuoteToken_in: [BigDecimal!]
  oasisFeeInQuoteToken_not_in: [BigDecimal!]
  oasisFeeInCollateralToken: BigDecimal
  oasisFeeInCollateralToken_not: BigDecimal
  oasisFeeInCollateralToken_gt: BigDecimal
  oasisFeeInCollateralToken_lt: BigDecimal
  oasisFeeInCollateralToken_gte: BigDecimal
  oasisFeeInCollateralToken_lte: BigDecimal
  oasisFeeInCollateralToken_in: [BigDecimal!]
  oasisFeeInCollateralToken_not_in: [BigDecimal!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasFeeUSD: BigDecimal
  gasFeeUSD_not: BigDecimal
  gasFeeUSD_gt: BigDecimal
  gasFeeUSD_lt: BigDecimal
  gasFeeUSD_gte: BigDecimal
  gasFeeUSD_lte: BigDecimal
  gasFeeUSD_in: [BigDecimal!]
  gasFeeUSD_not_in: [BigDecimal!]
  gasFeeInQuoteToken: BigDecimal
  gasFeeInQuoteToken_not: BigDecimal
  gasFeeInQuoteToken_gt: BigDecimal
  gasFeeInQuoteToken_lt: BigDecimal
  gasFeeInQuoteToken_gte: BigDecimal
  gasFeeInQuoteToken_lte: BigDecimal
  gasFeeInQuoteToken_in: [BigDecimal!]
  gasFeeInQuoteToken_not_in: [BigDecimal!]
  gasFeeInCollateralToken: BigDecimal
  gasFeeInCollateralToken_not: BigDecimal
  gasFeeInCollateralToken_gt: BigDecimal
  gasFeeInCollateralToken_lt: BigDecimal
  gasFeeInCollateralToken_gte: BigDecimal
  gasFeeInCollateralToken_lte: BigDecimal
  gasFeeInCollateralToken_in: [BigDecimal!]
  gasFeeInCollateralToken_not_in: [BigDecimal!]
  totalFee: BigDecimal
  totalFee_not: BigDecimal
  totalFee_gt: BigDecimal
  totalFee_lt: BigDecimal
  totalFee_gte: BigDecimal
  totalFee_lte: BigDecimal
  totalFee_in: [BigDecimal!]
  totalFee_not_in: [BigDecimal!]
  totalFeeInQuoteToken: BigDecimal
  totalFeeInQuoteToken_not: BigDecimal
  totalFeeInQuoteToken_gt: BigDecimal
  totalFeeInQuoteToken_lt: BigDecimal
  totalFeeInQuoteToken_gte: BigDecimal
  totalFeeInQuoteToken_lte: BigDecimal
  totalFeeInQuoteToken_in: [BigDecimal!]
  totalFeeInQuoteToken_not_in: [BigDecimal!]
  totalFeeInCollateralToken: BigDecimal
  totalFeeInCollateralToken_not: BigDecimal
  totalFeeInCollateralToken_gt: BigDecimal
  totalFeeInCollateralToken_lt: BigDecimal
  totalFeeInCollateralToken_gte: BigDecimal
  totalFeeInCollateralToken_lte: BigDecimal
  totalFeeInCollateralToken_in: [BigDecimal!]
  totalFeeInCollateralToken_not_in: [BigDecimal!]
  totalFeeUSD: BigDecimal
  totalFeeUSD_not: BigDecimal
  totalFeeUSD_gt: BigDecimal
  totalFeeUSD_lt: BigDecimal
  totalFeeUSD_gte: BigDecimal
  totalFeeUSD_lte: BigDecimal
  totalFeeUSD_in: [BigDecimal!]
  totalFeeUSD_not_in: [BigDecimal!]
  multipleBefore: BigDecimal
  multipleBefore_not: BigDecimal
  multipleBefore_gt: BigDecimal
  multipleBefore_lt: BigDecimal
  multipleBefore_gte: BigDecimal
  multipleBefore_lte: BigDecimal
  multipleBefore_in: [BigDecimal!]
  multipleBefore_not_in: [BigDecimal!]
  multipleAfter: BigDecimal
  multipleAfter_not: BigDecimal
  multipleAfter_gt: BigDecimal
  multipleAfter_lt: BigDecimal
  multipleAfter_gte: BigDecimal
  multipleAfter_lte: BigDecimal
  multipleAfter_in: [BigDecimal!]
  multipleAfter_not_in: [BigDecimal!]
  netValueBefore: BigDecimal
  netValueBefore_not: BigDecimal
  netValueBefore_gt: BigDecimal
  netValueBefore_lt: BigDecimal
  netValueBefore_gte: BigDecimal
  netValueBefore_lte: BigDecimal
  netValueBefore_in: [BigDecimal!]
  netValueBefore_not_in: [BigDecimal!]
  netValueAfter: BigDecimal
  netValueAfter_not: BigDecimal
  netValueAfter_gt: BigDecimal
  netValueAfter_lt: BigDecimal
  netValueAfter_gte: BigDecimal
  netValueAfter_lte: BigDecimal
  netValueAfter_in: [BigDecimal!]
  netValueAfter_not_in: [BigDecimal!]
  ltvBefore: BigDecimal
  ltvBefore_not: BigDecimal
  ltvBefore_gt: BigDecimal
  ltvBefore_lt: BigDecimal
  ltvBefore_gte: BigDecimal
  ltvBefore_lte: BigDecimal
  ltvBefore_in: [BigDecimal!]
  ltvBefore_not_in: [BigDecimal!]
  ltvAfter: BigDecimal
  ltvAfter_not: BigDecimal
  ltvAfter_gt: BigDecimal
  ltvAfter_lt: BigDecimal
  ltvAfter_gte: BigDecimal
  ltvAfter_lte: BigDecimal
  ltvAfter_in: [BigDecimal!]
  ltvAfter_not_in: [BigDecimal!]
  liquidationPriceBefore: BigDecimal
  liquidationPriceBefore_not: BigDecimal
  liquidationPriceBefore_gt: BigDecimal
  liquidationPriceBefore_lt: BigDecimal
  liquidationPriceBefore_gte: BigDecimal
  liquidationPriceBefore_lte: BigDecimal
  liquidationPriceBefore_in: [BigDecimal!]
  liquidationPriceBefore_not_in: [BigDecimal!]
  liquidationPriceAfter: BigDecimal
  liquidationPriceAfter_not: BigDecimal
  liquidationPriceAfter_gt: BigDecimal
  liquidationPriceAfter_lt: BigDecimal
  liquidationPriceAfter_gte: BigDecimal
  liquidationPriceAfter_lte: BigDecimal
  liquidationPriceAfter_in: [BigDecimal!]
  liquidationPriceAfter_not_in: [BigDecimal!]
  originationFee: BigDecimal
  originationFee_not: BigDecimal
  originationFee_gt: BigDecimal
  originationFee_lt: BigDecimal
  originationFee_gte: BigDecimal
  originationFee_lte: BigDecimal
  originationFee_in: [BigDecimal!]
  originationFee_not_in: [BigDecimal!]
  originationFeeUSD: BigDecimal
  originationFeeUSD_not: BigDecimal
  originationFeeUSD_gt: BigDecimal
  originationFeeUSD_lt: BigDecimal
  originationFeeUSD_gte: BigDecimal
  originationFeeUSD_lte: BigDecimal
  originationFeeUSD_in: [BigDecimal!]
  originationFeeUSD_not_in: [BigDecimal!]
  originationFeeInQuoteToken: BigDecimal
  originationFeeInQuoteToken_not: BigDecimal
  originationFeeInQuoteToken_gt: BigDecimal
  originationFeeInQuoteToken_lt: BigDecimal
  originationFeeInQuoteToken_gte: BigDecimal
  originationFeeInQuoteToken_lte: BigDecimal
  originationFeeInQuoteToken_in: [BigDecimal!]
  originationFeeInQuoteToken_not_in: [BigDecimal!]
  originationFeeInCollateralToken: BigDecimal
  originationFeeInCollateralToken_not: BigDecimal
  originationFeeInCollateralToken_gt: BigDecimal
  originationFeeInCollateralToken_lt: BigDecimal
  originationFeeInCollateralToken_gte: BigDecimal
  originationFeeInCollateralToken_lte: BigDecimal
  originationFeeInCollateralToken_in: [BigDecimal!]
  originationFeeInCollateralToken_not_in: [BigDecimal!]
  interestRate: BigInt
  interestRate_not: BigInt
  interestRate_gt: BigInt
  interestRate_lt: BigInt
  interestRate_gte: BigInt
  interestRate_lte: BigInt
  interestRate_in: [BigInt!]
  interestRate_not_in: [BigInt!]
  quoteTokensDelta: BigDecimal
  quoteTokensDelta_not: BigDecimal
  quoteTokensDelta_gt: BigDecimal
  quoteTokensDelta_lt: BigDecimal
  quoteTokensDelta_gte: BigDecimal
  quoteTokensDelta_lte: BigDecimal
  quoteTokensDelta_in: [BigDecimal!]
  quoteTokensDelta_not_in: [BigDecimal!]
  quoteTokensBefore: BigDecimal
  quoteTokensBefore_not: BigDecimal
  quoteTokensBefore_gt: BigDecimal
  quoteTokensBefore_lt: BigDecimal
  quoteTokensBefore_gte: BigDecimal
  quoteTokensBefore_lte: BigDecimal
  quoteTokensBefore_in: [BigDecimal!]
  quoteTokensBefore_not_in: [BigDecimal!]
  quoteTokensAfter: BigDecimal
  quoteTokensAfter_not: BigDecimal
  quoteTokensAfter_gt: BigDecimal
  quoteTokensAfter_lt: BigDecimal
  quoteTokensAfter_gte: BigDecimal
  quoteTokensAfter_lte: BigDecimal
  quoteTokensAfter_in: [BigDecimal!]
  quoteTokensAfter_not_in: [BigDecimal!]
  quoteTokensMoved: BigDecimal
  quoteTokensMoved_not: BigDecimal
  quoteTokensMoved_gt: BigDecimal
  quoteTokensMoved_lt: BigDecimal
  quoteTokensMoved_gte: BigDecimal
  quoteTokensMoved_lte: BigDecimal
  quoteTokensMoved_in: [BigDecimal!]
  quoteTokensMoved_not_in: [BigDecimal!]
  collateralLpsRemoved: BigDecimal
  collateralLpsRemoved_not: BigDecimal
  collateralLpsRemoved_gt: BigDecimal
  collateralLpsRemoved_lt: BigDecimal
  collateralLpsRemoved_gte: BigDecimal
  collateralLpsRemoved_lte: BigDecimal
  collateralLpsRemoved_in: [BigDecimal!]
  collateralLpsRemoved_not_in: [BigDecimal!]
  moveQuoteFromIndex: BigInt
  moveQuoteFromIndex_not: BigInt
  moveQuoteFromIndex_gt: BigInt
  moveQuoteFromIndex_lt: BigInt
  moveQuoteFromIndex_gte: BigInt
  moveQuoteFromIndex_lte: BigInt
  moveQuoteFromIndex_in: [BigInt!]
  moveQuoteFromIndex_not_in: [BigInt!]
  moveQuoteToIndex: BigInt
  moveQuoteToIndex_not: BigInt
  moveQuoteToIndex_gt: BigInt
  moveQuoteToIndex_lt: BigInt
  moveQuoteToIndex_gte: BigInt
  moveQuoteToIndex_lte: BigInt
  moveQuoteToIndex_in: [BigInt!]
  moveQuoteToIndex_not_in: [BigInt!]
  addOrRemoveIndex: BigInt
  addOrRemoveIndex_not: BigInt
  addOrRemoveIndex_gt: BigInt
  addOrRemoveIndex_lt: BigInt
  addOrRemoveIndex_gte: BigInt
  addOrRemoveIndex_lte: BigInt
  addOrRemoveIndex_in: [BigInt!]
  addOrRemoveIndex_not_in: [BigInt!]
  ethPrice: BigDecimal
  ethPrice_not: BigDecimal
  ethPrice_gt: BigDecimal
  ethPrice_lt: BigDecimal
  ethPrice_gte: BigDecimal
  ethPrice_lte: BigDecimal
  ethPrice_in: [BigDecimal!]
  ethPrice_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OasisEvent_filter]
  or: [OasisEvent_filter]
}

enum OasisEvent_orderBy {
  id
  kind
  isOpen
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
  earnPosition
  earnPosition__id
  earnPosition__earnDailyTokenBlocks
  earnPosition__earnLastUpdateBlock
  earnPosition__earnIsEarning
  earnPosition__earnCumulativeDepositUSD
  earnPosition__earnCumulativeDepositInQuoteToken
  earnPosition__earnCumulativeDepositInCollateralToken
  earnPosition__earnCumulativeWithdrawUSD
  earnPosition__earnCumulativeWithdrawInQuoteToken
  earnPosition__earnCumulativeWithdrawInCollateralToken
  earnPosition__earnCumulativeFeesUSD
  earnPosition__earnCumulativeFeesInQuoteToken
  earnPosition__earnCumulativeFeesInCollateralToken
  earnPosition__earnCumulativeQuoteTokenDeposit
  earnPosition__earnCumulativeQuoteTokenWithdraw
  borrowPosition
  borrowPosition__id
  borrowPosition__debt
  borrowPosition__collateral
  borrowPosition__t0Np_
  borrowPosition__t0Debt
  borrowPosition__liquidationPrice
  borrowPosition__borrowDailyTokenBlocks
  borrowPosition__borrowLastUpdateBlock
  borrowPosition__borrowCumulativeDepositUSD
  borrowPosition__borrowCumulativeDepositInQuoteToken
  borrowPosition__borrowCumulativeDepositInCollateralToken
  borrowPosition__borrowCumulativeWithdrawUSD
  borrowPosition__borrowCumulativeWithdrawInQuoteToken
  borrowPosition__borrowCumulativeWithdrawInCollateralToken
  borrowPosition__borrowCumulativeCollateralDeposit
  borrowPosition__borrowCumulativeCollateralWithdraw
  borrowPosition__borrowCumulativeDebtDeposit
  borrowPosition__borrowCumulativeDebtWithdraw
  borrowPosition__borrowCumulativeFeesUSD
  borrowPosition__borrowCumulativeFeesInQuoteToken
  borrowPosition__borrowCumulativeFeesInCollateralToken
  pool
  pool__id
  pool__address
  pool__name
  pool__collateralAddress
  pool__quoteTokenAddress
  pool__collateralScale
  pool__quoteTokenScale
  pool__htp
  pool__hpb
  pool__lup
  pool__htpIndex
  pool__hpbIndex
  pool__lupIndex
  pool__debt
  pool__debtInAuctions
  pool__accuredDebt
  pool__t0debt
  pool__depositSize
  pool__reserves
  pool__claimableReserves
  pool__claimableReservesRemaining
  pool__auctionPrice
  pool__timeRemaining
  pool__loansCount
  pool__totalAuctionsInPool
  pool__interestRate
  pool__borrowApr
  pool__apr30dAverage
  pool__dailyPercentageRate30dAverage
  pool__monthlyPercentageRate30dAverage
  pool__lastInterestRateUpdate
  pool__lendApr
  pool__lendApr30dAverage
  pool__lendDailyPercentageRate30dAverage
  pool__lendMonthlyPercentageRate30dAverage
  pool__poolMinDebtAmount
  pool__poolCollateralization
  pool__poolActualUtilization
  pool__poolTargetUtilization
  pool__currentBurnEpoch
  pool__borrowDailyTokenBlocks
  pool__earnDailyTokenBlocks
  debtToken
  debtToken__id
  debtToken__address
  debtToken__decimals
  debtToken__precision
  debtToken__symbol
  debtAddress
  debtBefore
  debtAfter
  debtDelta
  debtTokenPriceUSD
  collateralToken
  collateralToken__id
  collateralToken__address
  collateralToken__decimals
  collateralToken__precision
  collateralToken__symbol
  collateralAddress
  collateralBefore
  collateralAfter
  collateralDelta
  collateralTokenPriceUSD
  debtOraclePrice
  collateralOraclePrice
  swapFromToken
  swapToToken
  swapFromAmount
  swapToAmount
  marketPrice
  depositTransfers
  depositedUSD
  depositedInQuoteToken
  withdrawTransfers
  withdrawnUSD
  withdrawnInQuoteToken
  oasisFeeToken
  oasisFee
  oasisFeeUSD
  oasisFeeInQuoteToken
  oasisFeeInCollateralToken
  gasUsed
  gasPrice
  gasFeeUSD
  gasFeeInQuoteToken
  gasFeeInCollateralToken
  totalFee
  totalFeeInQuoteToken
  totalFeeInCollateralToken
  totalFeeUSD
  multipleBefore
  multipleAfter
  netValueBefore
  netValueAfter
  ltvBefore
  ltvAfter
  liquidationPriceBefore
  liquidationPriceAfter
  originationFee
  originationFeeUSD
  originationFeeInQuoteToken
  originationFeeInCollateralToken
  interestRate
  quoteTokensDelta
  quoteTokensBefore
  quoteTokensAfter
  quoteTokensMoved
  collateralLpsRemoved
  moveQuoteFromIndex
  moveQuoteToIndex
  addOrRemoveIndex
  ethPrice
  timestamp
  blockNumber
  txHash
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Permission {
  id: ID!
  user: User!
  account: Account!
}

input Permission_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Permission_filter]
  or: [Permission_filter]
}

enum Permission_orderBy {
  id
  user
  user__id
  user__address
  user__vaultCount
  account
  account__id
  account__address
  account__vaultId
  account__isDPM
  account__protocol
  account__positionType
  account__collateralToken
  account__debtToken
}

type Pool {
  id: ID!
  address: Bytes!
  name: String
  collateralAddress: Bytes!
  quoteTokenAddress: Bytes!
  collateralToken: Token
  quoteToken: Token
  collateralScale: BigInt!
  quoteTokenScale: BigInt!
  htp: BigInt!
  hpb: BigInt!
  lup: BigInt!
  htpIndex: BigInt!
  hpbIndex: BigInt!
  lupIndex: BigInt!
  debt: BigInt!
  debtInAuctions: BigInt!
  accuredDebt: BigInt!
  t0debt: BigInt!
  depositSize: BigInt!
  reserves: BigInt!
  claimableReserves: BigInt!
  claimableReservesRemaining: BigInt!
  auctionPrice: BigInt!
  timeRemaining: BigInt!
  loansCount: BigInt!
  totalAuctionsInPool: BigInt!
  interestRate: BigInt!
  borrowApr: BigInt
  apr30dAverage: BigInt!
  dailyPercentageRate30dAverage: BigInt!
  monthlyPercentageRate30dAverage: BigInt!
  interestRatesHistory30d: [BigInt!]!
  lastInterestRateUpdate: BigInt!
  lendApr: BigInt
  lendAprHistory30d: [BigInt!]!
  lendApr30dAverage: BigInt!
  lendDailyPercentageRate30dAverage: BigInt!
  lendMonthlyPercentageRate30dAverage: BigInt!
  poolMinDebtAmount: BigInt!
  poolCollateralization: BigInt!
  poolActualUtilization: BigInt!
  poolTargetUtilization: BigInt!
  currentBurnEpoch: BigInt!
  buckets(skip: Int = 0, first: Int = 100, orderBy: Bucket_orderBy, orderDirection: OrderDirection, where: Bucket_filter): [Bucket!]
  stakedNfts(skip: Int = 0, first: Int = 100, orderBy: NFT_orderBy, orderDirection: OrderDirection, where: NFT_filter): [NFT!]!
  earnPositions: [String!]!
  borrowPositions: [String!]!
  borrowDailyTokenBlocks: BigInt!
  earnDailyTokenBlocks: BigInt!
}

input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  collateralAddress: Bytes
  collateralAddress_not: Bytes
  collateralAddress_gt: Bytes
  collateralAddress_lt: Bytes
  collateralAddress_gte: Bytes
  collateralAddress_lte: Bytes
  collateralAddress_in: [Bytes!]
  collateralAddress_not_in: [Bytes!]
  collateralAddress_contains: Bytes
  collateralAddress_not_contains: Bytes
  quoteTokenAddress: Bytes
  quoteTokenAddress_not: Bytes
  quoteTokenAddress_gt: Bytes
  quoteTokenAddress_lt: Bytes
  quoteTokenAddress_gte: Bytes
  quoteTokenAddress_lte: Bytes
  quoteTokenAddress_in: [Bytes!]
  quoteTokenAddress_not_in: [Bytes!]
  quoteTokenAddress_contains: Bytes
  quoteTokenAddress_not_contains: Bytes
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Token_filter
  quoteToken: String
  quoteToken_not: String
  quoteToken_gt: String
  quoteToken_lt: String
  quoteToken_gte: String
  quoteToken_lte: String
  quoteToken_in: [String!]
  quoteToken_not_in: [String!]
  quoteToken_contains: String
  quoteToken_contains_nocase: String
  quoteToken_not_contains: String
  quoteToken_not_contains_nocase: String
  quoteToken_starts_with: String
  quoteToken_starts_with_nocase: String
  quoteToken_not_starts_with: String
  quoteToken_not_starts_with_nocase: String
  quoteToken_ends_with: String
  quoteToken_ends_with_nocase: String
  quoteToken_not_ends_with: String
  quoteToken_not_ends_with_nocase: String
  quoteToken_: Token_filter
  collateralScale: BigInt
  collateralScale_not: BigInt
  collateralScale_gt: BigInt
  collateralScale_lt: BigInt
  collateralScale_gte: BigInt
  collateralScale_lte: BigInt
  collateralScale_in: [BigInt!]
  collateralScale_not_in: [BigInt!]
  quoteTokenScale: BigInt
  quoteTokenScale_not: BigInt
  quoteTokenScale_gt: BigInt
  quoteTokenScale_lt: BigInt
  quoteTokenScale_gte: BigInt
  quoteTokenScale_lte: BigInt
  quoteTokenScale_in: [BigInt!]
  quoteTokenScale_not_in: [BigInt!]
  htp: BigInt
  htp_not: BigInt
  htp_gt: BigInt
  htp_lt: BigInt
  htp_gte: BigInt
  htp_lte: BigInt
  htp_in: [BigInt!]
  htp_not_in: [BigInt!]
  hpb: BigInt
  hpb_not: BigInt
  hpb_gt: BigInt
  hpb_lt: BigInt
  hpb_gte: BigInt
  hpb_lte: BigInt
  hpb_in: [BigInt!]
  hpb_not_in: [BigInt!]
  lup: BigInt
  lup_not: BigInt
  lup_gt: BigInt
  lup_lt: BigInt
  lup_gte: BigInt
  lup_lte: BigInt
  lup_in: [BigInt!]
  lup_not_in: [BigInt!]
  htpIndex: BigInt
  htpIndex_not: BigInt
  htpIndex_gt: BigInt
  htpIndex_lt: BigInt
  htpIndex_gte: BigInt
  htpIndex_lte: BigInt
  htpIndex_in: [BigInt!]
  htpIndex_not_in: [BigInt!]
  hpbIndex: BigInt
  hpbIndex_not: BigInt
  hpbIndex_gt: BigInt
  hpbIndex_lt: BigInt
  hpbIndex_gte: BigInt
  hpbIndex_lte: BigInt
  hpbIndex_in: [BigInt!]
  hpbIndex_not_in: [BigInt!]
  lupIndex: BigInt
  lupIndex_not: BigInt
  lupIndex_gt: BigInt
  lupIndex_lt: BigInt
  lupIndex_gte: BigInt
  lupIndex_lte: BigInt
  lupIndex_in: [BigInt!]
  lupIndex_not_in: [BigInt!]
  debt: BigInt
  debt_not: BigInt
  debt_gt: BigInt
  debt_lt: BigInt
  debt_gte: BigInt
  debt_lte: BigInt
  debt_in: [BigInt!]
  debt_not_in: [BigInt!]
  debtInAuctions: BigInt
  debtInAuctions_not: BigInt
  debtInAuctions_gt: BigInt
  debtInAuctions_lt: BigInt
  debtInAuctions_gte: BigInt
  debtInAuctions_lte: BigInt
  debtInAuctions_in: [BigInt!]
  debtInAuctions_not_in: [BigInt!]
  accuredDebt: BigInt
  accuredDebt_not: BigInt
  accuredDebt_gt: BigInt
  accuredDebt_lt: BigInt
  accuredDebt_gte: BigInt
  accuredDebt_lte: BigInt
  accuredDebt_in: [BigInt!]
  accuredDebt_not_in: [BigInt!]
  t0debt: BigInt
  t0debt_not: BigInt
  t0debt_gt: BigInt
  t0debt_lt: BigInt
  t0debt_gte: BigInt
  t0debt_lte: BigInt
  t0debt_in: [BigInt!]
  t0debt_not_in: [BigInt!]
  depositSize: BigInt
  depositSize_not: BigInt
  depositSize_gt: BigInt
  depositSize_lt: BigInt
  depositSize_gte: BigInt
  depositSize_lte: BigInt
  depositSize_in: [BigInt!]
  depositSize_not_in: [BigInt!]
  reserves: BigInt
  reserves_not: BigInt
  reserves_gt: BigInt
  reserves_lt: BigInt
  reserves_gte: BigInt
  reserves_lte: BigInt
  reserves_in: [BigInt!]
  reserves_not_in: [BigInt!]
  claimableReserves: BigInt
  claimableReserves_not: BigInt
  claimableReserves_gt: BigInt
  claimableReserves_lt: BigInt
  claimableReserves_gte: BigInt
  claimableReserves_lte: BigInt
  claimableReserves_in: [BigInt!]
  claimableReserves_not_in: [BigInt!]
  claimableReservesRemaining: BigInt
  claimableReservesRemaining_not: BigInt
  claimableReservesRemaining_gt: BigInt
  claimableReservesRemaining_lt: BigInt
  claimableReservesRemaining_gte: BigInt
  claimableReservesRemaining_lte: BigInt
  claimableReservesRemaining_in: [BigInt!]
  claimableReservesRemaining_not_in: [BigInt!]
  auctionPrice: BigInt
  auctionPrice_not: BigInt
  auctionPrice_gt: BigInt
  auctionPrice_lt: BigInt
  auctionPrice_gte: BigInt
  auctionPrice_lte: BigInt
  auctionPrice_in: [BigInt!]
  auctionPrice_not_in: [BigInt!]
  timeRemaining: BigInt
  timeRemaining_not: BigInt
  timeRemaining_gt: BigInt
  timeRemaining_lt: BigInt
  timeRemaining_gte: BigInt
  timeRemaining_lte: BigInt
  timeRemaining_in: [BigInt!]
  timeRemaining_not_in: [BigInt!]
  loansCount: BigInt
  loansCount_not: BigInt
  loansCount_gt: BigInt
  loansCount_lt: BigInt
  loansCount_gte: BigInt
  loansCount_lte: BigInt
  loansCount_in: [BigInt!]
  loansCount_not_in: [BigInt!]
  totalAuctionsInPool: BigInt
  totalAuctionsInPool_not: BigInt
  totalAuctionsInPool_gt: BigInt
  totalAuctionsInPool_lt: BigInt
  totalAuctionsInPool_gte: BigInt
  totalAuctionsInPool_lte: BigInt
  totalAuctionsInPool_in: [BigInt!]
  totalAuctionsInPool_not_in: [BigInt!]
  interestRate: BigInt
  interestRate_not: BigInt
  interestRate_gt: BigInt
  interestRate_lt: BigInt
  interestRate_gte: BigInt
  interestRate_lte: BigInt
  interestRate_in: [BigInt!]
  interestRate_not_in: [BigInt!]
  borrowApr: BigInt
  borrowApr_not: BigInt
  borrowApr_gt: BigInt
  borrowApr_lt: BigInt
  borrowApr_gte: BigInt
  borrowApr_lte: BigInt
  borrowApr_in: [BigInt!]
  borrowApr_not_in: [BigInt!]
  apr30dAverage: BigInt
  apr30dAverage_not: BigInt
  apr30dAverage_gt: BigInt
  apr30dAverage_lt: BigInt
  apr30dAverage_gte: BigInt
  apr30dAverage_lte: BigInt
  apr30dAverage_in: [BigInt!]
  apr30dAverage_not_in: [BigInt!]
  dailyPercentageRate30dAverage: BigInt
  dailyPercentageRate30dAverage_not: BigInt
  dailyPercentageRate30dAverage_gt: BigInt
  dailyPercentageRate30dAverage_lt: BigInt
  dailyPercentageRate30dAverage_gte: BigInt
  dailyPercentageRate30dAverage_lte: BigInt
  dailyPercentageRate30dAverage_in: [BigInt!]
  dailyPercentageRate30dAverage_not_in: [BigInt!]
  monthlyPercentageRate30dAverage: BigInt
  monthlyPercentageRate30dAverage_not: BigInt
  monthlyPercentageRate30dAverage_gt: BigInt
  monthlyPercentageRate30dAverage_lt: BigInt
  monthlyPercentageRate30dAverage_gte: BigInt
  monthlyPercentageRate30dAverage_lte: BigInt
  monthlyPercentageRate30dAverage_in: [BigInt!]
  monthlyPercentageRate30dAverage_not_in: [BigInt!]
  interestRatesHistory30d: [BigInt!]
  interestRatesHistory30d_not: [BigInt!]
  interestRatesHistory30d_contains: [BigInt!]
  interestRatesHistory30d_contains_nocase: [BigInt!]
  interestRatesHistory30d_not_contains: [BigInt!]
  interestRatesHistory30d_not_contains_nocase: [BigInt!]
  lastInterestRateUpdate: BigInt
  lastInterestRateUpdate_not: BigInt
  lastInterestRateUpdate_gt: BigInt
  lastInterestRateUpdate_lt: BigInt
  lastInterestRateUpdate_gte: BigInt
  lastInterestRateUpdate_lte: BigInt
  lastInterestRateUpdate_in: [BigInt!]
  lastInterestRateUpdate_not_in: [BigInt!]
  lendApr: BigInt
  lendApr_not: BigInt
  lendApr_gt: BigInt
  lendApr_lt: BigInt
  lendApr_gte: BigInt
  lendApr_lte: BigInt
  lendApr_in: [BigInt!]
  lendApr_not_in: [BigInt!]
  lendAprHistory30d: [BigInt!]
  lendAprHistory30d_not: [BigInt!]
  lendAprHistory30d_contains: [BigInt!]
  lendAprHistory30d_contains_nocase: [BigInt!]
  lendAprHistory30d_not_contains: [BigInt!]
  lendAprHistory30d_not_contains_nocase: [BigInt!]
  lendApr30dAverage: BigInt
  lendApr30dAverage_not: BigInt
  lendApr30dAverage_gt: BigInt
  lendApr30dAverage_lt: BigInt
  lendApr30dAverage_gte: BigInt
  lendApr30dAverage_lte: BigInt
  lendApr30dAverage_in: [BigInt!]
  lendApr30dAverage_not_in: [BigInt!]
  lendDailyPercentageRate30dAverage: BigInt
  lendDailyPercentageRate30dAverage_not: BigInt
  lendDailyPercentageRate30dAverage_gt: BigInt
  lendDailyPercentageRate30dAverage_lt: BigInt
  lendDailyPercentageRate30dAverage_gte: BigInt
  lendDailyPercentageRate30dAverage_lte: BigInt
  lendDailyPercentageRate30dAverage_in: [BigInt!]
  lendDailyPercentageRate30dAverage_not_in: [BigInt!]
  lendMonthlyPercentageRate30dAverage: BigInt
  lendMonthlyPercentageRate30dAverage_not: BigInt
  lendMonthlyPercentageRate30dAverage_gt: BigInt
  lendMonthlyPercentageRate30dAverage_lt: BigInt
  lendMonthlyPercentageRate30dAverage_gte: BigInt
  lendMonthlyPercentageRate30dAverage_lte: BigInt
  lendMonthlyPercentageRate30dAverage_in: [BigInt!]
  lendMonthlyPercentageRate30dAverage_not_in: [BigInt!]
  poolMinDebtAmount: BigInt
  poolMinDebtAmount_not: BigInt
  poolMinDebtAmount_gt: BigInt
  poolMinDebtAmount_lt: BigInt
  poolMinDebtAmount_gte: BigInt
  poolMinDebtAmount_lte: BigInt
  poolMinDebtAmount_in: [BigInt!]
  poolMinDebtAmount_not_in: [BigInt!]
  poolCollateralization: BigInt
  poolCollateralization_not: BigInt
  poolCollateralization_gt: BigInt
  poolCollateralization_lt: BigInt
  poolCollateralization_gte: BigInt
  poolCollateralization_lte: BigInt
  poolCollateralization_in: [BigInt!]
  poolCollateralization_not_in: [BigInt!]
  poolActualUtilization: BigInt
  poolActualUtilization_not: BigInt
  poolActualUtilization_gt: BigInt
  poolActualUtilization_lt: BigInt
  poolActualUtilization_gte: BigInt
  poolActualUtilization_lte: BigInt
  poolActualUtilization_in: [BigInt!]
  poolActualUtilization_not_in: [BigInt!]
  poolTargetUtilization: BigInt
  poolTargetUtilization_not: BigInt
  poolTargetUtilization_gt: BigInt
  poolTargetUtilization_lt: BigInt
  poolTargetUtilization_gte: BigInt
  poolTargetUtilization_lte: BigInt
  poolTargetUtilization_in: [BigInt!]
  poolTargetUtilization_not_in: [BigInt!]
  currentBurnEpoch: BigInt
  currentBurnEpoch_not: BigInt
  currentBurnEpoch_gt: BigInt
  currentBurnEpoch_lt: BigInt
  currentBurnEpoch_gte: BigInt
  currentBurnEpoch_lte: BigInt
  currentBurnEpoch_in: [BigInt!]
  currentBurnEpoch_not_in: [BigInt!]
  buckets_: Bucket_filter
  stakedNfts: [String!]
  stakedNfts_not: [String!]
  stakedNfts_contains: [String!]
  stakedNfts_contains_nocase: [String!]
  stakedNfts_not_contains: [String!]
  stakedNfts_not_contains_nocase: [String!]
  stakedNfts_: NFT_filter
  earnPositions: [String!]
  earnPositions_not: [String!]
  earnPositions_contains: [String!]
  earnPositions_contains_nocase: [String!]
  earnPositions_not_contains: [String!]
  earnPositions_not_contains_nocase: [String!]
  borrowPositions: [String!]
  borrowPositions_not: [String!]
  borrowPositions_contains: [String!]
  borrowPositions_contains_nocase: [String!]
  borrowPositions_not_contains: [String!]
  borrowPositions_not_contains_nocase: [String!]
  borrowDailyTokenBlocks: BigInt
  borrowDailyTokenBlocks_not: BigInt
  borrowDailyTokenBlocks_gt: BigInt
  borrowDailyTokenBlocks_lt: BigInt
  borrowDailyTokenBlocks_gte: BigInt
  borrowDailyTokenBlocks_lte: BigInt
  borrowDailyTokenBlocks_in: [BigInt!]
  borrowDailyTokenBlocks_not_in: [BigInt!]
  earnDailyTokenBlocks: BigInt
  earnDailyTokenBlocks_not: BigInt
  earnDailyTokenBlocks_gt: BigInt
  earnDailyTokenBlocks_lt: BigInt
  earnDailyTokenBlocks_gte: BigInt
  earnDailyTokenBlocks_lte: BigInt
  earnDailyTokenBlocks_in: [BigInt!]
  earnDailyTokenBlocks_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  address
  name
  collateralAddress
  quoteTokenAddress
  collateralToken
  collateralToken__id
  collateralToken__address
  collateralToken__decimals
  collateralToken__precision
  collateralToken__symbol
  quoteToken
  quoteToken__id
  quoteToken__address
  quoteToken__decimals
  quoteToken__precision
  quoteToken__symbol
  collateralScale
  quoteTokenScale
  htp
  hpb
  lup
  htpIndex
  hpbIndex
  lupIndex
  debt
  debtInAuctions
  accuredDebt
  t0debt
  depositSize
  reserves
  claimableReserves
  claimableReservesRemaining
  auctionPrice
  timeRemaining
  loansCount
  totalAuctionsInPool
  interestRate
  borrowApr
  apr30dAverage
  dailyPercentageRate30dAverage
  monthlyPercentageRate30dAverage
  interestRatesHistory30d
  lastInterestRateUpdate
  lendApr
  lendAprHistory30d
  lendApr30dAverage
  lendDailyPercentageRate30dAverage
  lendMonthlyPercentageRate30dAverage
  poolMinDebtAmount
  poolCollateralization
  poolActualUtilization
  poolTargetUtilization
  currentBurnEpoch
  buckets
  stakedNfts
  earnPositions
  borrowPositions
  borrowDailyTokenBlocks
  earnDailyTokenBlocks
}

type Query {
  state(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): State
  states(
    skip: Int = 0
    first: Int = 100
    orderBy: State_orderBy
    orderDirection: OrderDirection
    where: State_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [State!]!
  createPositionEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CreatePositionEvent
  createPositionEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: CreatePositionEvent_orderBy
    orderDirection: OrderDirection
    where: CreatePositionEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CreatePositionEvent!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  earnPositionBucket(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EarnPositionBucket
  earnPositionBuckets(
    skip: Int = 0
    first: Int = 100
    orderBy: EarnPositionBucket_orderBy
    orderDirection: OrderDirection
    where: EarnPositionBucket_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EarnPositionBucket!]!
  earnPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EarnPosition
  earnPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: EarnPosition_orderBy
    orderDirection: OrderDirection
    where: EarnPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EarnPosition!]!
  borrowPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BorrowPosition
  borrowPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: BorrowPosition_orderBy
    orderDirection: OrderDirection
    where: BorrowPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BorrowPosition!]!
  day(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Day
  days(
    skip: Int = 0
    first: Int = 100
    orderBy: Day_orderBy
    orderDirection: OrderDirection
    where: Day_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Day!]!
  week(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Week
  weeks(
    skip: Int = 0
    first: Int = 100
    orderBy: Week_orderBy
    orderDirection: OrderDirection
    where: Week_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Week!]!
  borrowDailyReward(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BorrowDailyReward
  borrowDailyRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: BorrowDailyReward_orderBy
    orderDirection: OrderDirection
    where: BorrowDailyReward_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BorrowDailyReward!]!
  earnDailyReward(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EarnDailyReward
  earnDailyRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: EarnDailyReward_orderBy
    orderDirection: OrderDirection
    where: EarnDailyReward_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EarnDailyReward!]!
  auction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  permission(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Permission
  permissions(
    skip: Int = 0
    first: Int = 100
    orderBy: Permission_orderBy
    orderDirection: OrderDirection
    where: Permission_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Permission!]!
  pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  bucket(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bucket
  buckets(
    skip: Int = 0
    first: Int = 100
    orderBy: Bucket_orderBy
    orderDirection: OrderDirection
    where: Bucket_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bucket!]!
  listOfPool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ListOfPool
  listOfPools(
    skip: Int = 0
    first: Int = 100
    orderBy: ListOfPool_orderBy
    orderDirection: OrderDirection
    where: ListOfPool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ListOfPool!]!
  nft(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFT
  nfts(
    skip: Int = 0
    first: Int = 100
    orderBy: NFT_orderBy
    orderDirection: OrderDirection
    where: NFT_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFT!]!
  borrowerEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BorrowerEvent
  borrowerEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: BorrowerEvent_orderBy
    orderDirection: OrderDirection
    where: BorrowerEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BorrowerEvent!]!
  lenderEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LenderEvent
  lenderEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LenderEvent_orderBy
    orderDirection: OrderDirection
    where: LenderEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LenderEvent!]!
  oasisEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OasisEvent
  oasisEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: OasisEvent_orderBy
    orderDirection: OrderDirection
    where: OasisEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OasisEvent!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  assetSwap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AssetSwap
  assetSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: AssetSwap_orderBy
    orderDirection: OrderDirection
    where: AssetSwap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AssetSwap!]!
  slippageSaved(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SlippageSaved
  slippageSaveds(
    skip: Int = 0
    first: Int = 100
    orderBy: SlippageSaved_orderBy
    orderDirection: OrderDirection
    where: SlippageSaved_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SlippageSaved!]!
  feePaid(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeePaid
  feePaids(
    skip: Int = 0
    first: Int = 100
    orderBy: FeePaid_orderBy
    orderDirection: OrderDirection
    where: FeePaid_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeePaid!]!
  claimed(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claimed
  claimeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Claimed_orderBy
    orderDirection: OrderDirection
    where: Claimed_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claimed!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SlippageSaved {
  """
  id is a tx_hash-actionLogIndex
  it uses action log index to easily combine all swap events into one
  
  """
  id: Bytes!
  minimumPossible: BigInt!
  actualAmount: BigInt!
}

input SlippageSaved_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  minimumPossible: BigInt
  minimumPossible_not: BigInt
  minimumPossible_gt: BigInt
  minimumPossible_lt: BigInt
  minimumPossible_gte: BigInt
  minimumPossible_lte: BigInt
  minimumPossible_in: [BigInt!]
  minimumPossible_not_in: [BigInt!]
  actualAmount: BigInt
  actualAmount_not: BigInt
  actualAmount_gt: BigInt
  actualAmount_lt: BigInt
  actualAmount_gte: BigInt
  actualAmount_lte: BigInt
  actualAmount_in: [BigInt!]
  actualAmount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SlippageSaved_filter]
  or: [SlippageSaved_filter]
}

enum SlippageSaved_orderBy {
  id
  minimumPossible
  actualAmount
}

type State {
  id: Bytes!
  lastDay: BigInt
  lastWeek: BigInt
}

input State_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  lastDay: BigInt
  lastDay_not: BigInt
  lastDay_gt: BigInt
  lastDay_lt: BigInt
  lastDay_gte: BigInt
  lastDay_lte: BigInt
  lastDay_in: [BigInt!]
  lastDay_not_in: [BigInt!]
  lastWeek: BigInt
  lastWeek_not: BigInt
  lastWeek_gt: BigInt
  lastWeek_lt: BigInt
  lastWeek_gte: BigInt
  lastWeek_lte: BigInt
  lastWeek_in: [BigInt!]
  lastWeek_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [State_filter]
  or: [State_filter]
}

enum State_orderBy {
  id
  lastDay
  lastWeek
}

type Subscription {
  state(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): State
  states(
    skip: Int = 0
    first: Int = 100
    orderBy: State_orderBy
    orderDirection: OrderDirection
    where: State_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [State!]!
  createPositionEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CreatePositionEvent
  createPositionEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: CreatePositionEvent_orderBy
    orderDirection: OrderDirection
    where: CreatePositionEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CreatePositionEvent!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  earnPositionBucket(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EarnPositionBucket
  earnPositionBuckets(
    skip: Int = 0
    first: Int = 100
    orderBy: EarnPositionBucket_orderBy
    orderDirection: OrderDirection
    where: EarnPositionBucket_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EarnPositionBucket!]!
  earnPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EarnPosition
  earnPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: EarnPosition_orderBy
    orderDirection: OrderDirection
    where: EarnPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EarnPosition!]!
  borrowPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BorrowPosition
  borrowPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: BorrowPosition_orderBy
    orderDirection: OrderDirection
    where: BorrowPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BorrowPosition!]!
  day(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Day
  days(
    skip: Int = 0
    first: Int = 100
    orderBy: Day_orderBy
    orderDirection: OrderDirection
    where: Day_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Day!]!
  week(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Week
  weeks(
    skip: Int = 0
    first: Int = 100
    orderBy: Week_orderBy
    orderDirection: OrderDirection
    where: Week_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Week!]!
  borrowDailyReward(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BorrowDailyReward
  borrowDailyRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: BorrowDailyReward_orderBy
    orderDirection: OrderDirection
    where: BorrowDailyReward_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BorrowDailyReward!]!
  earnDailyReward(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EarnDailyReward
  earnDailyRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: EarnDailyReward_orderBy
    orderDirection: OrderDirection
    where: EarnDailyReward_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EarnDailyReward!]!
  auction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  permission(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Permission
  permissions(
    skip: Int = 0
    first: Int = 100
    orderBy: Permission_orderBy
    orderDirection: OrderDirection
    where: Permission_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Permission!]!
  pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  bucket(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bucket
  buckets(
    skip: Int = 0
    first: Int = 100
    orderBy: Bucket_orderBy
    orderDirection: OrderDirection
    where: Bucket_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bucket!]!
  listOfPool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ListOfPool
  listOfPools(
    skip: Int = 0
    first: Int = 100
    orderBy: ListOfPool_orderBy
    orderDirection: OrderDirection
    where: ListOfPool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ListOfPool!]!
  nft(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFT
  nfts(
    skip: Int = 0
    first: Int = 100
    orderBy: NFT_orderBy
    orderDirection: OrderDirection
    where: NFT_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFT!]!
  borrowerEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BorrowerEvent
  borrowerEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: BorrowerEvent_orderBy
    orderDirection: OrderDirection
    where: BorrowerEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BorrowerEvent!]!
  lenderEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LenderEvent
  lenderEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LenderEvent_orderBy
    orderDirection: OrderDirection
    where: LenderEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LenderEvent!]!
  oasisEvent(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OasisEvent
  oasisEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: OasisEvent_orderBy
    orderDirection: OrderDirection
    where: OasisEvent_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OasisEvent!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  assetSwap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AssetSwap
  assetSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: AssetSwap_orderBy
    orderDirection: OrderDirection
    where: AssetSwap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AssetSwap!]!
  slippageSaved(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SlippageSaved
  slippageSaveds(
    skip: Int = 0
    first: Int = 100
    orderBy: SlippageSaved_orderBy
    orderDirection: OrderDirection
    where: SlippageSaved_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SlippageSaved!]!
  feePaid(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeePaid
  feePaids(
    skip: Int = 0
    first: Int = 100
    orderBy: FeePaid_orderBy
    orderDirection: OrderDirection
    where: FeePaid_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeePaid!]!
  claimed(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claimed
  claimeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Claimed_orderBy
    orderDirection: OrderDirection
    where: Claimed_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claimed!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Token {
  id: Bytes!
  address: Bytes!
  decimals: BigInt!
  precision: BigInt!
  symbol: String!
}

input Token_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  precision: BigInt
  precision_not: BigInt
  precision_gt: BigInt
  precision_lt: BigInt
  precision_gte: BigInt
  precision_lte: BigInt
  precision_in: [BigInt!]
  precision_not_in: [BigInt!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  address
  decimals
  precision
  symbol
}

type Transfer {
  id: Bytes!
  event: OasisEvent!
  from: Bytes!
  to: Bytes!
  token: Bytes!
  amount: BigDecimal!
  priceInUSD: BigDecimal!
  amountUSD: BigDecimal!
  txHash: String!
}

input Transfer_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  event: String
  event_not: String
  event_gt: String
  event_lt: String
  event_gte: String
  event_lte: String
  event_in: [String!]
  event_not_in: [String!]
  event_contains: String
  event_contains_nocase: String
  event_not_contains: String
  event_not_contains_nocase: String
  event_starts_with: String
  event_starts_with_nocase: String
  event_not_starts_with: String
  event_not_starts_with_nocase: String
  event_ends_with: String
  event_ends_with_nocase: String
  event_not_ends_with: String
  event_not_ends_with_nocase: String
  event_: OasisEvent_filter
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  priceInUSD: BigDecimal
  priceInUSD_not: BigDecimal
  priceInUSD_gt: BigDecimal
  priceInUSD_lt: BigDecimal
  priceInUSD_gte: BigDecimal
  priceInUSD_lte: BigDecimal
  priceInUSD_in: [BigDecimal!]
  priceInUSD_not_in: [BigDecimal!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  or: [Transfer_filter]
}

enum Transfer_orderBy {
  id
  event
  event__id
  event__kind
  event__isOpen
  event__debtAddress
  event__debtBefore
  event__debtAfter
  event__debtDelta
  event__debtTokenPriceUSD
  event__collateralAddress
  event__collateralBefore
  event__collateralAfter
  event__collateralDelta
  event__collateralTokenPriceUSD
  event__debtOraclePrice
  event__collateralOraclePrice
  event__swapFromToken
  event__swapToToken
  event__swapFromAmount
  event__swapToAmount
  event__marketPrice
  event__depositedUSD
  event__depositedInQuoteToken
  event__withdrawnUSD
  event__withdrawnInQuoteToken
  event__oasisFeeToken
  event__oasisFee
  event__oasisFeeUSD
  event__oasisFeeInQuoteToken
  event__oasisFeeInCollateralToken
  event__gasUsed
  event__gasPrice
  event__gasFeeUSD
  event__gasFeeInQuoteToken
  event__gasFeeInCollateralToken
  event__totalFee
  event__totalFeeInQuoteToken
  event__totalFeeInCollateralToken
  event__totalFeeUSD
  event__multipleBefore
  event__multipleAfter
  event__netValueBefore
  event__netValueAfter
  event__ltvBefore
  event__ltvAfter
  event__liquidationPriceBefore
  event__liquidationPriceAfter
  event__originationFee
  event__originationFeeUSD
  event__originationFeeInQuoteToken
  event__originationFeeInCollateralToken
  event__interestRate
  event__quoteTokensDelta
  event__quoteTokensBefore
  event__quoteTokensAfter
  event__quoteTokensMoved
  event__collateralLpsRemoved
  event__moveQuoteFromIndex
  event__moveQuoteToIndex
  event__addOrRemoveIndex
  event__ethPrice
  event__timestamp
  event__blockNumber
  event__txHash
  from
  to
  token
  amount
  priceInUSD
  amountUSD
  txHash
}

type User {
  id: Bytes!
  address: Bytes!
  vaultCount: BigInt!
  proxys(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]
  permittedProxys(skip: Int = 0, first: Int = 100, orderBy: Permission_orderBy, orderDirection: OrderDirection, where: Permission_filter): [Permission!]
  earnPositions(skip: Int = 0, first: Int = 100, orderBy: EarnPositionBucket_orderBy, orderDirection: OrderDirection, where: EarnPositionBucket_filter): [EarnPositionBucket!]
  borrowPositions(skip: Int = 0, first: Int = 100, orderBy: BorrowPosition_orderBy, orderDirection: OrderDirection, where: BorrowPosition_filter): [BorrowPosition!]
  nfts(skip: Int = 0, first: Int = 100, orderBy: NFT_orderBy, orderDirection: OrderDirection, where: NFT_filter): [NFT!]
  oasisAjnaRewardClaims(skip: Int = 0, first: Int = 100, orderBy: Claimed_orderBy, orderDirection: OrderDirection, where: Claimed_filter): [Claimed!]
}

input User_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  vaultCount: BigInt
  vaultCount_not: BigInt
  vaultCount_gt: BigInt
  vaultCount_lt: BigInt
  vaultCount_gte: BigInt
  vaultCount_lte: BigInt
  vaultCount_in: [BigInt!]
  vaultCount_not_in: [BigInt!]
  proxys_: Account_filter
  permittedProxys_: Permission_filter
  earnPositions_: EarnPositionBucket_filter
  borrowPositions_: BorrowPosition_filter
  nfts_: NFT_filter
  oasisAjnaRewardClaims_: Claimed_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  address
  vaultCount
  proxys
  permittedProxys
  earnPositions
  borrowPositions
  nfts
  oasisAjnaRewardClaims
}

type Week {
  id: ID!
  week: BigInt!
  weekStartTimestamp: BigInt!
  weekEndTimestamp: BigInt
  borrowWeeklyRewards(skip: Int = 0, first: Int = 100, orderBy: BorrowDailyReward_orderBy, orderDirection: OrderDirection, where: BorrowDailyReward_filter): [BorrowDailyReward!]
  earnWeeklyRewards(skip: Int = 0, first: Int = 100, orderBy: EarnDailyReward_orderBy, orderDirection: OrderDirection, where: EarnDailyReward_filter): [EarnDailyReward!]
  days(skip: Int = 0, first: Int = 100, orderBy: Day_orderBy, orderDirection: OrderDirection, where: Day_filter): [Day!]!
}

input Week_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  week: BigInt
  week_not: BigInt
  week_gt: BigInt
  week_lt: BigInt
  week_gte: BigInt
  week_lte: BigInt
  week_in: [BigInt!]
  week_not_in: [BigInt!]
  weekStartTimestamp: BigInt
  weekStartTimestamp_not: BigInt
  weekStartTimestamp_gt: BigInt
  weekStartTimestamp_lt: BigInt
  weekStartTimestamp_gte: BigInt
  weekStartTimestamp_lte: BigInt
  weekStartTimestamp_in: [BigInt!]
  weekStartTimestamp_not_in: [BigInt!]
  weekEndTimestamp: BigInt
  weekEndTimestamp_not: BigInt
  weekEndTimestamp_gt: BigInt
  weekEndTimestamp_lt: BigInt
  weekEndTimestamp_gte: BigInt
  weekEndTimestamp_lte: BigInt
  weekEndTimestamp_in: [BigInt!]
  weekEndTimestamp_not_in: [BigInt!]
  borrowWeeklyRewards_: BorrowDailyReward_filter
  earnWeeklyRewards_: EarnDailyReward_filter
  days_: Day_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Week_filter]
  or: [Week_filter]
}

enum Week_orderBy {
  id
  week
  weekStartTimestamp
  weekEndTimestamp
  borrowWeeklyRewards
  earnWeeklyRewards
  days
}

