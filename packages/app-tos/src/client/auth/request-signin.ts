import { type TOSMessageType } from '@/types'

/**
 * Requests a JSON Web Token (JWT) by sending a signed challenge to the authentication server.
 *
 * @remarks
 * This method sends a POST request to the `/api/auth/signin` endpoint with the provided signature, challenge,
 * chain ID, and Gnosis Safe status. It returns a JWT string on success or undefined if an error occurs.
 *
 * @param signature - The signature generated by signing the challenge.
 * @param challenge - The challenge string to be signed.
 * @param chainId - The chain ID of the blockchain network.
 * @param isGnosisSafe - A boolean indicating if the wallet is a Gnosis Safe.
 * @param cookiePrefix - The prefix of cookie that will be stored as http-only cookie.
 * @param host - Optional, to be used when API is not available under the same host (for example localhost development on different ports).
 * @param type - The type of Terms of Service message to generate.
 *
 * @returns A promise that resolves to the JWT string or undefined if an error occurs.
 * @throws Will log an error to the console if the request fails.
 */
export const requestSignin = async ({
  signature,
  challenge,
  chainId,
  isGnosisSafe,
  cookiePrefix,
  type,
  host = '',
}: {
  signature: string
  challenge: string
  chainId: number
  isGnosisSafe: boolean
  cookiePrefix: string
  type: TOSMessageType
  host?: string
}): Promise<string | undefined> => {
  try {
    const { jwt } = await fetch(`${host}/api/auth/signin`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ signature, challenge, chainId, isGnosisSafe, cookiePrefix, type }),
      credentials: 'include',
    }).then((resp) => resp.json())

    return jwt
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error('Request challenge error', e)

    return undefined
  }
}
