{"abi":[{"type":"function","name":"supply","inputs":[{"name":"asset","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"onBehalfOf","type":"address","internalType":"address"},{"name":"referralCode","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"asset","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"to","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"supply(address,uint256,address,uint16)":"617ba037","withdraw(address,uint256,address)":"69328dec"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supply(address,uint256,address,uint16)\":{\"params\":{\"amount\":\"The amount to be supplied\",\"asset\":\"The address of the underlying asset to supply\",\"onBehalfOf\":\"The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet\",\"referralCode\":\"Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man\"}},\"withdraw(address,uint256,address)\":{\"params\":{\"amount\":\"The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance\",\"asset\":\"The address of the underlying asset to withdraw\",\"to\":\"The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet\"},\"returns\":{\"_0\":\"The final amount withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supply(address,uint256,address,uint16)\":{\"notice\":\"Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/aave-v3/IPoolV3.sol\":\"IPoolV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":metamorpho/=lib/metamorpho/\",\":morpho-blue-irm/=lib/metamorpho/lib/morpho-blue-irm/src/\",\":morpho-blue/=lib/metamorpho/lib/morpho-blue/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/metamorpho/lib/morpho-blue-irm/lib/solmate/src/\"]},\"sources\":{\"src/interfaces/aave-v3/DataTypes.sol\":{\"keccak256\":\"0x9db66d2fb118cc6f7799864c7699e114de814fb27a207be3c039b809339556f8\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://97e068ae5ae6a172565489ea7cc05fbae4ccb9b0f60cf9337c5cb3af20a57c29\",\"dweb:/ipfs/QmbYBqpkNUJfrHgPhzomZeytc13GGBegdpXRMQq6nRaaCX\"]},\"src/interfaces/aave-v3/IPoolAddressesProvider.sol\":{\"keccak256\":\"0xf0c640af791d373ca3c4a8827346df5afe6b0c90536a9ccd067bc7996cbe738e\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://941f7f2df469e545e944118eae77450511f798adc3aefdd984a41a16f5a9e063\",\"dweb:/ipfs/QmNX65Mc3vDyqWFvZnuh8rGPsXEYm1WwVjxSw5jY9RX9vH\"]},\"src/interfaces/aave-v3/IPoolV3.sol\":{\"keccak256\":\"0x8ccc7bade51152fc083d18e9f8246442af6f2b4b39241ca31a3bdf584143069e\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://ee15b3574ccbcab9848e18a56f9eb2692c6c52ab3c589142a5108f4c55b6018d\",\"dweb:/ipfs/QmaNJSwDHakjjPnjBJYaQAakrAXtJvU8TwPc4S87Neko1Z\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"onBehalfOf","type":"address"},{"internalType":"uint16","name":"referralCode","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"supply"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"withdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"supply(address,uint256,address,uint16)":{"params":{"amount":"The amount to be supplied","asset":"The address of the underlying asset to supply","onBehalfOf":"The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet","referralCode":"Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"}},"withdraw(address,uint256,address)":{"params":{"amount":"The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance","asset":"The address of the underlying asset to withdraw","to":"The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"},"returns":{"_0":"The final amount withdrawn"}}},"version":1},"userdoc":{"kind":"user","methods":{"supply(address,uint256,address,uint16)":{"notice":"Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC"},"withdraw(address,uint256,address)":{"notice":"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","metamorpho/=lib/metamorpho/","morpho-blue-irm/=lib/metamorpho/lib/morpho-blue-irm/src/","morpho-blue/=lib/metamorpho/lib/morpho-blue/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solmate/=lib/metamorpho/lib/morpho-blue-irm/lib/solmate/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/aave-v3/IPoolV3.sol":"IPoolV3"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/aave-v3/DataTypes.sol":{"keccak256":"0x9db66d2fb118cc6f7799864c7699e114de814fb27a207be3c039b809339556f8","urls":["bzz-raw://97e068ae5ae6a172565489ea7cc05fbae4ccb9b0f60cf9337c5cb3af20a57c29","dweb:/ipfs/QmbYBqpkNUJfrHgPhzomZeytc13GGBegdpXRMQq6nRaaCX"],"license":"BUSL-1.1"},"src/interfaces/aave-v3/IPoolAddressesProvider.sol":{"keccak256":"0xf0c640af791d373ca3c4a8827346df5afe6b0c90536a9ccd067bc7996cbe738e","urls":["bzz-raw://941f7f2df469e545e944118eae77450511f798adc3aefdd984a41a16f5a9e063","dweb:/ipfs/QmNX65Mc3vDyqWFvZnuh8rGPsXEYm1WwVjxSw5jY9RX9vH"],"license":"AGPL-3.0"},"src/interfaces/aave-v3/IPoolV3.sol":{"keccak256":"0x8ccc7bade51152fc083d18e9f8246442af6f2b4b39241ca31a3bdf584143069e","urls":["bzz-raw://ee15b3574ccbcab9848e18a56f9eb2692c6c52ab3c589142a5108f4c55b6018d","dweb:/ipfs/QmaNJSwDHakjjPnjBJYaQAakrAXtJvU8TwPc4S87Neko1Z"],"license":"AGPL-3.0"}},"version":1},"id":57}