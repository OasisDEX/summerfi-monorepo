{"abi":[{"type":"function","name":"DECIMALS_OFFSET","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"MORPHO","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IMorpho"}],"stateMutability":"view"},{"type":"function","name":"acceptCap","inputs":[{"name":"marketParams","type":"tuple","internalType":"struct MarketParams","components":[{"name":"loanToken","type":"address","internalType":"address"},{"name":"collateralToken","type":"address","internalType":"address"},{"name":"oracle","type":"address","internalType":"address"},{"name":"irm","type":"address","internalType":"address"},{"name":"lltv","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"acceptGuardian","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"acceptTimelock","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"config","inputs":[{"name":"","type":"bytes32","internalType":"Id"}],"outputs":[{"name":"cap","type":"uint184","internalType":"uint184"},{"name":"enabled","type":"bool","internalType":"bool"},{"name":"removableAt","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"curator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"fee","inputs":[],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"feeRecipient","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"guardian","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"isAllocator","inputs":[{"name":"target","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lastTotalAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"pendingCap","inputs":[{"name":"","type":"bytes32","internalType":"Id"}],"outputs":[{"name":"value","type":"uint192","internalType":"uint192"},{"name":"validAt","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"pendingGuardian","inputs":[],"outputs":[{"name":"guardian","type":"address","internalType":"address"},{"name":"validAt","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"pendingTimelock","inputs":[],"outputs":[{"name":"value","type":"uint192","internalType":"uint192"},{"name":"validAt","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"reallocate","inputs":[{"name":"allocations","type":"tuple[]","internalType":"struct MarketAllocation[]","components":[{"name":"marketParams","type":"tuple","internalType":"struct MarketParams","components":[{"name":"loanToken","type":"address","internalType":"address"},{"name":"collateralToken","type":"address","internalType":"address"},{"name":"oracle","type":"address","internalType":"address"},{"name":"irm","type":"address","internalType":"address"},{"name":"lltv","type":"uint256","internalType":"uint256"}]},{"name":"assets","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"revokePendingCap","inputs":[{"name":"id","type":"bytes32","internalType":"Id"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"revokePendingGuardian","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"revokePendingMarketRemoval","inputs":[{"name":"id","type":"bytes32","internalType":"Id"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"revokePendingTimelock","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCurator","inputs":[{"name":"newCurator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setFee","inputs":[{"name":"newFee","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setFeeRecipient","inputs":[{"name":"newFeeRecipient","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setIsAllocator","inputs":[{"name":"newAllocator","type":"address","internalType":"address"},{"name":"newIsAllocator","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setSkimRecipient","inputs":[{"name":"newSkimRecipient","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setSupplyQueue","inputs":[{"name":"newSupplyQueue","type":"bytes32[]","internalType":"Id[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"skim","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"skimRecipient","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"submitCap","inputs":[{"name":"marketParams","type":"tuple","internalType":"struct MarketParams","components":[{"name":"loanToken","type":"address","internalType":"address"},{"name":"collateralToken","type":"address","internalType":"address"},{"name":"oracle","type":"address","internalType":"address"},{"name":"irm","type":"address","internalType":"address"},{"name":"lltv","type":"uint256","internalType":"uint256"}]},{"name":"newSupplyCap","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"submitGuardian","inputs":[{"name":"newGuardian","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"submitMarketRemoval","inputs":[{"name":"marketParams","type":"tuple","internalType":"struct MarketParams","components":[{"name":"loanToken","type":"address","internalType":"address"},{"name":"collateralToken","type":"address","internalType":"address"},{"name":"oracle","type":"address","internalType":"address"},{"name":"irm","type":"address","internalType":"address"},{"name":"lltv","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"submitTimelock","inputs":[{"name":"newTimelock","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supplyQueue","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"Id"}],"stateMutability":"view"},{"type":"function","name":"supplyQueueLength","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"timelock","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"updateWithdrawQueue","inputs":[{"name":"indexes","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdrawQueue","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"Id"}],"stateMutability":"view"},{"type":"function","name":"withdrawQueueLength","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"DECIMALS_OFFSET()":"aea70acc","MORPHO()":"3acb5624","acceptCap((address,address,address,address,uint256))":"6fda3868","acceptGuardian()":"a5f31d61","acceptTimelock()":"8a2c7b39","config(bytes32)":"cc718f76","curator()":"e66f53b7","fee()":"ddca3f43","feeRecipient()":"46904840","guardian()":"452a9320","isAllocator(address)":"4dedf20e","lastTotalAssets()":"568efc07","pendingCap(bytes32)":"a31be5d6","pendingGuardian()":"762c31ba","pendingTimelock()":"7cc4d9a1","reallocate(((address,address,address,address,uint256),uint256)[])":"7299aa31","revokePendingCap(bytes32)":"102f7b6c","revokePendingGuardian()":"1ecca77c","revokePendingMarketRemoval(bytes32)":"4b998de5","revokePendingTimelock()":"c9649aa9","setCurator(address)":"e90956cf","setFee(uint256)":"69fe0e2d","setFeeRecipient(address)":"e74b981b","setIsAllocator(address,bool)":"b192a84a","setSkimRecipient(address)":"2b30997b","setSupplyQueue(bytes32[])":"2acc56f9","skim(address)":"bc25cf77","skimRecipient()":"388af5b5","submitCap((address,address,address,address,uint256),uint256)":"3b24c2bf","submitGuardian(address)":"9d6b4a45","submitMarketRemoval((address,address,address,address,uint256))":"84755b5f","submitTimelock(uint256)":"7224a512","supplyQueue(uint256)":"f7d18521","supplyQueueLength()":"a17b3130","timelock()":"d33219b4","updateWithdrawQueue(uint256[])":"41b67833","withdrawQueue(uint256)":"62518ddf","withdrawQueueLength()":"33f91ebb"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DECIMALS_OFFSET\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MORPHO\",\"outputs\":[{\"internalType\":\"contract IMorpho\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"}],\"name\":\"acceptCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Id\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint184\",\"name\":\"cap\",\"type\":\"uint184\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"removableAt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Id\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingCap\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"value\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"validAt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validAt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTimelock\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"value\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"validAt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketAllocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"name\":\"reallocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Id\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"revokePendingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokePendingGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Id\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"revokePendingMarketRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokePendingTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCurator\",\"type\":\"address\"}],\"name\":\"setCurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAllocator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newIsAllocator\",\"type\":\"bool\"}],\"name\":\"setIsAllocator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSkimRecipient\",\"type\":\"address\"}],\"name\":\"setSkimRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Id[]\",\"name\":\"newSupplyQueue\",\"type\":\"bytes32[]\"}],\"name\":\"setSupplyQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skimRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"submitCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"submitGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"}],\"name\":\"submitMarketRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimelock\",\"type\":\"uint256\"}],\"name\":\"submitTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyQueue\",\"outputs\":[{\"internalType\":\"Id\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"updateWithdrawQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawQueue\",\"outputs\":[{\"internalType\":\"Id\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface is inherited by MetaMorpho so that function signatures are checked by the compiler.Consider using the IMetaMorpho interface instead of this one.\",\"kind\":\"dev\",\"methods\":{\"lastTotalAssets()\":{\"details\":\"May be greater than `totalAssets()` due to removal of markets with non-zero supply or socialized bad debt. This difference will decrease the fee accrued until one of the functions updating `lastTotalAssets` is triggered (deposit/mint/withdraw/redeem/setFee/setFeeRecipient).\"},\"reallocate(((address,address,address,address,uint256),uint256)[])\":{\"details\":\"The behavior of the reallocation can be altered by state changes, including: - Deposits on the vault that supplies to markets that are expected to be supplied to during reallocation. - Withdrawals from the vault that withdraws from markets that are expected to be withdrawn from during reallocation. - Donations to the vault on markets that are expected to be supplied to during reallocation. - Withdrawals from markets that are expected to be withdrawn from during reallocation.Sender is expected to pass `assets = type(uint256).max` with the last MarketAllocation of `allocations` to supply all the remaining withdrawn liquidity, which would ensure that `totalWithdrawn` = `totalSupplied`.A supply in a reallocation step will make the reallocation revert if the amount is greater than the net amount from previous steps (i.e. total withdrawn minus total supplied).\"},\"revokePendingCap(bytes32)\":{\"details\":\"Does not revert if there is no pending cap.\"},\"revokePendingMarketRemoval(bytes32)\":{\"details\":\"Does not revert if there is no pending market removal.\"},\"revokePendingTimelock()\":{\"details\":\"Does not revert if there is no pending timelock.\"},\"setSupplyQueue(bytes32[])\":{\"params\":{\"newSupplyQueue\":\"is an array of enabled markets, and can contain duplicate markets, but it would only increase the cost of depositing to the vault.\"}},\"submitCap((address,address,address,address,uint256),uint256)\":{\"details\":\"Warning: Reverts if a cap is already pending. Revoke the pending cap to overwrite it.Warning: Reverts if a market removal is pending.In case the new cap is lower than the current one, the cap is set immediately.\"},\"submitGuardian(address)\":{\"details\":\"In case there is no guardian, the gardian is set immediately.Warning: Submitting a gardian will overwrite the current pending gardian.\"},\"submitMarketRemoval((address,address,address,address,uint256))\":{\"details\":\"Warning: Removing a market with non-zero supply will instantly impact the vault's price per share.Warning: Reverts for non-zero cap or if there is a pending cap. Successfully submitting a zero cap will prevent such reverts.\"},\"submitTimelock(uint256)\":{\"details\":\"Warning: Reverts if a timelock is already pending. Revoke the pending timelock to overwrite it.In case the new timelock is higher than the current one, the timelock is set immediately.\"},\"supplyQueue(uint256)\":{\"details\":\"Stores the order of markets on which liquidity is supplied upon deposit.Can contain any market. A market is skipped as soon as its supply cap is reached.\"},\"updateWithdrawQueue(uint256[])\":{\"details\":\"Warning: Removing a market with supply will decrease the fee accrued until one of the functions updating `lastTotalAssets` is triggered (deposit/mint/withdraw/redeem/setFee/setFeeRecipient).Warning: `updateWithdrawQueue` is not idempotent. Submitting twice the same tx will change the queue twice.\",\"params\":{\"indexes\":\"The indexes of each market in the previous withdraw queue, in the new withdraw queue's order.\"}},\"withdrawQueue(uint256)\":{\"details\":\"Stores the order of markets from which liquidity is withdrawn upon withdrawal.Always contain all non-zero cap markets as well as all markets on which the vault supplies liquidity, without duplicate.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MORPHO()\":{\"notice\":\"The address of the Morpho contract.\"},\"acceptCap((address,address,address,address,uint256))\":{\"notice\":\"Accepts the pending cap of the market defined by `marketParams`.\"},\"acceptGuardian()\":{\"notice\":\"Accepts the pending guardian.\"},\"acceptTimelock()\":{\"notice\":\"Accepts the pending timelock.\"},\"config(bytes32)\":{\"notice\":\"Returns the current configuration of each market.\"},\"curator()\":{\"notice\":\"The address of the curator.\"},\"fee()\":{\"notice\":\"The current fee.\"},\"feeRecipient()\":{\"notice\":\"The fee recipient.\"},\"guardian()\":{\"notice\":\"The current guardian. Can be set even without the timelock set.\"},\"isAllocator(address)\":{\"notice\":\"Stores whether an address is an allocator or not.\"},\"lastTotalAssets()\":{\"notice\":\"Stores the total assets managed by this vault when the fee was last accrued.\"},\"pendingCap(bytes32)\":{\"notice\":\"Returns the pending cap for each market.\"},\"pendingGuardian()\":{\"notice\":\"Returns the pending guardian.\"},\"pendingTimelock()\":{\"notice\":\"Returns the pending timelock.\"},\"reallocate(((address,address,address,address,uint256),uint256)[])\":{\"notice\":\"Reallocates the vault's liquidity so as to reach a given allocation of assets on each given market.\"},\"revokePendingCap(bytes32)\":{\"notice\":\"Revokes the pending cap of the market defined by `id`.\"},\"revokePendingGuardian()\":{\"notice\":\"Revokes the pending guardian.\"},\"revokePendingMarketRemoval(bytes32)\":{\"notice\":\"Revokes the pending removal of the market defined by `id`.\"},\"revokePendingTimelock()\":{\"notice\":\"Revokes the pending timelock.\"},\"setCurator(address)\":{\"notice\":\"Sets `curator` to `newCurator`.\"},\"setFee(uint256)\":{\"notice\":\"Sets the `fee` to `newFee`.\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets `feeRecipient` to `newFeeRecipient`.\"},\"setIsAllocator(address,bool)\":{\"notice\":\"Sets `newAllocator` as an allocator or not (`newIsAllocator`).\"},\"setSkimRecipient(address)\":{\"notice\":\"Sets `skimRecipient` to `newSkimRecipient`.\"},\"setSupplyQueue(bytes32[])\":{\"notice\":\"Sets `supplyQueue` to `newSupplyQueue`.\"},\"skim(address)\":{\"notice\":\"Skims the vault `token` balance to `skimRecipient`.\"},\"skimRecipient()\":{\"notice\":\"The skim recipient.\"},\"submitCap((address,address,address,address,uint256),uint256)\":{\"notice\":\"Submits a `newSupplyCap` for the market defined by `marketParams`.\"},\"submitGuardian(address)\":{\"notice\":\"Submits a `newGuardian`.Warning: a malicious guardian could disrupt the vault's operation, and would have the power to revoke any pending guardian.\"},\"submitMarketRemoval((address,address,address,address,uint256))\":{\"notice\":\"Submits a forced market removal from the vault, eventually losing all funds supplied to the market.Funds can be recovered by enabling this market again and withdrawing from it (using `reallocate`), but funds will be distributed pro-rata to the shares at the time of withdrawal, not at the time of removal.This forced removal is expected to be used as an emergency process in case a market constantly reverts. To softly remove a sane market, the curator role is expected to bundle a reallocation that empties the market first (using `reallocate`), followed by the removal of the market (using `updateWithdrawQueue`).\"},\"submitTimelock(uint256)\":{\"notice\":\"Submits a `newTimelock`.\"},\"supplyQueueLength()\":{\"notice\":\"Returns the length of the supply queue.\"},\"timelock()\":{\"notice\":\"The current timelock.\"},\"updateWithdrawQueue(uint256[])\":{\"notice\":\"Updates the withdraw queue. Some markets can be removed, but no market can be added.Removing a market requires the vault to have 0 supply on it, or to have previously submitted a removal for this market (with the function `submitMarketRemoval`).Warning: Anyone can supply on behalf of the vault so the call to `updateWithdrawQueue` that expects a market to be empty can be griefed by a front-run. To circumvent this, the allocator can simply bundle a reallocation that withdraws max from this market with a call to `updateWithdrawQueue`.\"},\"withdrawQueueLength()\":{\"notice\":\"Returns the length of the withdraw queue.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/metamorpho/src/interfaces/IMetaMorpho.sol\":\"IMetaMorphoStaticTyping\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":metamorpho/=lib/metamorpho/src/\",\":morpho-blue-irm/=lib/metamorpho/lib/morpho-blue-irm/src/\",\":morpho-blue/=lib/metamorpho/lib/morpho-blue/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/metamorpho/lib/morpho-blue-irm/lib/solmate/src/\"]},\"sources\":{\"lib/metamorpho/lib/morpho-blue/src/interfaces/IMorpho.sol\":{\"keccak256\":\"0xee9fbe10e0cd31b8d4c2c2effadaf337a6c6c43c9bdb94d2cad79fdffc47a86e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bc94b9b24900994cba898911edf82545052e738f6c9c2a7a56589c122014d363\",\"dweb:/ipfs/QmXp9qkTnoPoio6KvdCFnCVW6Tjfb4Kbd4zByuiwQwwmwx\"]},\"lib/metamorpho/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"lib/metamorpho/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/metamorpho/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/metamorpho/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/metamorpho/src/interfaces/IMetaMorpho.sol\":{\"keccak256\":\"0xed5ededea01237aee38fd0faa6dd115458106089774dbe06b849770185ecbf83\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b2c089ef03f080cff92924405c5005dbf57a5e0dcdcb9fe903fb49ead5a144ef\",\"dweb:/ipfs/QmaLeYT4HD8vWaL5HCTzJPn3LGAqjx1NP5y9n3CnhwByRc\"]},\"lib/metamorpho/src/libraries/PendingLib.sol\":{\"keccak256\":\"0x7e6e657bc9d4e79350408d028027befd676d3b3ee579918a5a5fc71067310837\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://63aab8ffd04ae14969e4beea204190ad442e96c351137e910450abd545ef2598\",\"dweb:/ipfs/QmQfeYaoANgjv1xXS9LbuKFhvh94r6Rd4jiQ4o69mmv1rB\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"DECIMALS_OFFSET","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"MORPHO","outputs":[{"internalType":"contract IMorpho","name":"","type":"address"}]},{"inputs":[{"internalType":"struct MarketParams","name":"marketParams","type":"tuple","components":[{"internalType":"address","name":"loanToken","type":"address"},{"internalType":"address","name":"collateralToken","type":"address"},{"internalType":"address","name":"oracle","type":"address"},{"internalType":"address","name":"irm","type":"address"},{"internalType":"uint256","name":"lltv","type":"uint256"}]}],"stateMutability":"nonpayable","type":"function","name":"acceptCap"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"acceptGuardian"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"acceptTimelock"},{"inputs":[{"internalType":"Id","name":"","type":"bytes32"}],"stateMutability":"view","type":"function","name":"config","outputs":[{"internalType":"uint184","name":"cap","type":"uint184"},{"internalType":"bool","name":"enabled","type":"bool"},{"internalType":"uint64","name":"removableAt","type":"uint64"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"curator","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"fee","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"feeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"guardian","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"stateMutability":"view","type":"function","name":"isAllocator","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastTotalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"Id","name":"","type":"bytes32"}],"stateMutability":"view","type":"function","name":"pendingCap","outputs":[{"internalType":"uint192","name":"value","type":"uint192"},{"internalType":"uint64","name":"validAt","type":"uint64"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"pendingGuardian","outputs":[{"internalType":"address","name":"guardian","type":"address"},{"internalType":"uint64","name":"validAt","type":"uint64"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"pendingTimelock","outputs":[{"internalType":"uint192","name":"value","type":"uint192"},{"internalType":"uint64","name":"validAt","type":"uint64"}]},{"inputs":[{"internalType":"struct MarketAllocation[]","name":"allocations","type":"tuple[]","components":[{"internalType":"struct MarketParams","name":"marketParams","type":"tuple","components":[{"internalType":"address","name":"loanToken","type":"address"},{"internalType":"address","name":"collateralToken","type":"address"},{"internalType":"address","name":"oracle","type":"address"},{"internalType":"address","name":"irm","type":"address"},{"internalType":"uint256","name":"lltv","type":"uint256"}]},{"internalType":"uint256","name":"assets","type":"uint256"}]}],"stateMutability":"nonpayable","type":"function","name":"reallocate"},{"inputs":[{"internalType":"Id","name":"id","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"revokePendingCap"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"revokePendingGuardian"},{"inputs":[{"internalType":"Id","name":"id","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"revokePendingMarketRemoval"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"revokePendingTimelock"},{"inputs":[{"internalType":"address","name":"newCurator","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setCurator"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setFee"},{"inputs":[{"internalType":"address","name":"newFeeRecipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setFeeRecipient"},{"inputs":[{"internalType":"address","name":"newAllocator","type":"address"},{"internalType":"bool","name":"newIsAllocator","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setIsAllocator"},{"inputs":[{"internalType":"address","name":"newSkimRecipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setSkimRecipient"},{"inputs":[{"internalType":"Id[]","name":"newSupplyQueue","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"setSupplyQueue"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"skim"},{"inputs":[],"stateMutability":"view","type":"function","name":"skimRecipient","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"struct MarketParams","name":"marketParams","type":"tuple","components":[{"internalType":"address","name":"loanToken","type":"address"},{"internalType":"address","name":"collateralToken","type":"address"},{"internalType":"address","name":"oracle","type":"address"},{"internalType":"address","name":"irm","type":"address"},{"internalType":"uint256","name":"lltv","type":"uint256"}]},{"internalType":"uint256","name":"newSupplyCap","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"submitCap"},{"inputs":[{"internalType":"address","name":"newGuardian","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"submitGuardian"},{"inputs":[{"internalType":"struct MarketParams","name":"marketParams","type":"tuple","components":[{"internalType":"address","name":"loanToken","type":"address"},{"internalType":"address","name":"collateralToken","type":"address"},{"internalType":"address","name":"oracle","type":"address"},{"internalType":"address","name":"irm","type":"address"},{"internalType":"uint256","name":"lltv","type":"uint256"}]}],"stateMutability":"nonpayable","type":"function","name":"submitMarketRemoval"},{"inputs":[{"internalType":"uint256","name":"newTimelock","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"submitTimelock"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"supplyQueue","outputs":[{"internalType":"Id","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"supplyQueueLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"timelock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256[]","name":"indexes","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"updateWithdrawQueue"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"withdrawQueue","outputs":[{"internalType":"Id","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"withdrawQueueLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"lastTotalAssets()":{"details":"May be greater than `totalAssets()` due to removal of markets with non-zero supply or socialized bad debt. This difference will decrease the fee accrued until one of the functions updating `lastTotalAssets` is triggered (deposit/mint/withdraw/redeem/setFee/setFeeRecipient)."},"reallocate(((address,address,address,address,uint256),uint256)[])":{"details":"The behavior of the reallocation can be altered by state changes, including: - Deposits on the vault that supplies to markets that are expected to be supplied to during reallocation. - Withdrawals from the vault that withdraws from markets that are expected to be withdrawn from during reallocation. - Donations to the vault on markets that are expected to be supplied to during reallocation. - Withdrawals from markets that are expected to be withdrawn from during reallocation.Sender is expected to pass `assets = type(uint256).max` with the last MarketAllocation of `allocations` to supply all the remaining withdrawn liquidity, which would ensure that `totalWithdrawn` = `totalSupplied`.A supply in a reallocation step will make the reallocation revert if the amount is greater than the net amount from previous steps (i.e. total withdrawn minus total supplied)."},"revokePendingCap(bytes32)":{"details":"Does not revert if there is no pending cap."},"revokePendingMarketRemoval(bytes32)":{"details":"Does not revert if there is no pending market removal."},"revokePendingTimelock()":{"details":"Does not revert if there is no pending timelock."},"setSupplyQueue(bytes32[])":{"params":{"newSupplyQueue":"is an array of enabled markets, and can contain duplicate markets, but it would only increase the cost of depositing to the vault."}},"submitCap((address,address,address,address,uint256),uint256)":{"details":"Warning: Reverts if a cap is already pending. Revoke the pending cap to overwrite it.Warning: Reverts if a market removal is pending.In case the new cap is lower than the current one, the cap is set immediately."},"submitGuardian(address)":{"details":"In case there is no guardian, the gardian is set immediately.Warning: Submitting a gardian will overwrite the current pending gardian."},"submitMarketRemoval((address,address,address,address,uint256))":{"details":"Warning: Removing a market with non-zero supply will instantly impact the vault's price per share.Warning: Reverts for non-zero cap or if there is a pending cap. Successfully submitting a zero cap will prevent such reverts."},"submitTimelock(uint256)":{"details":"Warning: Reverts if a timelock is already pending. Revoke the pending timelock to overwrite it.In case the new timelock is higher than the current one, the timelock is set immediately."},"supplyQueue(uint256)":{"details":"Stores the order of markets on which liquidity is supplied upon deposit.Can contain any market. A market is skipped as soon as its supply cap is reached."},"updateWithdrawQueue(uint256[])":{"details":"Warning: Removing a market with supply will decrease the fee accrued until one of the functions updating `lastTotalAssets` is triggered (deposit/mint/withdraw/redeem/setFee/setFeeRecipient).Warning: `updateWithdrawQueue` is not idempotent. Submitting twice the same tx will change the queue twice.","params":{"indexes":"The indexes of each market in the previous withdraw queue, in the new withdraw queue's order."}},"withdrawQueue(uint256)":{"details":"Stores the order of markets from which liquidity is withdrawn upon withdrawal.Always contain all non-zero cap markets as well as all markets on which the vault supplies liquidity, without duplicate."}},"version":1},"userdoc":{"kind":"user","methods":{"MORPHO()":{"notice":"The address of the Morpho contract."},"acceptCap((address,address,address,address,uint256))":{"notice":"Accepts the pending cap of the market defined by `marketParams`."},"acceptGuardian()":{"notice":"Accepts the pending guardian."},"acceptTimelock()":{"notice":"Accepts the pending timelock."},"config(bytes32)":{"notice":"Returns the current configuration of each market."},"curator()":{"notice":"The address of the curator."},"fee()":{"notice":"The current fee."},"feeRecipient()":{"notice":"The fee recipient."},"guardian()":{"notice":"The current guardian. Can be set even without the timelock set."},"isAllocator(address)":{"notice":"Stores whether an address is an allocator or not."},"lastTotalAssets()":{"notice":"Stores the total assets managed by this vault when the fee was last accrued."},"pendingCap(bytes32)":{"notice":"Returns the pending cap for each market."},"pendingGuardian()":{"notice":"Returns the pending guardian."},"pendingTimelock()":{"notice":"Returns the pending timelock."},"reallocate(((address,address,address,address,uint256),uint256)[])":{"notice":"Reallocates the vault's liquidity so as to reach a given allocation of assets on each given market."},"revokePendingCap(bytes32)":{"notice":"Revokes the pending cap of the market defined by `id`."},"revokePendingGuardian()":{"notice":"Revokes the pending guardian."},"revokePendingMarketRemoval(bytes32)":{"notice":"Revokes the pending removal of the market defined by `id`."},"revokePendingTimelock()":{"notice":"Revokes the pending timelock."},"setCurator(address)":{"notice":"Sets `curator` to `newCurator`."},"setFee(uint256)":{"notice":"Sets the `fee` to `newFee`."},"setFeeRecipient(address)":{"notice":"Sets `feeRecipient` to `newFeeRecipient`."},"setIsAllocator(address,bool)":{"notice":"Sets `newAllocator` as an allocator or not (`newIsAllocator`)."},"setSkimRecipient(address)":{"notice":"Sets `skimRecipient` to `newSkimRecipient`."},"setSupplyQueue(bytes32[])":{"notice":"Sets `supplyQueue` to `newSupplyQueue`."},"skim(address)":{"notice":"Skims the vault `token` balance to `skimRecipient`."},"skimRecipient()":{"notice":"The skim recipient."},"submitCap((address,address,address,address,uint256),uint256)":{"notice":"Submits a `newSupplyCap` for the market defined by `marketParams`."},"submitGuardian(address)":{"notice":"Submits a `newGuardian`.Warning: a malicious guardian could disrupt the vault's operation, and would have the power to revoke any pending guardian."},"submitMarketRemoval((address,address,address,address,uint256))":{"notice":"Submits a forced market removal from the vault, eventually losing all funds supplied to the market.Funds can be recovered by enabling this market again and withdrawing from it (using `reallocate`), but funds will be distributed pro-rata to the shares at the time of withdrawal, not at the time of removal.This forced removal is expected to be used as an emergency process in case a market constantly reverts. To softly remove a sane market, the curator role is expected to bundle a reallocation that empties the market first (using `reallocate`), followed by the removal of the market (using `updateWithdrawQueue`)."},"submitTimelock(uint256)":{"notice":"Submits a `newTimelock`."},"supplyQueueLength()":{"notice":"Returns the length of the supply queue."},"timelock()":{"notice":"The current timelock."},"updateWithdrawQueue(uint256[])":{"notice":"Updates the withdraw queue. Some markets can be removed, but no market can be added.Removing a market requires the vault to have 0 supply on it, or to have previously submitted a removal for this market (with the function `submitMarketRemoval`).Warning: Anyone can supply on behalf of the vault so the call to `updateWithdrawQueue` that expects a market to be empty can be griefed by a front-run. To circumvent this, the allocator can simply bundle a reallocation that withdraws max from this market with a call to `updateWithdrawQueue`."},"withdrawQueueLength()":{"notice":"Returns the length of the withdraw queue."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","metamorpho/=lib/metamorpho/src/","morpho-blue-irm/=lib/metamorpho/lib/morpho-blue-irm/src/","morpho-blue/=lib/metamorpho/lib/morpho-blue/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solmate/=lib/metamorpho/lib/morpho-blue-irm/lib/solmate/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/metamorpho/src/interfaces/IMetaMorpho.sol":"IMetaMorphoStaticTyping"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/metamorpho/lib/morpho-blue/src/interfaces/IMorpho.sol":{"keccak256":"0xee9fbe10e0cd31b8d4c2c2effadaf337a6c6c43c9bdb94d2cad79fdffc47a86e","urls":["bzz-raw://bc94b9b24900994cba898911edf82545052e738f6c9c2a7a56589c122014d363","dweb:/ipfs/QmXp9qkTnoPoio6KvdCFnCVW6Tjfb4Kbd4zByuiwQwwmwx"],"license":"GPL-2.0-or-later"},"lib/metamorpho/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol":{"keccak256":"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d","urls":["bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205","dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx"],"license":"MIT"},"lib/metamorpho/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"},"lib/metamorpho/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2","urls":["bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850","dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"],"license":"MIT"},"lib/metamorpho/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff","urls":["bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d","dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"],"license":"MIT"},"lib/metamorpho/src/interfaces/IMetaMorpho.sol":{"keccak256":"0xed5ededea01237aee38fd0faa6dd115458106089774dbe06b849770185ecbf83","urls":["bzz-raw://b2c089ef03f080cff92924405c5005dbf57a5e0dcdcb9fe903fb49ead5a144ef","dweb:/ipfs/QmaLeYT4HD8vWaL5HCTzJPn3LGAqjx1NP5y9n3CnhwByRc"],"license":"GPL-2.0-or-later"},"lib/metamorpho/src/libraries/PendingLib.sol":{"keccak256":"0x7e6e657bc9d4e79350408d028027befd676d3b3ee579918a5a5fc71067310837","urls":["bzz-raw://63aab8ffd04ae14969e4beea204190ad442e96c351137e910450abd545ef2598","dweb:/ipfs/QmQfeYaoANgjv1xXS9LbuKFhvh94r6Rd4jiQ4o69mmv1rB"],"license":"GPL-2.0-or-later"}},"version":1},"id":37}