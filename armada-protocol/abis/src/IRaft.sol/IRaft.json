{"abi":[{"type":"function","name":"getHarvestedRewards","inputs":[{"name":"ark","type":"address","internalType":"address"},{"name":"rewardToken","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"harvest","inputs":[{"name":"ark","type":"address","internalType":"address"},{"name":"rewardToken","type":"address","internalType":"address"},{"name":"extraHarvestData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"harvestAndBoard","inputs":[{"name":"ark","type":"address","internalType":"address"},{"name":"rewardToken","type":"address","internalType":"address"},{"name":"swapData","type":"tuple","internalType":"struct SwapData","components":[{"name":"fromAsset","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"receiveAtLeast","type":"uint256","internalType":"uint256"},{"name":"withData","type":"bytes","internalType":"bytes"}]},{"name":"extraHarvestData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"swapAndBoard","inputs":[{"name":"ark","type":"address","internalType":"address"},{"name":"rewardToken","type":"address","internalType":"address"},{"name":"swapData","type":"tuple","internalType":"struct SwapData","components":[{"name":"fromAsset","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"receiveAtLeast","type":"uint256","internalType":"uint256"},{"name":"withData","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ArkHarvested","inputs":[{"name":"ark","type":"address","indexed":true,"internalType":"address"},{"name":"rewardToken","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RewardBoarded","inputs":[{"name":"ark","type":"address","indexed":true,"internalType":"address"},{"name":"fromRewardToken","type":"address","indexed":true,"internalType":"address"},{"name":"toFleetToken","type":"address","indexed":true,"internalType":"address"},{"name":"amountReboarded","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RewardSwapped","inputs":[{"name":"rewardIn","type":"address","indexed":true,"internalType":"address"},{"name":"fleetTokenOut","type":"address","indexed":true,"internalType":"address"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getHarvestedRewards(address,address)":"afd44dfe","harvest(address,address,bytes)":"a782a857","harvestAndBoard(address,address,(address,uint256,uint256,bytes),bytes)":"012f072f","swapAndBoard(address,address,(address,uint256,uint256,bytes))":"53448c9c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ark\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"ArkHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ark\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromRewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFleetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReboarded\",\"type\":\"uint256\"}],\"name\":\"RewardBoarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetTokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"RewardSwapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ark\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getHarvestedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ark\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraHarvestData\",\"type\":\"bytes\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ark\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveAtLeast\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"withData\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraHarvestData\",\"type\":\"bytes\"}],\"name\":\"harvestAndBoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ark\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveAtLeast\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"withData\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"}],\"name\":\"swapAndBoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface defines the core functionality for managing rewards from various Arks.\",\"kind\":\"dev\",\"methods\":{\"getHarvestedRewards(address,address)\":{\"details\":\"This function allows querying the balance of harvested rewards before deciding on further actions.\",\"params\":{\"ark\":\"The address of the Ark contract.\",\"rewardToken\":\"The address of the reward token.\"},\"returns\":{\"_0\":\"The amount of harvested rewards for the specified Ark and token.\"}},\"harvest(address,address,bytes)\":{\"details\":\"This function only collects rewards, storing them in the Raft contract for later use.\",\"params\":{\"ark\":\"The address of the Ark contract to harvest rewards from.\",\"extraHarvestData\":\"Additional data required by a protocol to harvest\",\"rewardToken\":\"The address of the reward token to be harvested.\"}},\"harvestAndBoard(address,address,(address,uint256,uint256,bytes),bytes)\":{\"details\":\"This function combines harvesting, swapping, and reinvesting in a single transaction.\",\"params\":{\"ark\":\"The address of the Ark contract to harvest rewards from.\",\"extraHarvestData\":\"Additional data required by a protocol to harvest\",\"rewardToken\":\"The address of the reward token to be harvested and swapped.\",\"swapData\":\"Data required for the swap operation, including the target token and minimum received amount.\"}},\"swapAndBoard(address,address,(address,uint256,uint256,bytes))\":{\"details\":\"This function assumes rewards have already been harvested and are held by the Raft contract.\",\"params\":{\"ark\":\"The address of the Ark contract to reinvest into.\",\"rewardToken\":\"The address of the harvested reward token to be swapped.\",\"swapData\":\"Data required for the swap operation, including the target token and minimum received amount.\"}}},\"title\":\"IRaft\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHarvestedRewards(address,address)\":{\"notice\":\"Retrieves the amount of harvested rewards for a specific Ark and reward token.\"},\"harvest(address,address,bytes)\":{\"notice\":\"Harvests rewards from the specified Ark without swapping or reinvesting.\"},\"harvestAndBoard(address,address,(address,uint256,uint256,bytes),bytes)\":{\"notice\":\"Harvests rewards from the specified Ark, swaps them, and reinvests the proceeds.\"},\"swapAndBoard(address,address,(address,uint256,uint256,bytes))\":{\"notice\":\"Swaps previously harvested rewards and reinvests them into the specified Ark.\"}},\"notice\":\"Interface for the Raft contract which manages harvesting, swapping, and reinvesting of rewards.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IRaft.sol\":\"IRaft\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":metamorpho/=lib/metamorpho/src/\",\":morpho-blue-irm/=lib/metamorpho/lib/morpho-blue-irm/src/\",\":morpho-blue/=lib/metamorpho/lib/morpho-blue/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/metamorpho/lib/morpho-blue-irm/lib/solmate/src/\"]},\"sources\":{\"src/interfaces/IRaft.sol\":{\"keccak256\":\"0x6d107cab5e66d9e60c28613698f05d533b8d4ca69563c9ba190429e105d722dc\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://f0a0c8e4d35e9010331b8157d6517ee256f9fbda821b76c9789b0fa4e100edf0\",\"dweb:/ipfs/QmUkciD1r4mcyxZF1ieYy1PG4JDEGWjLyowu2SUYG7DpEK\"]},\"src/interfaces/IRaftEvents.sol\":{\"keccak256\":\"0x526a401d1666ed5976589f7caed72e4d17dfef2ce2241db8e0473f31ea94e8fd\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c64ae29f6122aedbc7b9b976e9498602dc816a53bc12641a49af6227b5a429cf\",\"dweb:/ipfs/QmZa6ZJG71FYX7qM1Wnwz3dMiFcthv5zHZ6xT1cZBkh2Za\"]},\"src/types/RaftTypes.sol\":{\"keccak256\":\"0x9f59ea755c152e1620a851a5047bf64c5d06ed5ee537420a926e700f2a69c55c\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://461f0e3ee03404127c8cfbf65ac112ac59bc2c642d9074071a3844107da8ce30\",\"dweb:/ipfs/QmZCGkKzFymFQPvrFVDA5X93QXT17XqYkX1JSN4hmDpTPh\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"ark","type":"address","indexed":true},{"internalType":"address","name":"rewardToken","type":"address","indexed":true}],"type":"event","name":"ArkHarvested","anonymous":false},{"inputs":[{"internalType":"address","name":"ark","type":"address","indexed":true},{"internalType":"address","name":"fromRewardToken","type":"address","indexed":true},{"internalType":"address","name":"toFleetToken","type":"address","indexed":true},{"internalType":"uint256","name":"amountReboarded","type":"uint256","indexed":false}],"type":"event","name":"RewardBoarded","anonymous":false},{"inputs":[{"internalType":"address","name":"rewardIn","type":"address","indexed":true},{"internalType":"address","name":"fleetTokenOut","type":"address","indexed":true},{"internalType":"uint256","name":"amountIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"amountOut","type":"uint256","indexed":false}],"type":"event","name":"RewardSwapped","anonymous":false},{"inputs":[{"internalType":"address","name":"ark","type":"address"},{"internalType":"address","name":"rewardToken","type":"address"}],"stateMutability":"view","type":"function","name":"getHarvestedRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"ark","type":"address"},{"internalType":"address","name":"rewardToken","type":"address"},{"internalType":"bytes","name":"extraHarvestData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"harvest"},{"inputs":[{"internalType":"address","name":"ark","type":"address"},{"internalType":"address","name":"rewardToken","type":"address"},{"internalType":"struct SwapData","name":"swapData","type":"tuple","components":[{"internalType":"address","name":"fromAsset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"receiveAtLeast","type":"uint256"},{"internalType":"bytes","name":"withData","type":"bytes"}]},{"internalType":"bytes","name":"extraHarvestData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"harvestAndBoard"},{"inputs":[{"internalType":"address","name":"ark","type":"address"},{"internalType":"address","name":"rewardToken","type":"address"},{"internalType":"struct SwapData","name":"swapData","type":"tuple","components":[{"internalType":"address","name":"fromAsset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"receiveAtLeast","type":"uint256"},{"internalType":"bytes","name":"withData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"swapAndBoard"}],"devdoc":{"kind":"dev","methods":{"getHarvestedRewards(address,address)":{"details":"This function allows querying the balance of harvested rewards before deciding on further actions.","params":{"ark":"The address of the Ark contract.","rewardToken":"The address of the reward token."},"returns":{"_0":"The amount of harvested rewards for the specified Ark and token."}},"harvest(address,address,bytes)":{"details":"This function only collects rewards, storing them in the Raft contract for later use.","params":{"ark":"The address of the Ark contract to harvest rewards from.","extraHarvestData":"Additional data required by a protocol to harvest","rewardToken":"The address of the reward token to be harvested."}},"harvestAndBoard(address,address,(address,uint256,uint256,bytes),bytes)":{"details":"This function combines harvesting, swapping, and reinvesting in a single transaction.","params":{"ark":"The address of the Ark contract to harvest rewards from.","extraHarvestData":"Additional data required by a protocol to harvest","rewardToken":"The address of the reward token to be harvested and swapped.","swapData":"Data required for the swap operation, including the target token and minimum received amount."}},"swapAndBoard(address,address,(address,uint256,uint256,bytes))":{"details":"This function assumes rewards have already been harvested and are held by the Raft contract.","params":{"ark":"The address of the Ark contract to reinvest into.","rewardToken":"The address of the harvested reward token to be swapped.","swapData":"Data required for the swap operation, including the target token and minimum received amount."}}},"version":1},"userdoc":{"kind":"user","methods":{"getHarvestedRewards(address,address)":{"notice":"Retrieves the amount of harvested rewards for a specific Ark and reward token."},"harvest(address,address,bytes)":{"notice":"Harvests rewards from the specified Ark without swapping or reinvesting."},"harvestAndBoard(address,address,(address,uint256,uint256,bytes),bytes)":{"notice":"Harvests rewards from the specified Ark, swaps them, and reinvests the proceeds."},"swapAndBoard(address,address,(address,uint256,uint256,bytes))":{"notice":"Swaps previously harvested rewards and reinvests them into the specified Ark."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","metamorpho/=lib/metamorpho/src/","morpho-blue-irm/=lib/metamorpho/lib/morpho-blue-irm/src/","morpho-blue/=lib/metamorpho/lib/morpho-blue/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solmate/=lib/metamorpho/lib/morpho-blue-irm/lib/solmate/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IRaft.sol":"IRaft"},"evmVersion":"cancun","libraries":{}},"sources":{"src/interfaces/IRaft.sol":{"keccak256":"0x6d107cab5e66d9e60c28613698f05d533b8d4ca69563c9ba190429e105d722dc","urls":["bzz-raw://f0a0c8e4d35e9010331b8157d6517ee256f9fbda821b76c9789b0fa4e100edf0","dweb:/ipfs/QmUkciD1r4mcyxZF1ieYy1PG4JDEGWjLyowu2SUYG7DpEK"],"license":"BUSL-1.1"},"src/interfaces/IRaftEvents.sol":{"keccak256":"0x526a401d1666ed5976589f7caed72e4d17dfef2ce2241db8e0473f31ea94e8fd","urls":["bzz-raw://c64ae29f6122aedbc7b9b976e9498602dc816a53bc12641a49af6227b5a429cf","dweb:/ipfs/QmZa6ZJG71FYX7qM1Wnwz3dMiFcthv5zHZ6xT1cZBkh2Za"],"license":"BUSL-1.1"},"src/types/RaftTypes.sol":{"keccak256":"0x9f59ea755c152e1620a851a5047bf64c5d06ed5ee537420a926e700f2a69c55c","urls":["bzz-raw://461f0e3ee03404127c8cfbf65ac112ac59bc2c642d9074071a3844107da8ce30","dweb:/ipfs/QmZCGkKzFymFQPvrFVDA5X93QXT17XqYkX1JSN4hmDpTPh"],"license":"BUSL-1.1"}},"version":1},"id":92}