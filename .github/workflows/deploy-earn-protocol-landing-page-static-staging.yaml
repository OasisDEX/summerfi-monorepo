name: Deploy Earn Protocol Static Landing Page Staging
on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  changes:
    name: Check for earn protocol changes
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'push' && github.event_name != 'workflow_dispatch' }}
    permissions:
      pull-requests: read
    outputs:
      build-earn-protocol-landing-page: ${{ steps.filter.outputs.build-earn-protocol-landing-page }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            build-earn-protocol-landing-page:
              - 'apps/earn-protocol-landing-page/**'
              - 'packages/app-db/**'
              - 'packages/app-types/**'
              - 'packages/app-earn-ui/**'
              - 'packages/app-utils/**'
              - 'packages/app-server-handlers/**'
              - 'packages/serverless-shared/**'
              - 'sdk/sdk-client/**'
              - 'sdk/sdk-client-react/**'
              - '.github/workflows/deploy-earn-protocol-landing-page-staging.yaml'
  build-earn-protocol-landing-page:
    name: Build and deploy Earn Protocol Static Landing Page
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
    environment: staging
    needs: [changes]
    # always() is needed because the 'changes' job is skipped on manual triggers (workflow_dispatch)
    # Without always(), this job would also be skipped when 'changes' is skipped
    if:
      ${{ always() && (needs.changes.outputs.build-earn-protocol-landing-page == 'true' ||
      github.event_name == 'workflow_dispatch') }}
    env:
      AWS_REGION: eu-central-1
      ENVIRONMENT_TAG: dev
      SERVICE_NAME: summer-fi-earn-lp-service-dev
      CLUSTER_NAME: summer-fi-earn-lp-dev
      CONFIG_URL: ${{ secrets.CONFIG_URL }}
      CONFIG_URL_EARN: ${{ secrets.CONFIG_URL_EARN }}
      CONFIG_URL_RAYS: ${{ secrets.CONFIG_URL_RAYS }}
      EARN_MIXPANEL_KEY: ${{ secrets.EARN_MIXPANEL_KEY }}
      FUNCTIONS_API_URL: ${{ vars.FUNCTIONS_API_URL }}
      NEXT_PUBLIC_EARN_MIXPANEL_KEY: ${{ secrets.NEXT_PUBLIC_EARN_MIXPANEL_KEY }}
      SUBGRAPH_BASE: ${{ secrets.SUBGRAPH_BASE }}
      NEXT_TELEMETRY_DISABLED: ${{ secrets.NEXT_TELEMETRY_DISABLED }}
      FORECAST_API_URL: ${{ secrets.FORECAST_API_URL }}
      SDK_API_URL: ${{ vars.SDK_API_URL }}
      NEWSLETTER_API_KEY: ${{ secrets.NEWSLETTER_API_KEY }}
      NEWSLETTER_PUBLICATION_ID: ${{ secrets.NEWSLETTER_PUBLICATION_ID }}
      NEWSLETTER_ENDPOINT: ${{ secrets.NEWSLETTER_ENDPOINT }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up turbo cache
        uses: rharkor/caching-for-turbo@v2.2.0
        with:
          max-age: 1mo
          max-size: 10gb
          cache-prefix: turbogha_
          provider: s3
          s3-bucket: staging-turbo-monorepo
          s3-region: eu-central-1
          s3-prefix: monorepo-cache/
          s3-endpoint: https://s3.amazonaws.com
          s3-access-key-id: ${{ secrets.TURBOREPO_S3_BUCKET_ACCESS_KEY_ID }}
          s3-secret-access-key: ${{ secrets.TURBOREPO_S3_BUCKET_SECRET_ACCESS_KEY }}

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 8.14.1

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup Earn Protocol LP App Next.js Cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/apps/earn-protocol-landing-page/.next/cache
          key:
            ${{ runner.os }}-earn-protocol-landing-page-app-${{ hashFiles('pnpm-lock.yaml') }}-${{
            hashFiles('apps/earn-protocol-landing-page/**/*.ts',
            'apps/earn-protocol-landing-page/**/*.tsx') }}
          restore-keys:
            ${{ runner.os }}-earn-protocol-landing-page-app-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Extract commit hash
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "NEXT_PUBLIC_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install

      - name: Prebuild
        run: pnpm prebuild

      - name: Build
        run: pnpm build-earn-frontend-landing

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: ${{ secrets.BUILD_DEPLOY_OIDC_ROLE_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Copy LP static files to a bucket ðŸª£
        run: |
          # Remove files from destination that are not in the source
          # Make uploaded files publicly readable
          # Set cache control headers for long-term caching
          aws s3 sync apps/earn-protocol-landing-page/out s3://${{ vars.LANDING_PAGE_BUCKET_NAME }}/ \
            --delete \
            --cache-control max-age=31536000,public

      - name: Invalidate CloudFront
        run: |
          AWS_MAX_ATTEMPTS=10 aws cloudfront create-invalidation --distribution-id ${{ secrets.EARN_CF_DIST_ID }} --paths "/*"
