name: 'Deploy SDK Armada Prod'

on:
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  deploy:
    name: Build & Deploy SDK Armada to production using SST
    environment: staging
    runs-on: ubuntu-latest
    env:
      COINGECKO_API_URL: ${{ secrets.COINGECKO_API_URL }}
      COINGECKO_API_VERSION: ${{ secrets.COINGECKO_API_VERSION }}
      COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
      COINGECKO_API_AUTH_HEADER: ${{ secrets.COINGECKO_API_AUTH_HEADER }}
      COINGECKO_SUPPORTED_CHAIN_IDS: ${{ secrets.COINGECKO_SUPPORTED_CHAIN_IDS }}
      ONE_INCH_API_URL: ${{ secrets.ONE_INCH_API_URL }}
      ONE_INCH_API_VERSION: ${{ secrets.ONE_INCH_API_VERSION }}
      ONE_INCH_API_KEY: ${{ secrets.ONE_INCH_API_KEY }}
      ONE_INCH_API_AUTH_HEADER: ${{ secrets.ONE_INCH_API_AUTH_HEADER }}
      ONE_INCH_SWAP_CHAIN_IDS: ${{ secrets.ONE_INCH_SWAP_CHAIN_IDS }}
      ONE_INCH_EXCLUDED_SWAP_PROTOCOLS: ${{ vars.ONE_INCH_EXCLUDED_SWAP_PROTOCOLS }}
      ONE_INCH_API_SPOT_URL: ${{ secrets.ONE_INCH_API_SPOT_URL }}
      ONE_INCH_API_SPOT_VERSION: ${{ secrets.ONE_INCH_API_SPOT_VERSION }}
      ONE_INCH_API_SPOT_KEY: ${{ secrets.ONE_INCH_API_SPOT_KEY }}
      ONE_INCH_API_SPOT_AUTH_HEADER: ${{ secrets.ONE_INCH_API_SPOT_AUTH_HEADER }}
      E2E_SDK_FORK_URL_MAINNET: ${{ secrets.MAINNET_RPC_URL }}
      SUBGRAPH_BASE: ${{ secrets.SUBGRAPH_BASE }}
      SDK_SUBGRAPH_CONFIG: ${{ secrets.SDK_SUBGRAPH_CONFIG_PROD }}
      SDK_RPC_GATEWAY: ${{ secrets.RPC_GATEWAY }}
      DEBANK_API_KEY: ${{ secrets.DEBANK_API_KEY }}
      DEBANK_API_URL: ${{ secrets.PROD_DEBANK_API_URL }}
      FUNCTIONS_API_URL: ${{ secrets.FUNCTIONS_API_URL }}
      POWERTOOLS_LOG_LEVEL: ${{ vars.POWERTOOLS_LOG_LEVEL }}
      REDIS_CACHE_URL: ${{ secrets.REDIS_CACHE_URL }}
      REDIS_CACHE_USER: ${{ secrets.REDIS_CACHE_USER }}
      REDIS_CACHE_PASSWORD: ${{ secrets.REDIS_CACHE_PASSWORD }}
      VPC_ID: ${{ secrets.VPC_ID }}
      SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
      RAYS_DB_WRITE_CONNECTION_STRING: ${{ secrets.RAYS_DB_WRITE_CONNECTION_STRING }}
      RAYS_DB_READ_CONNECTION_STRING: ${{ secrets.RAYS_DB_READ_CONNECTION_STRING }}
      BORROW_DB_READ_CONNECTION_STRING: ${{ secrets.BORROW_DB_READ_CONNECTION_STRING }}
      CONFIG_URL: ${{ secrets.CONFIG_URL }}
      CONFIG_URL_EARN: ${{ secrets.CONFIG_URL_EARN }}
      CONFIG_URL_RAYS: ${{ secrets.CONFIG_URL_RAYS }}
      SUMMER_HUB_CHAIN_ID: ${{ secrets.SDK_HUB_CHAIN_ID }}
      SUMMER_DEPLOYED_CHAINS_ID: ${{ vars.SUMMER_DEPLOYED_CHAINS_ID_PROD }}
      SUMMER_DEPLOYMENT_CONFIG: ${{ vars.SUMMER_DEPLOYMENT_CONFIG_PROD }}
      SDK_DISTRIBUTIONS_BASE_URL: ${{ vars.SDK_DISTRIBUTIONS_BASE_URL }}
      SDK_DISTRIBUTIONS_FILES: ${{ vars.SDK_DISTRIBUTIONS_FILES }}
      SDK_NAMED_REFERRALS_FILE: ${{ vars.SDK_NAMED_REFERRALS_FILE }}
      SDK_USE_FORK: ${{ secrets.SDK_USE_FORK }}
      SDK_FORK_CONFIG: ${{ secrets.SDK_FORK_CONFIG }}
    steps:
      - name: Send start notification to Discord
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_SDK_DEPLOY }}
          DISCORD_EMBEDS:
            '[{"title":"Link to GitHub Action:
            ${{github.run_id}}","url":"https://github.com/${{github.repository}}/actions/runs/${{github.run_id
            }}"}]'
        with:
          args:
            'SDK deployment `${{github.run_id}}` started on armada prod üöÄ (from branch `${{
            github.ref_name }}` by [${{github.triggering_actor
            }}](https://github.com/${{github.triggering_actor }})).'

      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Set up turbo cache
        uses: rharkor/caching-for-turbo@v1.5

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 8.14.1

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install dependencies
        run: pnpm install

      - name: Prebuild
        run: pnpm prebuild:sdk

      - name: Build
        run: pnpm build:sdk

      - name: Deploy app
        run: |
          pnpm run sst:deploy:sdk:armada-prod

      - name: Send success notification to Discord
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_SDK_DEPLOY }}
        with:
          args: 'SDK deployment `${{github.run_id}}` finished successfully on armada prod üéâ'

      - name: Send failure notification to Discord
        if: failure()
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_SDK_DEPLOY }}
        with:
          args: 'SDK deployment `${{github.run_id}}` failed on armada prod ‚ùå'

      - name: Send cancellation notification to Discord
        if: cancelled()
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_SDK_DEPLOY }}
        with:
          args: 'SDK deployment `${{github.run_id}}` was cancelled on armada prod üö´'
