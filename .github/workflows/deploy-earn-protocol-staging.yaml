name: Deploy Earn Protocol App Staging
on:
  workflow_dispatch:
  push:
    branches:
      - dev

jobs:
  changes:
    name: Check for Earn Protocol changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    permissions:
      pull-requests: read
    outputs:
      build-earn-protocol: ${{ steps.filter.outputs.build-earn-protocol }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            build-earn-protocol:
              - 'apps/earn-protocol/**'
              - 'packages/app-db/**'
              - 'packages/app-types/**'
              - 'packages/app-earn-ui/**'
              - 'packages/app-icons/**'
  build-earn-protocol:
    name: Build and deploy Earn Protocol App
    runs-on: ubuntu-latest
    environment: staging
    needs: changes
    if: ${{ needs.changes.outputs.build-earn-protocol == 'true' }}
    env:
      AWS_REGION: us-east-1
      ENVIRONMENT_TAG: staging
      SERVICE_NAME: summer-fi-earn-protocol-staging
      CLUSTER_NAME: summer-fi-earn-protocol-staging
      CONFIG_URL: ${{ secrets.CONFIG_URL }}
      CONFIG_URL_RAYS: ${{ secrets.CONFIG_URL_RAYS }}
      FUNCTIONS_API_URL: ${{ secrets.FUNCTIONS_API_URL }}
      BORROW_DB_READ_CONNECTION_STRING: ${{ secrets.BORROW_DB_READ_CONNECTION_STRING }}
      EARN_PROTOCOL_DB_CONNECTION_STRING: ${{ secrets.EARN_PROTOCOL_DB_CONNECTION_STRING }}
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
      MIXPANEL_KEY: ${{ secrets.MIXPANEL_KEY }}
      NEXT_PUBLIC_MIXPANEL_KEY: ${{ secrets.NEXT_PUBLIC_MIXPANEL_KEY }}
      ACCOUNT_KIT_API_KEY: ${{ secrets.ACCOUNT_KIT_API_KEY }}
      NEXT_PUBLIC_TRANSAK_API_KEY: ${{ secrets.NEXT_PUBLIC_TRANSAK_API_KEY }}
      NEXT_PUBLIC_TRANSAK_ENVIRONMENT: ${{ secrets.NEXT_PUBLIC_TRANSAK_ENVIRONMENT }}
      SUBGRAPH_BASE: ${{ secrets.SUBGRAPH_BASE }}
      SDK_API_URL: ${{ secrets.SDK_API_URL }}
      EARN_PROTOCOL_JWT_SECRET: ${{ secrets.EARN_PROTOCOL_JWT_SECRET }}
      EARN_PROTOCOL_JWT_CHALLENGE_SECRET: ${{ secrets.EARN_PROTOCOL_JWT_CHALLENGE_SECRET }}
      RPC_GATEWAY: ${{ secrets.RPC_GATEWAY }}
      TRM_API_KEY: ${{ secrets.TRM_API_KEY }}

    steps:
      - name: Setup workflow
        uses: ./.github/workflows/parts/setup

      - name: Setup Earn Protocol App Cache
        uses: ./.github/workflows/app-cache/earn-protocol

      - name: Setup VPN
        uses: ./.github/workflows/parts/vpn

      - name: Extract commit hash
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Install dependencies
        run: pnpm install

      - name: Prebuild
        run: pnpm prebuild

      - name: Build
        run: pnpm build-earn-frontend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build docker image, copy build output and push to ECR
        id: build-image
        env:
          LATEST_TAG: latest
          ECR_REPO_NAME: summer-fi-earn-protocol-staging
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SHA_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f apps/earn-protocol/docker/Dockerfile \
                       --build-arg BORROW_DB_READ_CONNECTION_STRING=${{ secrets.BORROW_DB_READ_CONNECTION_STRING }} \
                       --build-arg EARN_PROTOCOL_DB_CONNECTION_STRING=${{ secrets.EARN_PROTOCOL_DB_CONNECTION_STRING }} \
                       --build-arg CONTENTFUL_SPACE_ID=${{ secrets.CONTENTFUL_SPACE_ID }} \
                       --build-arg CONTENTFUL_ACCESS_TOKEN=${{ secrets.CONTENTFUL_ACCESS_TOKEN }} \
                       --build-arg CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }} \
                       --build-arg CONFIG_URL=${{ secrets.CONFIG_URL }} \
                       --build-arg CONFIG_URL_RAYS=${{ secrets.CONFIG_URL_RAYS }} \
                       --build-arg FUNCTIONS_API_URL=${{ secrets.FUNCTIONS_API_URL }} \
                       --build-arg MIXPANEL_KEY=${{ secrets.MIXPANEL_KEY }} \
                       --build-arg NEXT_PUBLIC_MIXPANEL_KEY=${{ secrets.NEXT_PUBLIC_MIXPANEL_KEY }} \
                       --build-arg ACCOUNT_KIT_API_KEY=${{ secrets.ACCOUNT_KIT_API_KEY }} \
                       --build-arg NEXT_PUBLIC_TRANSAK_API_KEY=${{ secrets.NEXT_PUBLIC_TRANSAK_API_KEY }} \
                       --build-arg EARN_PROTOCOL_JWT_SECRET=${{ secrets.EARN_PROTOCOL_JWT_SECRET }} \
                       --build-arg EARN_PROTOCOL_JWT_CHALLENGE_SECRET=${{ secrets.EARN_PROTOCOL_JWT_CHALLENGE_SECRET }} \
                       --build-arg NEXT_PUBLIC_TRANSAK_ENVIRONMENT=${{ secrets.NEXT_PUBLIC_TRANSAK_ENVIRONMENT }} \
                       --build-arg RPC_GATEWAY=${{ secrets.RPC_GATEWAY }} \
                       --build-arg TRM_API_KEY=${{ secrets.TRM_API_KEY }} \
                       --cache-from type=registry,ref=189194422115.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/buildkit-test:cache \
                       -t $ECR_REGISTRY/$ECR_REPO_NAME:$SHA_TAG \
                       -t $ECR_REGISTRY/$ECR_REPO_NAME:$LATEST_TAG \
                       -t $ECR_REGISTRY/$ECR_REPO_NAME:$ENVIRONMENT_TAG \
                       ./apps/earn-protocol
          docker push $ECR_REGISTRY/$ECR_REPO_NAME --all-tags

      - name: Update ECS service with latest Docker image
        id: service-update
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service ${{ env.SERVICE_NAME }} --force-new-deployment --region $AWS_REGION

      - name: Wait for all services to become stable
        uses: oryanmoshe/ecs-wait-action@v1.3
        with:
          ecs-cluster: ${{ env.CLUSTER_NAME }}
          ecs-services: '["${{ env.SERVICE_NAME }}"]'
